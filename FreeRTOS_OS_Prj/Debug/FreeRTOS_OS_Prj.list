
FreeRTOS_OS_Prj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081b8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08008358  08008358  00009358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008434  08008434  0000a064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008434  08008434  00009434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800843c  0800843c  0000a064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800843c  0800843c  0000943c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008440  08008440  00009440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08008444  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00017258  20000064  080084a8  0000a064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200172bc  080084a8  0000a2bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023f38  00000000  00000000  0000a094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ef4  00000000  00000000  0002dfcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d38  00000000  00000000  00032ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016aa  00000000  00000000  00034bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fc0f  00000000  00000000  000362a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026f91  00000000  00000000  00055eb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac49f  00000000  00000000  0007ce42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001292e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f64  00000000  00000000  00129324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  00131288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008340 	.word	0x08008340

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08008340 	.word	0x08008340

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c0:	f000 fd96 	bl	80010f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c4:	f000 f83e 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c8:	f000 fa40 	bl	8000a4c <MX_GPIO_Init>
  MX_ADC1_Init();
 80005cc:	f000 f89a 	bl	8000704 <MX_ADC1_Init>
  MX_I2C1_Init();
 80005d0:	f000 f8ea 	bl	80007a8 <MX_I2C1_Init>
  MX_SPI1_Init();
 80005d4:	f000 f92c 	bl	8000830 <MX_SPI1_Init>
  MX_TIM1_Init();
 80005d8:	f000 f960 	bl	800089c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80005dc:	f000 f9e2 	bl	80009a4 <MX_USART1_UART_Init>
  MX_IWDG_Init();
 80005e0:	f000 f910 	bl	8000804 <MX_IWDG_Init>
  MX_USART2_UART_Init();
 80005e4:	f000 fa08 	bl	80009f8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  os_add_drv_uart_handle		(&huart1,HW_ID_UART_1);
 80005e8:	2100      	movs	r1, #0
 80005ea:	480f      	ldr	r0, [pc, #60]	@ (8000628 <main+0x6c>)
 80005ec:	f004 f8d8 	bl	80047a0 <os_add_drv_uart_handle>
  os_add_drv_uart_handle		(&huart2,HW_ID_UART_2);
 80005f0:	2101      	movs	r1, #1
 80005f2:	480e      	ldr	r0, [pc, #56]	@ (800062c <main+0x70>)
 80005f4:	f004 f8d4 	bl	80047a0 <os_add_drv_uart_handle>
  os_add_drv_iic_handle			(&hi2c1,HW_ID_IIC_1);
 80005f8:	2100      	movs	r1, #0
 80005fa:	480d      	ldr	r0, [pc, #52]	@ (8000630 <main+0x74>)
 80005fc:	f004 f8e8 	bl	80047d0 <os_add_drv_iic_handle>
  os_add_drv_spi_handle			(&hspi1,HW_ID_SPI_1);
 8000600:	2100      	movs	r1, #0
 8000602:	480c      	ldr	r0, [pc, #48]	@ (8000634 <main+0x78>)
 8000604:	f004 f8fc 	bl	8004800 <os_add_drv_spi_handle>
  os_add_drv_adc_handle			(&hadc1,HW_ID_ADC_1);
 8000608:	2100      	movs	r1, #0
 800060a:	480b      	ldr	r0, [pc, #44]	@ (8000638 <main+0x7c>)
 800060c:	f004 f910 	bl	8004830 <os_add_drv_adc_handle>
  os_add_drv_timer_handle		(&htim1,HW_ID_TIM_1);
 8000610:	2100      	movs	r1, #0
 8000612:	480a      	ldr	r0, [pc, #40]	@ (800063c <main+0x80>)
 8000614:	f004 f924 	bl	8004860 <os_add_drv_timer_handle>
  os_add_drv_iwdg_handle		(&hiwdg);
 8000618:	4809      	ldr	r0, [pc, #36]	@ (8000640 <main+0x84>)
 800061a:	f004 f939 	bl	8004890 <os_add_drv_iwdg_handle>
  os_entry();
 800061e:	f004 f947 	bl	80048b0 <os_entry>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000622:	bf00      	nop
 8000624:	e7fd      	b.n	8000622 <main+0x66>
 8000626:	bf00      	nop
 8000628:	200001c8 	.word	0x200001c8
 800062c:	20000210 	.word	0x20000210
 8000630:	200000c8 	.word	0x200000c8
 8000634:	20000128 	.word	0x20000128
 8000638:	20000080 	.word	0x20000080
 800063c:	20000180 	.word	0x20000180
 8000640:	2000011c 	.word	0x2000011c

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	@ 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	2230      	movs	r2, #48	@ 0x30
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f007 f998 	bl	8007988 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	4b23      	ldr	r3, [pc, #140]	@ (80006fc <SystemClock_Config+0xb8>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000670:	4a22      	ldr	r2, [pc, #136]	@ (80006fc <SystemClock_Config+0xb8>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	@ 0x40
 8000678:	4b20      	ldr	r3, [pc, #128]	@ (80006fc <SystemClock_Config+0xb8>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	4b1d      	ldr	r3, [pc, #116]	@ (8000700 <SystemClock_Config+0xbc>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a1c      	ldr	r2, [pc, #112]	@ (8000700 <SystemClock_Config+0xbc>)
 800068e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b1a      	ldr	r3, [pc, #104]	@ (8000700 <SystemClock_Config+0xbc>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80006a0:	230a      	movs	r3, #10
 80006a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a4:	2301      	movs	r3, #1
 80006a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a8:	2310      	movs	r3, #16
 80006aa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006ac:	2301      	movs	r3, #1
 80006ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006b0:	2300      	movs	r3, #0
 80006b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b4:	f107 0320 	add.w	r3, r7, #32
 80006b8:	4618      	mov	r0, r3
 80006ba:	f001 fc09 	bl	8001ed0 <HAL_RCC_OscConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006c4:	f000 fa07 	bl	8000ad6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c8:	230f      	movs	r3, #15
 80006ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006cc:	2300      	movs	r3, #0
 80006ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f001 fe6c 	bl	80023c0 <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006ee:	f000 f9f2 	bl	8000ad6 <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	3750      	adds	r7, #80	@ 0x50
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800
 8000700:	40007000 	.word	0x40007000

08000704 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800070a:	463b      	mov	r3, r7
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000716:	4b21      	ldr	r3, [pc, #132]	@ (800079c <MX_ADC1_Init+0x98>)
 8000718:	4a21      	ldr	r2, [pc, #132]	@ (80007a0 <MX_ADC1_Init+0x9c>)
 800071a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800071c:	4b1f      	ldr	r3, [pc, #124]	@ (800079c <MX_ADC1_Init+0x98>)
 800071e:	2200      	movs	r2, #0
 8000720:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000722:	4b1e      	ldr	r3, [pc, #120]	@ (800079c <MX_ADC1_Init+0x98>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000728:	4b1c      	ldr	r3, [pc, #112]	@ (800079c <MX_ADC1_Init+0x98>)
 800072a:	2200      	movs	r2, #0
 800072c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800072e:	4b1b      	ldr	r3, [pc, #108]	@ (800079c <MX_ADC1_Init+0x98>)
 8000730:	2200      	movs	r2, #0
 8000732:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000734:	4b19      	ldr	r3, [pc, #100]	@ (800079c <MX_ADC1_Init+0x98>)
 8000736:	2200      	movs	r2, #0
 8000738:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800073c:	4b17      	ldr	r3, [pc, #92]	@ (800079c <MX_ADC1_Init+0x98>)
 800073e:	2200      	movs	r2, #0
 8000740:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000742:	4b16      	ldr	r3, [pc, #88]	@ (800079c <MX_ADC1_Init+0x98>)
 8000744:	4a17      	ldr	r2, [pc, #92]	@ (80007a4 <MX_ADC1_Init+0xa0>)
 8000746:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000748:	4b14      	ldr	r3, [pc, #80]	@ (800079c <MX_ADC1_Init+0x98>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800074e:	4b13      	ldr	r3, [pc, #76]	@ (800079c <MX_ADC1_Init+0x98>)
 8000750:	2201      	movs	r2, #1
 8000752:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000754:	4b11      	ldr	r3, [pc, #68]	@ (800079c <MX_ADC1_Init+0x98>)
 8000756:	2200      	movs	r2, #0
 8000758:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800075c:	4b0f      	ldr	r3, [pc, #60]	@ (800079c <MX_ADC1_Init+0x98>)
 800075e:	2201      	movs	r2, #1
 8000760:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000762:	480e      	ldr	r0, [pc, #56]	@ (800079c <MX_ADC1_Init+0x98>)
 8000764:	f000 fd06 	bl	8001174 <HAL_ADC_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800076e:	f000 f9b2 	bl	8000ad6 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000772:	2300      	movs	r3, #0
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000776:	2301      	movs	r3, #1
 8000778:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077e:	463b      	mov	r3, r7
 8000780:	4619      	mov	r1, r3
 8000782:	4806      	ldr	r0, [pc, #24]	@ (800079c <MX_ADC1_Init+0x98>)
 8000784:	f000 fd3a 	bl	80011fc <HAL_ADC_ConfigChannel>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800078e:	f000 f9a2 	bl	8000ad6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	3710      	adds	r7, #16
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000080 	.word	0x20000080
 80007a0:	40012000 	.word	0x40012000
 80007a4:	0f000001 	.word	0x0f000001

080007a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007ac:	4b12      	ldr	r3, [pc, #72]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007ae:	4a13      	ldr	r2, [pc, #76]	@ (80007fc <MX_I2C1_Init+0x54>)
 80007b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007b2:	4b11      	ldr	r3, [pc, #68]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007b4:	4a12      	ldr	r2, [pc, #72]	@ (8000800 <MX_I2C1_Init+0x58>)
 80007b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007be:	4b0e      	ldr	r3, [pc, #56]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007cc:	4b0a      	ldr	r3, [pc, #40]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007d2:	4b09      	ldr	r3, [pc, #36]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d8:	4b07      	ldr	r3, [pc, #28]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007de:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007e4:	4804      	ldr	r0, [pc, #16]	@ (80007f8 <MX_I2C1_Init+0x50>)
 80007e6:	f001 fa2f 	bl	8001c48 <HAL_I2C_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007f0:	f000 f971 	bl	8000ad6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	200000c8 	.word	0x200000c8
 80007fc:	40005400 	.word	0x40005400
 8000800:	000186a0 	.word	0x000186a0

08000804 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000808:	4b07      	ldr	r3, [pc, #28]	@ (8000828 <MX_IWDG_Init+0x24>)
 800080a:	4a08      	ldr	r2, [pc, #32]	@ (800082c <MX_IWDG_Init+0x28>)
 800080c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 800080e:	4b06      	ldr	r3, [pc, #24]	@ (8000828 <MX_IWDG_Init+0x24>)
 8000810:	2200      	movs	r2, #0
 8000812:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8000814:	4b04      	ldr	r3, [pc, #16]	@ (8000828 <MX_IWDG_Init+0x24>)
 8000816:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800081a:	609a      	str	r2, [r3, #8]
//  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	2000011c 	.word	0x2000011c
 800082c:	40003000 	.word	0x40003000

08000830 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000834:	4b17      	ldr	r3, [pc, #92]	@ (8000894 <MX_SPI1_Init+0x64>)
 8000836:	4a18      	ldr	r2, [pc, #96]	@ (8000898 <MX_SPI1_Init+0x68>)
 8000838:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800083a:	4b16      	ldr	r3, [pc, #88]	@ (8000894 <MX_SPI1_Init+0x64>)
 800083c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000840:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000842:	4b14      	ldr	r3, [pc, #80]	@ (8000894 <MX_SPI1_Init+0x64>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000848:	4b12      	ldr	r3, [pc, #72]	@ (8000894 <MX_SPI1_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800084e:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <MX_SPI1_Init+0x64>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000854:	4b0f      	ldr	r3, [pc, #60]	@ (8000894 <MX_SPI1_Init+0x64>)
 8000856:	2200      	movs	r2, #0
 8000858:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800085a:	4b0e      	ldr	r3, [pc, #56]	@ (8000894 <MX_SPI1_Init+0x64>)
 800085c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000860:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000862:	4b0c      	ldr	r3, [pc, #48]	@ (8000894 <MX_SPI1_Init+0x64>)
 8000864:	2200      	movs	r2, #0
 8000866:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000868:	4b0a      	ldr	r3, [pc, #40]	@ (8000894 <MX_SPI1_Init+0x64>)
 800086a:	2200      	movs	r2, #0
 800086c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800086e:	4b09      	ldr	r3, [pc, #36]	@ (8000894 <MX_SPI1_Init+0x64>)
 8000870:	2200      	movs	r2, #0
 8000872:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000874:	4b07      	ldr	r3, [pc, #28]	@ (8000894 <MX_SPI1_Init+0x64>)
 8000876:	2200      	movs	r2, #0
 8000878:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800087a:	4b06      	ldr	r3, [pc, #24]	@ (8000894 <MX_SPI1_Init+0x64>)
 800087c:	220a      	movs	r2, #10
 800087e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000880:	4804      	ldr	r0, [pc, #16]	@ (8000894 <MX_SPI1_Init+0x64>)
 8000882:	f001 ffaf 	bl	80027e4 <HAL_SPI_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800088c:	f000 f923 	bl	8000ad6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000128 	.word	0x20000128
 8000898:	40013000 	.word	0x40013000

0800089c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b092      	sub	sp, #72	@ 0x48
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]
 80008bc:	615a      	str	r2, [r3, #20]
 80008be:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2220      	movs	r2, #32
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f007 f85e 	bl	8007988 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008cc:	4b33      	ldr	r3, [pc, #204]	@ (800099c <MX_TIM1_Init+0x100>)
 80008ce:	4a34      	ldr	r2, [pc, #208]	@ (80009a0 <MX_TIM1_Init+0x104>)
 80008d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008d2:	4b32      	ldr	r3, [pc, #200]	@ (800099c <MX_TIM1_Init+0x100>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d8:	4b30      	ldr	r3, [pc, #192]	@ (800099c <MX_TIM1_Init+0x100>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008de:	4b2f      	ldr	r3, [pc, #188]	@ (800099c <MX_TIM1_Init+0x100>)
 80008e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e6:	4b2d      	ldr	r3, [pc, #180]	@ (800099c <MX_TIM1_Init+0x100>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008ec:	4b2b      	ldr	r3, [pc, #172]	@ (800099c <MX_TIM1_Init+0x100>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f2:	4b2a      	ldr	r3, [pc, #168]	@ (800099c <MX_TIM1_Init+0x100>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008f8:	4828      	ldr	r0, [pc, #160]	@ (800099c <MX_TIM1_Init+0x100>)
 80008fa:	f002 f8b7 	bl	8002a6c <HAL_TIM_PWM_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000904:	f000 f8e7 	bl	8000ad6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000908:	2300      	movs	r3, #0
 800090a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090c:	2300      	movs	r3, #0
 800090e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000910:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000914:	4619      	mov	r1, r3
 8000916:	4821      	ldr	r0, [pc, #132]	@ (800099c <MX_TIM1_Init+0x100>)
 8000918:	f002 fce4 	bl	80032e4 <HAL_TIMEx_MasterConfigSynchronization>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000922:	f000 f8d8 	bl	8000ad6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000926:	2360      	movs	r3, #96	@ 0x60
 8000928:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800092e:	2300      	movs	r3, #0
 8000930:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000932:	2300      	movs	r3, #0
 8000934:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000936:	2300      	movs	r3, #0
 8000938:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800093a:	2300      	movs	r3, #0
 800093c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800093e:	2300      	movs	r3, #0
 8000940:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000942:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000946:	2200      	movs	r2, #0
 8000948:	4619      	mov	r1, r3
 800094a:	4814      	ldr	r0, [pc, #80]	@ (800099c <MX_TIM1_Init+0x100>)
 800094c:	f002 f9ce 	bl	8002cec <HAL_TIM_PWM_ConfigChannel>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000956:	f000 f8be 	bl	8000ad6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800095a:	2300      	movs	r3, #0
 800095c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800095e:	2300      	movs	r3, #0
 8000960:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800096e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000972:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000974:	2300      	movs	r3, #0
 8000976:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	4619      	mov	r1, r3
 800097c:	4807      	ldr	r0, [pc, #28]	@ (800099c <MX_TIM1_Init+0x100>)
 800097e:	f002 fd1f 	bl	80033c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000988:	f000 f8a5 	bl	8000ad6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800098c:	4803      	ldr	r0, [pc, #12]	@ (800099c <MX_TIM1_Init+0x100>)
 800098e:	f000 f9d1 	bl	8000d34 <HAL_TIM_MspPostInit>

}
 8000992:	bf00      	nop
 8000994:	3748      	adds	r7, #72	@ 0x48
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000180 	.word	0x20000180
 80009a0:	40010000 	.word	0x40010000

080009a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009a8:	4b10      	ldr	r3, [pc, #64]	@ (80009ec <MX_USART1_UART_Init+0x48>)
 80009aa:	4a11      	ldr	r2, [pc, #68]	@ (80009f0 <MX_USART1_UART_Init+0x4c>)
 80009ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 500000;
 80009ae:	4b0f      	ldr	r3, [pc, #60]	@ (80009ec <MX_USART1_UART_Init+0x48>)
 80009b0:	4a10      	ldr	r2, [pc, #64]	@ (80009f4 <MX_USART1_UART_Init+0x50>)
 80009b2:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009b4:	4b0d      	ldr	r3, [pc, #52]	@ (80009ec <MX_USART1_UART_Init+0x48>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009ba:	4b0c      	ldr	r3, [pc, #48]	@ (80009ec <MX_USART1_UART_Init+0x48>)
 80009bc:	2200      	movs	r2, #0
 80009be:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009c0:	4b0a      	ldr	r3, [pc, #40]	@ (80009ec <MX_USART1_UART_Init+0x48>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009c6:	4b09      	ldr	r3, [pc, #36]	@ (80009ec <MX_USART1_UART_Init+0x48>)
 80009c8:	220c      	movs	r2, #12
 80009ca:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009cc:	4b07      	ldr	r3, [pc, #28]	@ (80009ec <MX_USART1_UART_Init+0x48>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d2:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <MX_USART1_UART_Init+0x48>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009d8:	4804      	ldr	r0, [pc, #16]	@ (80009ec <MX_USART1_UART_Init+0x48>)
 80009da:	f002 fd57 	bl	800348c <HAL_UART_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 80009e4:	f000 f877 	bl	8000ad6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	200001c8 	.word	0x200001c8
 80009f0:	40011000 	.word	0x40011000
 80009f4:	0007a120 	.word	0x0007a120

080009f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009fc:	4b10      	ldr	r3, [pc, #64]	@ (8000a40 <MX_USART2_UART_Init+0x48>)
 80009fe:	4a11      	ldr	r2, [pc, #68]	@ (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 500000;
 8000a02:	4b0f      	ldr	r3, [pc, #60]	@ (8000a40 <MX_USART2_UART_Init+0x48>)
 8000a04:	4a10      	ldr	r2, [pc, #64]	@ (8000a48 <MX_USART2_UART_Init+0x50>)
 8000a06:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a08:	4b0d      	ldr	r3, [pc, #52]	@ (8000a40 <MX_USART2_UART_Init+0x48>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a40 <MX_USART2_UART_Init+0x48>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a14:	4b0a      	ldr	r3, [pc, #40]	@ (8000a40 <MX_USART2_UART_Init+0x48>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a1a:	4b09      	ldr	r3, [pc, #36]	@ (8000a40 <MX_USART2_UART_Init+0x48>)
 8000a1c:	220c      	movs	r2, #12
 8000a1e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a20:	4b07      	ldr	r3, [pc, #28]	@ (8000a40 <MX_USART2_UART_Init+0x48>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a26:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <MX_USART2_UART_Init+0x48>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a2c:	4804      	ldr	r0, [pc, #16]	@ (8000a40 <MX_USART2_UART_Init+0x48>)
 8000a2e:	f002 fd2d 	bl	800348c <HAL_UART_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8000a38:	f000 f84d 	bl	8000ad6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000210 	.word	0x20000210
 8000a44:	40004400 	.word	0x40004400
 8000a48:	0007a120 	.word	0x0007a120

08000a4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	4b17      	ldr	r3, [pc, #92]	@ (8000ab4 <MX_GPIO_Init+0x68>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	4a16      	ldr	r2, [pc, #88]	@ (8000ab4 <MX_GPIO_Init+0x68>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a62:	4b14      	ldr	r3, [pc, #80]	@ (8000ab4 <MX_GPIO_Init+0x68>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	4b10      	ldr	r3, [pc, #64]	@ (8000ab4 <MX_GPIO_Init+0x68>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	4a0f      	ldr	r2, [pc, #60]	@ (8000ab4 <MX_GPIO_Init+0x68>)
 8000a78:	f043 0310 	orr.w	r3, r3, #16
 8000a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab4 <MX_GPIO_Init+0x68>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	f003 0310 	and.w	r3, r3, #16
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	607b      	str	r3, [r7, #4]
 8000a8e:	4b09      	ldr	r3, [pc, #36]	@ (8000ab4 <MX_GPIO_Init+0x68>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	4a08      	ldr	r2, [pc, #32]	@ (8000ab4 <MX_GPIO_Init+0x68>)
 8000a94:	f043 0302 	orr.w	r3, r3, #2
 8000a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a9a:	4b06      	ldr	r3, [pc, #24]	@ (8000ab4 <MX_GPIO_Init+0x68>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	f003 0302 	and.w	r3, r3, #2
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000aa6:	bf00      	nop
 8000aa8:	3714      	adds	r7, #20
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	40023800 	.word	0x40023800

08000ab8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ac8:	d101      	bne.n	8000ace <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000aca:	f000 fb33 	bl	8001134 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ada:	b672      	cpsid	i
}
 8000adc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ade:	bf00      	nop
 8000ae0:	e7fd      	b.n	8000ade <Error_Handler+0x8>
	...

08000ae4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	4b15      	ldr	r3, [pc, #84]	@ (8000b44 <HAL_MspInit+0x60>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af2:	4a14      	ldr	r2, [pc, #80]	@ (8000b44 <HAL_MspInit+0x60>)
 8000af4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000af8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000afa:	4b12      	ldr	r3, [pc, #72]	@ (8000b44 <HAL_MspInit+0x60>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000afe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	603b      	str	r3, [r7, #0]
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b44 <HAL_MspInit+0x60>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0e:	4a0d      	ldr	r2, [pc, #52]	@ (8000b44 <HAL_MspInit+0x60>)
 8000b10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b16:	4b0b      	ldr	r3, [pc, #44]	@ (8000b44 <HAL_MspInit+0x60>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 15, 0);
 8000b22:	2200      	movs	r2, #0
 8000b24:	210f      	movs	r1, #15
 8000b26:	f06f 0004 	mvn.w	r0, #4
 8000b2a:	f000 fe4d 	bl	80017c8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	210f      	movs	r1, #15
 8000b32:	f06f 0001 	mvn.w	r0, #1
 8000b36:	f000 fe47 	bl	80017c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40023800 	.word	0x40023800

08000b48 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	@ 0x28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a17      	ldr	r2, [pc, #92]	@ (8000bc4 <HAL_ADC_MspInit+0x7c>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d127      	bne.n	8000bba <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	4b16      	ldr	r3, [pc, #88]	@ (8000bc8 <HAL_ADC_MspInit+0x80>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b72:	4a15      	ldr	r2, [pc, #84]	@ (8000bc8 <HAL_ADC_MspInit+0x80>)
 8000b74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b78:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b7a:	4b13      	ldr	r3, [pc, #76]	@ (8000bc8 <HAL_ADC_MspInit+0x80>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc8 <HAL_ADC_MspInit+0x80>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	4a0e      	ldr	r2, [pc, #56]	@ (8000bc8 <HAL_ADC_MspInit+0x80>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b96:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc8 <HAL_ADC_MspInit+0x80>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4805      	ldr	r0, [pc, #20]	@ (8000bcc <HAL_ADC_MspInit+0x84>)
 8000bb6:	f000 fec3 	bl	8001940 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000bba:	bf00      	nop
 8000bbc:	3728      	adds	r7, #40	@ 0x28
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40012000 	.word	0x40012000
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020000 	.word	0x40020000

08000bd0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	@ 0x28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a19      	ldr	r2, [pc, #100]	@ (8000c54 <HAL_I2C_MspInit+0x84>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d12b      	bne.n	8000c4a <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	4b18      	ldr	r3, [pc, #96]	@ (8000c58 <HAL_I2C_MspInit+0x88>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	4a17      	ldr	r2, [pc, #92]	@ (8000c58 <HAL_I2C_MspInit+0x88>)
 8000bfc:	f043 0302 	orr.w	r3, r3, #2
 8000c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c02:	4b15      	ldr	r3, [pc, #84]	@ (8000c58 <HAL_I2C_MspInit+0x88>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c06:	f003 0302 	and.w	r3, r3, #2
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c0e:	23c0      	movs	r3, #192	@ 0xc0
 8000c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c12:	2312      	movs	r3, #18
 8000c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c1e:	2304      	movs	r3, #4
 8000c20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	480c      	ldr	r0, [pc, #48]	@ (8000c5c <HAL_I2C_MspInit+0x8c>)
 8000c2a:	f000 fe89 	bl	8001940 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	4b09      	ldr	r3, [pc, #36]	@ (8000c58 <HAL_I2C_MspInit+0x88>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c36:	4a08      	ldr	r2, [pc, #32]	@ (8000c58 <HAL_I2C_MspInit+0x88>)
 8000c38:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c3e:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <HAL_I2C_MspInit+0x88>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c4a:	bf00      	nop
 8000c4c:	3728      	adds	r7, #40	@ 0x28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40005400 	.word	0x40005400
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020400 	.word	0x40020400

08000c60 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08a      	sub	sp, #40	@ 0x28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a19      	ldr	r2, [pc, #100]	@ (8000ce4 <HAL_SPI_MspInit+0x84>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d12b      	bne.n	8000cda <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]
 8000c86:	4b18      	ldr	r3, [pc, #96]	@ (8000ce8 <HAL_SPI_MspInit+0x88>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c8a:	4a17      	ldr	r2, [pc, #92]	@ (8000ce8 <HAL_SPI_MspInit+0x88>)
 8000c8c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c90:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c92:	4b15      	ldr	r3, [pc, #84]	@ (8000ce8 <HAL_SPI_MspInit+0x88>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	4b11      	ldr	r3, [pc, #68]	@ (8000ce8 <HAL_SPI_MspInit+0x88>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca6:	4a10      	ldr	r2, [pc, #64]	@ (8000ce8 <HAL_SPI_MspInit+0x88>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce8 <HAL_SPI_MspInit+0x88>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000cba:	23e0      	movs	r3, #224	@ 0xe0
 8000cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cca:	2305      	movs	r3, #5
 8000ccc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4805      	ldr	r0, [pc, #20]	@ (8000cec <HAL_SPI_MspInit+0x8c>)
 8000cd6:	f000 fe33 	bl	8001940 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000cda:	bf00      	nop
 8000cdc:	3728      	adds	r7, #40	@ 0x28
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40013000 	.word	0x40013000
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40020000 	.word	0x40020000

08000cf0 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a0b      	ldr	r2, [pc, #44]	@ (8000d2c <HAL_TIM_PWM_MspInit+0x3c>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d10d      	bne.n	8000d1e <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	4b0a      	ldr	r3, [pc, #40]	@ (8000d30 <HAL_TIM_PWM_MspInit+0x40>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d0a:	4a09      	ldr	r2, [pc, #36]	@ (8000d30 <HAL_TIM_PWM_MspInit+0x40>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d12:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <HAL_TIM_PWM_MspInit+0x40>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000d1e:	bf00      	nop
 8000d20:	3714      	adds	r7, #20
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	40010000 	.word	0x40010000
 8000d30:	40023800 	.word	0x40023800

08000d34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b088      	sub	sp, #32
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 030c 	add.w	r3, r7, #12
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a12      	ldr	r2, [pc, #72]	@ (8000d9c <HAL_TIM_MspPostInit+0x68>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d11e      	bne.n	8000d94 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	60bb      	str	r3, [r7, #8]
 8000d5a:	4b11      	ldr	r3, [pc, #68]	@ (8000da0 <HAL_TIM_MspPostInit+0x6c>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	4a10      	ldr	r2, [pc, #64]	@ (8000da0 <HAL_TIM_MspPostInit+0x6c>)
 8000d60:	f043 0310 	orr.w	r3, r3, #16
 8000d64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d66:	4b0e      	ldr	r3, [pc, #56]	@ (8000da0 <HAL_TIM_MspPostInit+0x6c>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	f003 0310 	and.w	r3, r3, #16
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d76:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d84:	2301      	movs	r3, #1
 8000d86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d88:	f107 030c 	add.w	r3, r7, #12
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4805      	ldr	r0, [pc, #20]	@ (8000da4 <HAL_TIM_MspPostInit+0x70>)
 8000d90:	f000 fdd6 	bl	8001940 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d94:	bf00      	nop
 8000d96:	3720      	adds	r7, #32
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40010000 	.word	0x40010000
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40021000 	.word	0x40021000

08000da8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08c      	sub	sp, #48	@ 0x30
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 031c 	add.w	r3, r7, #28
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a3a      	ldr	r2, [pc, #232]	@ (8000eb0 <HAL_UART_MspInit+0x108>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d135      	bne.n	8000e36 <HAL_UART_MspInit+0x8e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61bb      	str	r3, [r7, #24]
 8000dce:	4b39      	ldr	r3, [pc, #228]	@ (8000eb4 <HAL_UART_MspInit+0x10c>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd2:	4a38      	ldr	r2, [pc, #224]	@ (8000eb4 <HAL_UART_MspInit+0x10c>)
 8000dd4:	f043 0310 	orr.w	r3, r3, #16
 8000dd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dda:	4b36      	ldr	r3, [pc, #216]	@ (8000eb4 <HAL_UART_MspInit+0x10c>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dde:	f003 0310 	and.w	r3, r3, #16
 8000de2:	61bb      	str	r3, [r7, #24]
 8000de4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
 8000dea:	4b32      	ldr	r3, [pc, #200]	@ (8000eb4 <HAL_UART_MspInit+0x10c>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dee:	4a31      	ldr	r2, [pc, #196]	@ (8000eb4 <HAL_UART_MspInit+0x10c>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df6:	4b2f      	ldr	r3, [pc, #188]	@ (8000eb4 <HAL_UART_MspInit+0x10c>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	617b      	str	r3, [r7, #20]
 8000e00:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e02:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e10:	2303      	movs	r3, #3
 8000e12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e14:	2307      	movs	r3, #7
 8000e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e18:	f107 031c 	add.w	r3, r7, #28
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4826      	ldr	r0, [pc, #152]	@ (8000eb8 <HAL_UART_MspInit+0x110>)
 8000e20:	f000 fd8e 	bl	8001940 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8000e24:	2200      	movs	r2, #0
 8000e26:	2102      	movs	r1, #2
 8000e28:	2025      	movs	r0, #37	@ 0x25
 8000e2a:	f000 fccd 	bl	80017c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e2e:	2025      	movs	r0, #37	@ 0x25
 8000e30:	f000 fce6 	bl	8001800 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e34:	e038      	b.n	8000ea8 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a20      	ldr	r2, [pc, #128]	@ (8000ebc <HAL_UART_MspInit+0x114>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d133      	bne.n	8000ea8 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e40:	2300      	movs	r3, #0
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb4 <HAL_UART_MspInit+0x10c>)
 8000e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e48:	4a1a      	ldr	r2, [pc, #104]	@ (8000eb4 <HAL_UART_MspInit+0x10c>)
 8000e4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e50:	4b18      	ldr	r3, [pc, #96]	@ (8000eb4 <HAL_UART_MspInit+0x10c>)
 8000e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	4b14      	ldr	r3, [pc, #80]	@ (8000eb4 <HAL_UART_MspInit+0x10c>)
 8000e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e64:	4a13      	ldr	r2, [pc, #76]	@ (8000eb4 <HAL_UART_MspInit+0x10c>)
 8000e66:	f043 0301 	orr.w	r3, r3, #1
 8000e6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6c:	4b11      	ldr	r3, [pc, #68]	@ (8000eb4 <HAL_UART_MspInit+0x10c>)
 8000e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e70:	f003 0301 	and.w	r3, r3, #1
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e78:	230c      	movs	r3, #12
 8000e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e84:	2303      	movs	r3, #3
 8000e86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e88:	2307      	movs	r3, #7
 8000e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8c:	f107 031c 	add.w	r3, r7, #28
 8000e90:	4619      	mov	r1, r3
 8000e92:	4809      	ldr	r0, [pc, #36]	@ (8000eb8 <HAL_UART_MspInit+0x110>)
 8000e94:	f000 fd54 	bl	8001940 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2102      	movs	r1, #2
 8000e9c:	2026      	movs	r0, #38	@ 0x26
 8000e9e:	f000 fc93 	bl	80017c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ea2:	2026      	movs	r0, #38	@ 0x26
 8000ea4:	f000 fcac 	bl	8001800 <HAL_NVIC_EnableIRQ>
}
 8000ea8:	bf00      	nop
 8000eaa:	3730      	adds	r7, #48	@ 0x30
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40011000 	.word	0x40011000
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40020000 	.word	0x40020000
 8000ebc:	40004400 	.word	0x40004400

08000ec0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08e      	sub	sp, #56	@ 0x38
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	4b34      	ldr	r3, [pc, #208]	@ (8000fa8 <HAL_InitTick+0xe8>)
 8000ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed8:	4a33      	ldr	r2, [pc, #204]	@ (8000fa8 <HAL_InitTick+0xe8>)
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ee0:	4b31      	ldr	r3, [pc, #196]	@ (8000fa8 <HAL_InitTick+0xe8>)
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee4:	f003 0301 	and.w	r3, r3, #1
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000eec:	f107 0210 	add.w	r2, r7, #16
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	4611      	mov	r1, r2
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f001 fc42 	bl	8002780 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000efc:	6a3b      	ldr	r3, [r7, #32]
 8000efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d103      	bne.n	8000f0e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f06:	f001 fc13 	bl	8002730 <HAL_RCC_GetPCLK1Freq>
 8000f0a:	6378      	str	r0, [r7, #52]	@ 0x34
 8000f0c:	e004      	b.n	8000f18 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f0e:	f001 fc0f 	bl	8002730 <HAL_RCC_GetPCLK1Freq>
 8000f12:	4603      	mov	r3, r0
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f1a:	4a24      	ldr	r2, [pc, #144]	@ (8000fac <HAL_InitTick+0xec>)
 8000f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f20:	0c9b      	lsrs	r3, r3, #18
 8000f22:	3b01      	subs	r3, #1
 8000f24:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000f26:	4b22      	ldr	r3, [pc, #136]	@ (8000fb0 <HAL_InitTick+0xf0>)
 8000f28:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f2c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000f2e:	4b20      	ldr	r3, [pc, #128]	@ (8000fb0 <HAL_InitTick+0xf0>)
 8000f30:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f34:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000f36:	4a1e      	ldr	r2, [pc, #120]	@ (8000fb0 <HAL_InitTick+0xf0>)
 8000f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f3a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000f3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb0 <HAL_InitTick+0xf0>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f42:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb0 <HAL_InitTick+0xf0>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f48:	4b19      	ldr	r3, [pc, #100]	@ (8000fb0 <HAL_InitTick+0xf0>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000f4e:	4818      	ldr	r0, [pc, #96]	@ (8000fb0 <HAL_InitTick+0xf0>)
 8000f50:	f001 fcd1 	bl	80028f6 <HAL_TIM_Base_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000f5a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d11b      	bne.n	8000f9a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000f62:	4813      	ldr	r0, [pc, #76]	@ (8000fb0 <HAL_InitTick+0xf0>)
 8000f64:	f001 fd20 	bl	80029a8 <HAL_TIM_Base_Start_IT>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000f6e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d111      	bne.n	8000f9a <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f76:	201c      	movs	r0, #28
 8000f78:	f000 fc42 	bl	8001800 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2b0f      	cmp	r3, #15
 8000f80:	d808      	bhi.n	8000f94 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000f82:	2200      	movs	r2, #0
 8000f84:	6879      	ldr	r1, [r7, #4]
 8000f86:	201c      	movs	r0, #28
 8000f88:	f000 fc1e 	bl	80017c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f8c:	4a09      	ldr	r2, [pc, #36]	@ (8000fb4 <HAL_InitTick+0xf4>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6013      	str	r3, [r2, #0]
 8000f92:	e002      	b.n	8000f9a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f9a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3738      	adds	r7, #56	@ 0x38
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	431bde83 	.word	0x431bde83
 8000fb0:	20000258 	.word	0x20000258
 8000fb4:	20000004 	.word	0x20000004

08000fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <NMI_Handler+0x4>

08000fc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fd4:	4802      	ldr	r0, [pc, #8]	@ (8000fe0 <TIM2_IRQHandler+0x10>)
 8000fd6:	f001 fd98 	bl	8002b0a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000258 	.word	0x20000258

08000fe4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fe8:	4802      	ldr	r0, [pc, #8]	@ (8000ff4 <USART1_IRQHandler+0x10>)
 8000fea:	f002 fb4f 	bl	800368c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200001c8 	.word	0x200001c8

08000ff8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ffc:	4802      	ldr	r0, [pc, #8]	@ (8001008 <USART2_IRQHandler+0x10>)
 8000ffe:	f002 fb45 	bl	800368c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000210 	.word	0x20000210

0800100c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001014:	4a14      	ldr	r2, [pc, #80]	@ (8001068 <_sbrk+0x5c>)
 8001016:	4b15      	ldr	r3, [pc, #84]	@ (800106c <_sbrk+0x60>)
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001020:	4b13      	ldr	r3, [pc, #76]	@ (8001070 <_sbrk+0x64>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d102      	bne.n	800102e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001028:	4b11      	ldr	r3, [pc, #68]	@ (8001070 <_sbrk+0x64>)
 800102a:	4a12      	ldr	r2, [pc, #72]	@ (8001074 <_sbrk+0x68>)
 800102c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800102e:	4b10      	ldr	r3, [pc, #64]	@ (8001070 <_sbrk+0x64>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	429a      	cmp	r2, r3
 800103a:	d207      	bcs.n	800104c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800103c:	f006 fd0a 	bl	8007a54 <__errno>
 8001040:	4603      	mov	r3, r0
 8001042:	220c      	movs	r2, #12
 8001044:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001046:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800104a:	e009      	b.n	8001060 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800104c:	4b08      	ldr	r3, [pc, #32]	@ (8001070 <_sbrk+0x64>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001052:	4b07      	ldr	r3, [pc, #28]	@ (8001070 <_sbrk+0x64>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4413      	add	r3, r2
 800105a:	4a05      	ldr	r2, [pc, #20]	@ (8001070 <_sbrk+0x64>)
 800105c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800105e:	68fb      	ldr	r3, [r7, #12]
}
 8001060:	4618      	mov	r0, r3
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20020000 	.word	0x20020000
 800106c:	00000400 	.word	0x00000400
 8001070:	200002a0 	.word	0x200002a0
 8001074:	200172c0 	.word	0x200172c0

08001078 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800107c:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <SystemInit+0x20>)
 800107e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001082:	4a05      	ldr	r2, [pc, #20]	@ (8001098 <SystemInit+0x20>)
 8001084:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001088:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800109c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010a0:	f7ff ffea 	bl	8001078 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010a4:	480c      	ldr	r0, [pc, #48]	@ (80010d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010a6:	490d      	ldr	r1, [pc, #52]	@ (80010dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010a8:	4a0d      	ldr	r2, [pc, #52]	@ (80010e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010ac:	e002      	b.n	80010b4 <LoopCopyDataInit>

080010ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010b2:	3304      	adds	r3, #4

080010b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b8:	d3f9      	bcc.n	80010ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ba:	4a0a      	ldr	r2, [pc, #40]	@ (80010e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010bc:	4c0a      	ldr	r4, [pc, #40]	@ (80010e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c0:	e001      	b.n	80010c6 <LoopFillZerobss>

080010c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c4:	3204      	adds	r2, #4

080010c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c8:	d3fb      	bcc.n	80010c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ca:	f006 fcc9 	bl	8007a60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ce:	f7ff fa75 	bl	80005bc <main>
  bx  lr    
 80010d2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010dc:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80010e0:	08008444 	.word	0x08008444
  ldr r2, =_sbss
 80010e4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80010e8:	200172bc 	.word	0x200172bc

080010ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010ec:	e7fe      	b.n	80010ec <ADC_IRQHandler>
	...

080010f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001130 <HAL_Init+0x40>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001130 <HAL_Init+0x40>)
 80010fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001100:	4b0b      	ldr	r3, [pc, #44]	@ (8001130 <HAL_Init+0x40>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a0a      	ldr	r2, [pc, #40]	@ (8001130 <HAL_Init+0x40>)
 8001106:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800110a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800110c:	4b08      	ldr	r3, [pc, #32]	@ (8001130 <HAL_Init+0x40>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a07      	ldr	r2, [pc, #28]	@ (8001130 <HAL_Init+0x40>)
 8001112:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001116:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001118:	2003      	movs	r0, #3
 800111a:	f000 fb4a 	bl	80017b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800111e:	2001      	movs	r0, #1
 8001120:	f7ff fece 	bl	8000ec0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001124:	f7ff fcde 	bl	8000ae4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40023c00 	.word	0x40023c00

08001134 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001138:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <HAL_IncTick+0x20>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <HAL_IncTick+0x24>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4413      	add	r3, r2
 8001144:	4a04      	ldr	r2, [pc, #16]	@ (8001158 <HAL_IncTick+0x24>)
 8001146:	6013      	str	r3, [r2, #0]
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	20000008 	.word	0x20000008
 8001158:	200002a4 	.word	0x200002a4

0800115c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  return uwTick;
 8001160:	4b03      	ldr	r3, [pc, #12]	@ (8001170 <HAL_GetTick+0x14>)
 8001162:	681b      	ldr	r3, [r3, #0]
}
 8001164:	4618      	mov	r0, r3
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	200002a4 	.word	0x200002a4

08001174 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800117c:	2300      	movs	r3, #0
 800117e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d101      	bne.n	800118a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e033      	b.n	80011f2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118e:	2b00      	cmp	r3, #0
 8001190:	d109      	bne.n	80011a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff fcd8 	bl	8000b48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011aa:	f003 0310 	and.w	r3, r3, #16
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d118      	bne.n	80011e4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80011ba:	f023 0302 	bic.w	r3, r3, #2
 80011be:	f043 0202 	orr.w	r2, r3, #2
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f000 f94a 	bl	8001460 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d6:	f023 0303 	bic.w	r3, r3, #3
 80011da:	f043 0201 	orr.w	r2, r3, #1
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	641a      	str	r2, [r3, #64]	@ 0x40
 80011e2:	e001      	b.n	80011e8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2200      	movs	r2, #0
 80011ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001206:	2300      	movs	r3, #0
 8001208:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001210:	2b01      	cmp	r3, #1
 8001212:	d101      	bne.n	8001218 <HAL_ADC_ConfigChannel+0x1c>
 8001214:	2302      	movs	r3, #2
 8001216:	e113      	b.n	8001440 <HAL_ADC_ConfigChannel+0x244>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2201      	movs	r2, #1
 800121c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b09      	cmp	r3, #9
 8001226:	d925      	bls.n	8001274 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	68d9      	ldr	r1, [r3, #12]
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	b29b      	uxth	r3, r3
 8001234:	461a      	mov	r2, r3
 8001236:	4613      	mov	r3, r2
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	4413      	add	r3, r2
 800123c:	3b1e      	subs	r3, #30
 800123e:	2207      	movs	r2, #7
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	43da      	mvns	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	400a      	ands	r2, r1
 800124c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	68d9      	ldr	r1, [r3, #12]
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	b29b      	uxth	r3, r3
 800125e:	4618      	mov	r0, r3
 8001260:	4603      	mov	r3, r0
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	4403      	add	r3, r0
 8001266:	3b1e      	subs	r3, #30
 8001268:	409a      	lsls	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	430a      	orrs	r2, r1
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	e022      	b.n	80012ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	6919      	ldr	r1, [r3, #16]
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	b29b      	uxth	r3, r3
 8001280:	461a      	mov	r2, r3
 8001282:	4613      	mov	r3, r2
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	4413      	add	r3, r2
 8001288:	2207      	movs	r2, #7
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43da      	mvns	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	400a      	ands	r2, r1
 8001296:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	6919      	ldr	r1, [r3, #16]
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	689a      	ldr	r2, [r3, #8]
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	4618      	mov	r0, r3
 80012aa:	4603      	mov	r3, r0
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	4403      	add	r3, r0
 80012b0:	409a      	lsls	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	430a      	orrs	r2, r1
 80012b8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	2b06      	cmp	r3, #6
 80012c0:	d824      	bhi.n	800130c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685a      	ldr	r2, [r3, #4]
 80012cc:	4613      	mov	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4413      	add	r3, r2
 80012d2:	3b05      	subs	r3, #5
 80012d4:	221f      	movs	r2, #31
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43da      	mvns	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	400a      	ands	r2, r1
 80012e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	4618      	mov	r0, r3
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685a      	ldr	r2, [r3, #4]
 80012f6:	4613      	mov	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	4413      	add	r3, r2
 80012fc:	3b05      	subs	r3, #5
 80012fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	430a      	orrs	r2, r1
 8001308:	635a      	str	r2, [r3, #52]	@ 0x34
 800130a:	e04c      	b.n	80013a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	2b0c      	cmp	r3, #12
 8001312:	d824      	bhi.n	800135e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685a      	ldr	r2, [r3, #4]
 800131e:	4613      	mov	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	4413      	add	r3, r2
 8001324:	3b23      	subs	r3, #35	@ 0x23
 8001326:	221f      	movs	r2, #31
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	43da      	mvns	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	400a      	ands	r2, r1
 8001334:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	b29b      	uxth	r3, r3
 8001342:	4618      	mov	r0, r3
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685a      	ldr	r2, [r3, #4]
 8001348:	4613      	mov	r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	4413      	add	r3, r2
 800134e:	3b23      	subs	r3, #35	@ 0x23
 8001350:	fa00 f203 	lsl.w	r2, r0, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	430a      	orrs	r2, r1
 800135a:	631a      	str	r2, [r3, #48]	@ 0x30
 800135c:	e023      	b.n	80013a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	4613      	mov	r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	4413      	add	r3, r2
 800136e:	3b41      	subs	r3, #65	@ 0x41
 8001370:	221f      	movs	r2, #31
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43da      	mvns	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	400a      	ands	r2, r1
 800137e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	b29b      	uxth	r3, r3
 800138c:	4618      	mov	r0, r3
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685a      	ldr	r2, [r3, #4]
 8001392:	4613      	mov	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4413      	add	r3, r2
 8001398:	3b41      	subs	r3, #65	@ 0x41
 800139a:	fa00 f203 	lsl.w	r2, r0, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	430a      	orrs	r2, r1
 80013a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013a6:	4b29      	ldr	r3, [pc, #164]	@ (800144c <HAL_ADC_ConfigChannel+0x250>)
 80013a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a28      	ldr	r2, [pc, #160]	@ (8001450 <HAL_ADC_ConfigChannel+0x254>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d10f      	bne.n	80013d4 <HAL_ADC_ConfigChannel+0x1d8>
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b12      	cmp	r3, #18
 80013ba:	d10b      	bne.n	80013d4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001450 <HAL_ADC_ConfigChannel+0x254>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d12b      	bne.n	8001436 <HAL_ADC_ConfigChannel+0x23a>
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001454 <HAL_ADC_ConfigChannel+0x258>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d003      	beq.n	80013f0 <HAL_ADC_ConfigChannel+0x1f4>
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b11      	cmp	r3, #17
 80013ee:	d122      	bne.n	8001436 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a11      	ldr	r2, [pc, #68]	@ (8001454 <HAL_ADC_ConfigChannel+0x258>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d111      	bne.n	8001436 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001412:	4b11      	ldr	r3, [pc, #68]	@ (8001458 <HAL_ADC_ConfigChannel+0x25c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a11      	ldr	r2, [pc, #68]	@ (800145c <HAL_ADC_ConfigChannel+0x260>)
 8001418:	fba2 2303 	umull	r2, r3, r2, r3
 800141c:	0c9a      	lsrs	r2, r3, #18
 800141e:	4613      	mov	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	4413      	add	r3, r2
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001428:	e002      	b.n	8001430 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	3b01      	subs	r3, #1
 800142e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1f9      	bne.n	800142a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	40012300 	.word	0x40012300
 8001450:	40012000 	.word	0x40012000
 8001454:	10000012 	.word	0x10000012
 8001458:	20000000 	.word	0x20000000
 800145c:	431bde83 	.word	0x431bde83

08001460 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001468:	4b79      	ldr	r3, [pc, #484]	@ (8001650 <ADC_Init+0x1f0>)
 800146a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	431a      	orrs	r2, r3
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001494:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	6859      	ldr	r1, [r3, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	691b      	ldr	r3, [r3, #16]
 80014a0:	021a      	lsls	r2, r3, #8
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	430a      	orrs	r2, r1
 80014a8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	685a      	ldr	r2, [r3, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80014b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6859      	ldr	r1, [r3, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689a      	ldr	r2, [r3, #8]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	430a      	orrs	r2, r1
 80014ca:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	689a      	ldr	r2, [r3, #8]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80014da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6899      	ldr	r1, [r3, #8]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	68da      	ldr	r2, [r3, #12]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	430a      	orrs	r2, r1
 80014ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f2:	4a58      	ldr	r2, [pc, #352]	@ (8001654 <ADC_Init+0x1f4>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d022      	beq.n	800153e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	689a      	ldr	r2, [r3, #8]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001506:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6899      	ldr	r1, [r3, #8]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	430a      	orrs	r2, r1
 8001518:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	689a      	ldr	r2, [r3, #8]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001528:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	6899      	ldr	r1, [r3, #8]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	430a      	orrs	r2, r1
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	e00f      	b.n	800155e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	689a      	ldr	r2, [r3, #8]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800154c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	689a      	ldr	r2, [r3, #8]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800155c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	689a      	ldr	r2, [r3, #8]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f022 0202 	bic.w	r2, r2, #2
 800156c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6899      	ldr	r1, [r3, #8]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	7e1b      	ldrb	r3, [r3, #24]
 8001578:	005a      	lsls	r2, r3, #1
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	430a      	orrs	r2, r1
 8001580:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d01b      	beq.n	80015c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	685a      	ldr	r2, [r3, #4]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800159a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80015aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6859      	ldr	r1, [r3, #4]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015b6:	3b01      	subs	r3, #1
 80015b8:	035a      	lsls	r2, r3, #13
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	430a      	orrs	r2, r1
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	e007      	b.n	80015d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015d2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80015e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	051a      	lsls	r2, r3, #20
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	430a      	orrs	r2, r1
 80015f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001608:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6899      	ldr	r1, [r3, #8]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001616:	025a      	lsls	r2, r3, #9
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	430a      	orrs	r2, r1
 800161e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	689a      	ldr	r2, [r3, #8]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800162e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6899      	ldr	r1, [r3, #8]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	029a      	lsls	r2, r3, #10
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	430a      	orrs	r2, r1
 8001642:	609a      	str	r2, [r3, #8]
}
 8001644:	bf00      	nop
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	40012300 	.word	0x40012300
 8001654:	0f000001 	.word	0x0f000001

08001658 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001668:	4b0c      	ldr	r3, [pc, #48]	@ (800169c <__NVIC_SetPriorityGrouping+0x44>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800166e:	68ba      	ldr	r2, [r7, #8]
 8001670:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001674:	4013      	ands	r3, r2
 8001676:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001680:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001684:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001688:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800168a:	4a04      	ldr	r2, [pc, #16]	@ (800169c <__NVIC_SetPriorityGrouping+0x44>)
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	60d3      	str	r3, [r2, #12]
}
 8001690:	bf00      	nop
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016a4:	4b04      	ldr	r3, [pc, #16]	@ (80016b8 <__NVIC_GetPriorityGrouping+0x18>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	0a1b      	lsrs	r3, r3, #8
 80016aa:	f003 0307 	and.w	r3, r3, #7
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	db0b      	blt.n	80016e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	f003 021f 	and.w	r2, r3, #31
 80016d4:	4907      	ldr	r1, [pc, #28]	@ (80016f4 <__NVIC_EnableIRQ+0x38>)
 80016d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016da:	095b      	lsrs	r3, r3, #5
 80016dc:	2001      	movs	r0, #1
 80016de:	fa00 f202 	lsl.w	r2, r0, r2
 80016e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	e000e100 	.word	0xe000e100

080016f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	6039      	str	r1, [r7, #0]
 8001702:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001708:	2b00      	cmp	r3, #0
 800170a:	db0a      	blt.n	8001722 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	b2da      	uxtb	r2, r3
 8001710:	490c      	ldr	r1, [pc, #48]	@ (8001744 <__NVIC_SetPriority+0x4c>)
 8001712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001716:	0112      	lsls	r2, r2, #4
 8001718:	b2d2      	uxtb	r2, r2
 800171a:	440b      	add	r3, r1
 800171c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001720:	e00a      	b.n	8001738 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	b2da      	uxtb	r2, r3
 8001726:	4908      	ldr	r1, [pc, #32]	@ (8001748 <__NVIC_SetPriority+0x50>)
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	f003 030f 	and.w	r3, r3, #15
 800172e:	3b04      	subs	r3, #4
 8001730:	0112      	lsls	r2, r2, #4
 8001732:	b2d2      	uxtb	r2, r2
 8001734:	440b      	add	r3, r1
 8001736:	761a      	strb	r2, [r3, #24]
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	e000e100 	.word	0xe000e100
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800174c:	b480      	push	{r7}
 800174e:	b089      	sub	sp, #36	@ 0x24
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	f1c3 0307 	rsb	r3, r3, #7
 8001766:	2b04      	cmp	r3, #4
 8001768:	bf28      	it	cs
 800176a:	2304      	movcs	r3, #4
 800176c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	3304      	adds	r3, #4
 8001772:	2b06      	cmp	r3, #6
 8001774:	d902      	bls.n	800177c <NVIC_EncodePriority+0x30>
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	3b03      	subs	r3, #3
 800177a:	e000      	b.n	800177e <NVIC_EncodePriority+0x32>
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001780:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	43da      	mvns	r2, r3
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	401a      	ands	r2, r3
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001794:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	fa01 f303 	lsl.w	r3, r1, r3
 800179e:	43d9      	mvns	r1, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a4:	4313      	orrs	r3, r2
         );
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3724      	adds	r7, #36	@ 0x24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b082      	sub	sp, #8
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7ff ff4c 	bl	8001658 <__NVIC_SetPriorityGrouping>
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
 80017d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017d6:	2300      	movs	r3, #0
 80017d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017da:	f7ff ff61 	bl	80016a0 <__NVIC_GetPriorityGrouping>
 80017de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	68b9      	ldr	r1, [r7, #8]
 80017e4:	6978      	ldr	r0, [r7, #20]
 80017e6:	f7ff ffb1 	bl	800174c <NVIC_EncodePriority>
 80017ea:	4602      	mov	r2, r0
 80017ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017f0:	4611      	mov	r1, r2
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff ff80 	bl	80016f8 <__NVIC_SetPriority>
}
 80017f8:	bf00      	nop
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff ff54 	bl	80016bc <__NVIC_EnableIRQ>
}
 8001814:	bf00      	nop
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001828:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800182a:	f7ff fc97 	bl	800115c <HAL_GetTick>
 800182e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d008      	beq.n	800184e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2280      	movs	r2, #128	@ 0x80
 8001840:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e052      	b.n	80018f4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f022 0216 	bic.w	r2, r2, #22
 800185c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	695a      	ldr	r2, [r3, #20]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800186c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001872:	2b00      	cmp	r3, #0
 8001874:	d103      	bne.n	800187e <HAL_DMA_Abort+0x62>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800187a:	2b00      	cmp	r3, #0
 800187c:	d007      	beq.n	800188e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f022 0208 	bic.w	r2, r2, #8
 800188c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f022 0201 	bic.w	r2, r2, #1
 800189c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800189e:	e013      	b.n	80018c8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018a0:	f7ff fc5c 	bl	800115c <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b05      	cmp	r3, #5
 80018ac:	d90c      	bls.n	80018c8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2220      	movs	r2, #32
 80018b2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2203      	movs	r2, #3
 80018b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e015      	b.n	80018f4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1e4      	bne.n	80018a0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018da:	223f      	movs	r2, #63	@ 0x3f
 80018dc:	409a      	lsls	r2, r3
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2201      	movs	r2, #1
 80018e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800190a:	b2db      	uxtb	r3, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d004      	beq.n	800191a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2280      	movs	r2, #128	@ 0x80
 8001914:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e00c      	b.n	8001934 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2205      	movs	r2, #5
 800191e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f022 0201 	bic.w	r2, r2, #1
 8001930:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001940:	b480      	push	{r7}
 8001942:	b089      	sub	sp, #36	@ 0x24
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800194a:	2300      	movs	r3, #0
 800194c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800194e:	2300      	movs	r3, #0
 8001950:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001952:	2300      	movs	r3, #0
 8001954:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
 800195a:	e159      	b.n	8001c10 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800195c:	2201      	movs	r2, #1
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	697a      	ldr	r2, [r7, #20]
 800196c:	4013      	ands	r3, r2
 800196e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	429a      	cmp	r2, r3
 8001976:	f040 8148 	bne.w	8001c0a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f003 0303 	and.w	r3, r3, #3
 8001982:	2b01      	cmp	r3, #1
 8001984:	d005      	beq.n	8001992 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800198e:	2b02      	cmp	r3, #2
 8001990:	d130      	bne.n	80019f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	2203      	movs	r2, #3
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43db      	mvns	r3, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4013      	ands	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	68da      	ldr	r2, [r3, #12]
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019c8:	2201      	movs	r2, #1
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	43db      	mvns	r3, r3
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4013      	ands	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	091b      	lsrs	r3, r3, #4
 80019de:	f003 0201 	and.w	r2, r3, #1
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	2b03      	cmp	r3, #3
 80019fe:	d017      	beq.n	8001a30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	2203      	movs	r2, #3
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4013      	ands	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f003 0303 	and.w	r3, r3, #3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d123      	bne.n	8001a84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	08da      	lsrs	r2, r3, #3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3208      	adds	r2, #8
 8001a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	f003 0307 	and.w	r3, r3, #7
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	220f      	movs	r2, #15
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	691a      	ldr	r2, [r3, #16]
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	08da      	lsrs	r2, r3, #3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	3208      	adds	r2, #8
 8001a7e:	69b9      	ldr	r1, [r7, #24]
 8001a80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	2203      	movs	r2, #3
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 0203 	and.w	r2, r3, #3
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f000 80a2 	beq.w	8001c0a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	4b57      	ldr	r3, [pc, #348]	@ (8001c28 <HAL_GPIO_Init+0x2e8>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ace:	4a56      	ldr	r2, [pc, #344]	@ (8001c28 <HAL_GPIO_Init+0x2e8>)
 8001ad0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ad4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ad6:	4b54      	ldr	r3, [pc, #336]	@ (8001c28 <HAL_GPIO_Init+0x2e8>)
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ada:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ae2:	4a52      	ldr	r2, [pc, #328]	@ (8001c2c <HAL_GPIO_Init+0x2ec>)
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	089b      	lsrs	r3, r3, #2
 8001ae8:	3302      	adds	r3, #2
 8001aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	f003 0303 	and.w	r3, r3, #3
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	220f      	movs	r2, #15
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43db      	mvns	r3, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4013      	ands	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a49      	ldr	r2, [pc, #292]	@ (8001c30 <HAL_GPIO_Init+0x2f0>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d019      	beq.n	8001b42 <HAL_GPIO_Init+0x202>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a48      	ldr	r2, [pc, #288]	@ (8001c34 <HAL_GPIO_Init+0x2f4>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d013      	beq.n	8001b3e <HAL_GPIO_Init+0x1fe>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a47      	ldr	r2, [pc, #284]	@ (8001c38 <HAL_GPIO_Init+0x2f8>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d00d      	beq.n	8001b3a <HAL_GPIO_Init+0x1fa>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a46      	ldr	r2, [pc, #280]	@ (8001c3c <HAL_GPIO_Init+0x2fc>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d007      	beq.n	8001b36 <HAL_GPIO_Init+0x1f6>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a45      	ldr	r2, [pc, #276]	@ (8001c40 <HAL_GPIO_Init+0x300>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d101      	bne.n	8001b32 <HAL_GPIO_Init+0x1f2>
 8001b2e:	2304      	movs	r3, #4
 8001b30:	e008      	b.n	8001b44 <HAL_GPIO_Init+0x204>
 8001b32:	2307      	movs	r3, #7
 8001b34:	e006      	b.n	8001b44 <HAL_GPIO_Init+0x204>
 8001b36:	2303      	movs	r3, #3
 8001b38:	e004      	b.n	8001b44 <HAL_GPIO_Init+0x204>
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	e002      	b.n	8001b44 <HAL_GPIO_Init+0x204>
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e000      	b.n	8001b44 <HAL_GPIO_Init+0x204>
 8001b42:	2300      	movs	r3, #0
 8001b44:	69fa      	ldr	r2, [r7, #28]
 8001b46:	f002 0203 	and.w	r2, r2, #3
 8001b4a:	0092      	lsls	r2, r2, #2
 8001b4c:	4093      	lsls	r3, r2
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b54:	4935      	ldr	r1, [pc, #212]	@ (8001c2c <HAL_GPIO_Init+0x2ec>)
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	089b      	lsrs	r3, r3, #2
 8001b5a:	3302      	adds	r3, #2
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b62:	4b38      	ldr	r3, [pc, #224]	@ (8001c44 <HAL_GPIO_Init+0x304>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b86:	4a2f      	ldr	r2, [pc, #188]	@ (8001c44 <HAL_GPIO_Init+0x304>)
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b8c:	4b2d      	ldr	r3, [pc, #180]	@ (8001c44 <HAL_GPIO_Init+0x304>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	43db      	mvns	r3, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d003      	beq.n	8001bb0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bb0:	4a24      	ldr	r2, [pc, #144]	@ (8001c44 <HAL_GPIO_Init+0x304>)
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bb6:	4b23      	ldr	r3, [pc, #140]	@ (8001c44 <HAL_GPIO_Init+0x304>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d003      	beq.n	8001bda <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bda:	4a1a      	ldr	r2, [pc, #104]	@ (8001c44 <HAL_GPIO_Init+0x304>)
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001be0:	4b18      	ldr	r3, [pc, #96]	@ (8001c44 <HAL_GPIO_Init+0x304>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	43db      	mvns	r3, r3
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4013      	ands	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d003      	beq.n	8001c04 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c04:	4a0f      	ldr	r2, [pc, #60]	@ (8001c44 <HAL_GPIO_Init+0x304>)
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	61fb      	str	r3, [r7, #28]
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	2b0f      	cmp	r3, #15
 8001c14:	f67f aea2 	bls.w	800195c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c18:	bf00      	nop
 8001c1a:	bf00      	nop
 8001c1c:	3724      	adds	r7, #36	@ 0x24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40013800 	.word	0x40013800
 8001c30:	40020000 	.word	0x40020000
 8001c34:	40020400 	.word	0x40020400
 8001c38:	40020800 	.word	0x40020800
 8001c3c:	40020c00 	.word	0x40020c00
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40013c00 	.word	0x40013c00

08001c48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e12b      	b.n	8001eb2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d106      	bne.n	8001c74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7fe ffae 	bl	8000bd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2224      	movs	r2, #36	@ 0x24
 8001c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f022 0201 	bic.w	r2, r2, #1
 8001c8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001caa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001cac:	f000 fd40 	bl	8002730 <HAL_RCC_GetPCLK1Freq>
 8001cb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	4a81      	ldr	r2, [pc, #516]	@ (8001ebc <HAL_I2C_Init+0x274>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d807      	bhi.n	8001ccc <HAL_I2C_Init+0x84>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4a80      	ldr	r2, [pc, #512]	@ (8001ec0 <HAL_I2C_Init+0x278>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	bf94      	ite	ls
 8001cc4:	2301      	movls	r3, #1
 8001cc6:	2300      	movhi	r3, #0
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	e006      	b.n	8001cda <HAL_I2C_Init+0x92>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4a7d      	ldr	r2, [pc, #500]	@ (8001ec4 <HAL_I2C_Init+0x27c>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	bf94      	ite	ls
 8001cd4:	2301      	movls	r3, #1
 8001cd6:	2300      	movhi	r3, #0
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e0e7      	b.n	8001eb2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	4a78      	ldr	r2, [pc, #480]	@ (8001ec8 <HAL_I2C_Init+0x280>)
 8001ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cea:	0c9b      	lsrs	r3, r3, #18
 8001cec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68ba      	ldr	r2, [r7, #8]
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	4a6a      	ldr	r2, [pc, #424]	@ (8001ebc <HAL_I2C_Init+0x274>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d802      	bhi.n	8001d1c <HAL_I2C_Init+0xd4>
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	e009      	b.n	8001d30 <HAL_I2C_Init+0xe8>
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001d22:	fb02 f303 	mul.w	r3, r2, r3
 8001d26:	4a69      	ldr	r2, [pc, #420]	@ (8001ecc <HAL_I2C_Init+0x284>)
 8001d28:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2c:	099b      	lsrs	r3, r3, #6
 8001d2e:	3301      	adds	r3, #1
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	430b      	orrs	r3, r1
 8001d36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001d42:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	495c      	ldr	r1, [pc, #368]	@ (8001ebc <HAL_I2C_Init+0x274>)
 8001d4c:	428b      	cmp	r3, r1
 8001d4e:	d819      	bhi.n	8001d84 <HAL_I2C_Init+0x13c>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	1e59      	subs	r1, r3, #1
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d5e:	1c59      	adds	r1, r3, #1
 8001d60:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001d64:	400b      	ands	r3, r1
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d00a      	beq.n	8001d80 <HAL_I2C_Init+0x138>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	1e59      	subs	r1, r3, #1
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d78:	3301      	adds	r3, #1
 8001d7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d7e:	e051      	b.n	8001e24 <HAL_I2C_Init+0x1dc>
 8001d80:	2304      	movs	r3, #4
 8001d82:	e04f      	b.n	8001e24 <HAL_I2C_Init+0x1dc>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d111      	bne.n	8001db0 <HAL_I2C_Init+0x168>
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	1e58      	subs	r0, r3, #1
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6859      	ldr	r1, [r3, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	440b      	add	r3, r1
 8001d9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d9e:	3301      	adds	r3, #1
 8001da0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	bf0c      	ite	eq
 8001da8:	2301      	moveq	r3, #1
 8001daa:	2300      	movne	r3, #0
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	e012      	b.n	8001dd6 <HAL_I2C_Init+0x18e>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	1e58      	subs	r0, r3, #1
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6859      	ldr	r1, [r3, #4]
 8001db8:	460b      	mov	r3, r1
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	0099      	lsls	r1, r3, #2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	bf0c      	ite	eq
 8001dd0:	2301      	moveq	r3, #1
 8001dd2:	2300      	movne	r3, #0
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <HAL_I2C_Init+0x196>
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e022      	b.n	8001e24 <HAL_I2C_Init+0x1dc>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d10e      	bne.n	8001e04 <HAL_I2C_Init+0x1bc>
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	1e58      	subs	r0, r3, #1
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6859      	ldr	r1, [r3, #4]
 8001dee:	460b      	mov	r3, r1
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	440b      	add	r3, r1
 8001df4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001df8:	3301      	adds	r3, #1
 8001dfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e02:	e00f      	b.n	8001e24 <HAL_I2C_Init+0x1dc>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	1e58      	subs	r0, r3, #1
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6859      	ldr	r1, [r3, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	0099      	lsls	r1, r3, #2
 8001e14:	440b      	add	r3, r1
 8001e16:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e20:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	6809      	ldr	r1, [r1, #0]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69da      	ldr	r2, [r3, #28]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a1b      	ldr	r3, [r3, #32]
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001e52:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6911      	ldr	r1, [r2, #16]
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	68d2      	ldr	r2, [r2, #12]
 8001e5e:	4311      	orrs	r1, r2
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	6812      	ldr	r2, [r2, #0]
 8001e64:	430b      	orrs	r3, r1
 8001e66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	695a      	ldr	r2, [r3, #20]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	430a      	orrs	r2, r1
 8001e82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 0201 	orr.w	r2, r2, #1
 8001e92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2220      	movs	r2, #32
 8001e9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	000186a0 	.word	0x000186a0
 8001ec0:	001e847f 	.word	0x001e847f
 8001ec4:	003d08ff 	.word	0x003d08ff
 8001ec8:	431bde83 	.word	0x431bde83
 8001ecc:	10624dd3 	.word	0x10624dd3

08001ed0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e267      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d075      	beq.n	8001fda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001eee:	4b88      	ldr	r3, [pc, #544]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	d00c      	beq.n	8001f14 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001efa:	4b85      	ldr	r3, [pc, #532]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d112      	bne.n	8001f2c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f06:	4b82      	ldr	r3, [pc, #520]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f12:	d10b      	bne.n	8001f2c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f14:	4b7e      	ldr	r3, [pc, #504]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d05b      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x108>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d157      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e242      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f34:	d106      	bne.n	8001f44 <HAL_RCC_OscConfig+0x74>
 8001f36:	4b76      	ldr	r3, [pc, #472]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a75      	ldr	r2, [pc, #468]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 8001f3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	e01d      	b.n	8001f80 <HAL_RCC_OscConfig+0xb0>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f4c:	d10c      	bne.n	8001f68 <HAL_RCC_OscConfig+0x98>
 8001f4e:	4b70      	ldr	r3, [pc, #448]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a6f      	ldr	r2, [pc, #444]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 8001f54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	4b6d      	ldr	r3, [pc, #436]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a6c      	ldr	r2, [pc, #432]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 8001f60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	e00b      	b.n	8001f80 <HAL_RCC_OscConfig+0xb0>
 8001f68:	4b69      	ldr	r3, [pc, #420]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a68      	ldr	r2, [pc, #416]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 8001f6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f72:	6013      	str	r3, [r2, #0]
 8001f74:	4b66      	ldr	r3, [pc, #408]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a65      	ldr	r2, [pc, #404]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 8001f7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d013      	beq.n	8001fb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f88:	f7ff f8e8 	bl	800115c <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f90:	f7ff f8e4 	bl	800115c <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b64      	cmp	r3, #100	@ 0x64
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e207      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fa2:	4b5b      	ldr	r3, [pc, #364]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d0f0      	beq.n	8001f90 <HAL_RCC_OscConfig+0xc0>
 8001fae:	e014      	b.n	8001fda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb0:	f7ff f8d4 	bl	800115c <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fb8:	f7ff f8d0 	bl	800115c <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b64      	cmp	r3, #100	@ 0x64
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e1f3      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fca:	4b51      	ldr	r3, [pc, #324]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0xe8>
 8001fd6:	e000      	b.n	8001fda <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d063      	beq.n	80020ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001fe6:	4b4a      	ldr	r3, [pc, #296]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 030c 	and.w	r3, r3, #12
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00b      	beq.n	800200a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ff2:	4b47      	ldr	r3, [pc, #284]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001ffa:	2b08      	cmp	r3, #8
 8001ffc:	d11c      	bne.n	8002038 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ffe:	4b44      	ldr	r3, [pc, #272]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d116      	bne.n	8002038 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800200a:	4b41      	ldr	r3, [pc, #260]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d005      	beq.n	8002022 <HAL_RCC_OscConfig+0x152>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d001      	beq.n	8002022 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e1c7      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002022:	4b3b      	ldr	r3, [pc, #236]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	4937      	ldr	r1, [pc, #220]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 8002032:	4313      	orrs	r3, r2
 8002034:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002036:	e03a      	b.n	80020ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d020      	beq.n	8002082 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002040:	4b34      	ldr	r3, [pc, #208]	@ (8002114 <HAL_RCC_OscConfig+0x244>)
 8002042:	2201      	movs	r2, #1
 8002044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002046:	f7ff f889 	bl	800115c <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800204e:	f7ff f885 	bl	800115c <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e1a8      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002060:	4b2b      	ldr	r3, [pc, #172]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0f0      	beq.n	800204e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800206c:	4b28      	ldr	r3, [pc, #160]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	4925      	ldr	r1, [pc, #148]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 800207c:	4313      	orrs	r3, r2
 800207e:	600b      	str	r3, [r1, #0]
 8002080:	e015      	b.n	80020ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002082:	4b24      	ldr	r3, [pc, #144]	@ (8002114 <HAL_RCC_OscConfig+0x244>)
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002088:	f7ff f868 	bl	800115c <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002090:	f7ff f864 	bl	800115c <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e187      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f0      	bne.n	8002090 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d036      	beq.n	8002128 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d016      	beq.n	80020f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020c2:	4b15      	ldr	r3, [pc, #84]	@ (8002118 <HAL_RCC_OscConfig+0x248>)
 80020c4:	2201      	movs	r2, #1
 80020c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c8:	f7ff f848 	bl	800115c <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020d0:	f7ff f844 	bl	800115c <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e167      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002110 <HAL_RCC_OscConfig+0x240>)
 80020e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d0f0      	beq.n	80020d0 <HAL_RCC_OscConfig+0x200>
 80020ee:	e01b      	b.n	8002128 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020f0:	4b09      	ldr	r3, [pc, #36]	@ (8002118 <HAL_RCC_OscConfig+0x248>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f6:	f7ff f831 	bl	800115c <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020fc:	e00e      	b.n	800211c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020fe:	f7ff f82d 	bl	800115c <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d907      	bls.n	800211c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e150      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
 8002110:	40023800 	.word	0x40023800
 8002114:	42470000 	.word	0x42470000
 8002118:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800211c:	4b88      	ldr	r3, [pc, #544]	@ (8002340 <HAL_RCC_OscConfig+0x470>)
 800211e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1ea      	bne.n	80020fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	2b00      	cmp	r3, #0
 8002132:	f000 8097 	beq.w	8002264 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002136:	2300      	movs	r3, #0
 8002138:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800213a:	4b81      	ldr	r3, [pc, #516]	@ (8002340 <HAL_RCC_OscConfig+0x470>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d10f      	bne.n	8002166 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	4b7d      	ldr	r3, [pc, #500]	@ (8002340 <HAL_RCC_OscConfig+0x470>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214e:	4a7c      	ldr	r2, [pc, #496]	@ (8002340 <HAL_RCC_OscConfig+0x470>)
 8002150:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002154:	6413      	str	r3, [r2, #64]	@ 0x40
 8002156:	4b7a      	ldr	r3, [pc, #488]	@ (8002340 <HAL_RCC_OscConfig+0x470>)
 8002158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800215e:	60bb      	str	r3, [r7, #8]
 8002160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002162:	2301      	movs	r3, #1
 8002164:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002166:	4b77      	ldr	r3, [pc, #476]	@ (8002344 <HAL_RCC_OscConfig+0x474>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800216e:	2b00      	cmp	r3, #0
 8002170:	d118      	bne.n	80021a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002172:	4b74      	ldr	r3, [pc, #464]	@ (8002344 <HAL_RCC_OscConfig+0x474>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a73      	ldr	r2, [pc, #460]	@ (8002344 <HAL_RCC_OscConfig+0x474>)
 8002178:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800217c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800217e:	f7fe ffed 	bl	800115c <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002184:	e008      	b.n	8002198 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002186:	f7fe ffe9 	bl	800115c <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e10c      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002198:	4b6a      	ldr	r3, [pc, #424]	@ (8002344 <HAL_RCC_OscConfig+0x474>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0f0      	beq.n	8002186 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d106      	bne.n	80021ba <HAL_RCC_OscConfig+0x2ea>
 80021ac:	4b64      	ldr	r3, [pc, #400]	@ (8002340 <HAL_RCC_OscConfig+0x470>)
 80021ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021b0:	4a63      	ldr	r2, [pc, #396]	@ (8002340 <HAL_RCC_OscConfig+0x470>)
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80021b8:	e01c      	b.n	80021f4 <HAL_RCC_OscConfig+0x324>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	2b05      	cmp	r3, #5
 80021c0:	d10c      	bne.n	80021dc <HAL_RCC_OscConfig+0x30c>
 80021c2:	4b5f      	ldr	r3, [pc, #380]	@ (8002340 <HAL_RCC_OscConfig+0x470>)
 80021c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021c6:	4a5e      	ldr	r2, [pc, #376]	@ (8002340 <HAL_RCC_OscConfig+0x470>)
 80021c8:	f043 0304 	orr.w	r3, r3, #4
 80021cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80021ce:	4b5c      	ldr	r3, [pc, #368]	@ (8002340 <HAL_RCC_OscConfig+0x470>)
 80021d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021d2:	4a5b      	ldr	r2, [pc, #364]	@ (8002340 <HAL_RCC_OscConfig+0x470>)
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80021da:	e00b      	b.n	80021f4 <HAL_RCC_OscConfig+0x324>
 80021dc:	4b58      	ldr	r3, [pc, #352]	@ (8002340 <HAL_RCC_OscConfig+0x470>)
 80021de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021e0:	4a57      	ldr	r2, [pc, #348]	@ (8002340 <HAL_RCC_OscConfig+0x470>)
 80021e2:	f023 0301 	bic.w	r3, r3, #1
 80021e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80021e8:	4b55      	ldr	r3, [pc, #340]	@ (8002340 <HAL_RCC_OscConfig+0x470>)
 80021ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ec:	4a54      	ldr	r2, [pc, #336]	@ (8002340 <HAL_RCC_OscConfig+0x470>)
 80021ee:	f023 0304 	bic.w	r3, r3, #4
 80021f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d015      	beq.n	8002228 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021fc:	f7fe ffae 	bl	800115c <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002202:	e00a      	b.n	800221a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002204:	f7fe ffaa 	bl	800115c <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002212:	4293      	cmp	r3, r2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e0cb      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800221a:	4b49      	ldr	r3, [pc, #292]	@ (8002340 <HAL_RCC_OscConfig+0x470>)
 800221c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0ee      	beq.n	8002204 <HAL_RCC_OscConfig+0x334>
 8002226:	e014      	b.n	8002252 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002228:	f7fe ff98 	bl	800115c <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800222e:	e00a      	b.n	8002246 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002230:	f7fe ff94 	bl	800115c <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800223e:	4293      	cmp	r3, r2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e0b5      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002246:	4b3e      	ldr	r3, [pc, #248]	@ (8002340 <HAL_RCC_OscConfig+0x470>)
 8002248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1ee      	bne.n	8002230 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002252:	7dfb      	ldrb	r3, [r7, #23]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d105      	bne.n	8002264 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002258:	4b39      	ldr	r3, [pc, #228]	@ (8002340 <HAL_RCC_OscConfig+0x470>)
 800225a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225c:	4a38      	ldr	r2, [pc, #224]	@ (8002340 <HAL_RCC_OscConfig+0x470>)
 800225e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002262:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 80a1 	beq.w	80023b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800226e:	4b34      	ldr	r3, [pc, #208]	@ (8002340 <HAL_RCC_OscConfig+0x470>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f003 030c 	and.w	r3, r3, #12
 8002276:	2b08      	cmp	r3, #8
 8002278:	d05c      	beq.n	8002334 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	2b02      	cmp	r3, #2
 8002280:	d141      	bne.n	8002306 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002282:	4b31      	ldr	r3, [pc, #196]	@ (8002348 <HAL_RCC_OscConfig+0x478>)
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002288:	f7fe ff68 	bl	800115c <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002290:	f7fe ff64 	bl	800115c <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e087      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a2:	4b27      	ldr	r3, [pc, #156]	@ (8002340 <HAL_RCC_OscConfig+0x470>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f0      	bne.n	8002290 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	69da      	ldr	r2, [r3, #28]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	431a      	orrs	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022bc:	019b      	lsls	r3, r3, #6
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022c4:	085b      	lsrs	r3, r3, #1
 80022c6:	3b01      	subs	r3, #1
 80022c8:	041b      	lsls	r3, r3, #16
 80022ca:	431a      	orrs	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d0:	061b      	lsls	r3, r3, #24
 80022d2:	491b      	ldr	r1, [pc, #108]	@ (8002340 <HAL_RCC_OscConfig+0x470>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002348 <HAL_RCC_OscConfig+0x478>)
 80022da:	2201      	movs	r2, #1
 80022dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022de:	f7fe ff3d 	bl	800115c <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e6:	f7fe ff39 	bl	800115c <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e05c      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022f8:	4b11      	ldr	r3, [pc, #68]	@ (8002340 <HAL_RCC_OscConfig+0x470>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0f0      	beq.n	80022e6 <HAL_RCC_OscConfig+0x416>
 8002304:	e054      	b.n	80023b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002306:	4b10      	ldr	r3, [pc, #64]	@ (8002348 <HAL_RCC_OscConfig+0x478>)
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230c:	f7fe ff26 	bl	800115c <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002314:	f7fe ff22 	bl	800115c <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e045      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002326:	4b06      	ldr	r3, [pc, #24]	@ (8002340 <HAL_RCC_OscConfig+0x470>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f0      	bne.n	8002314 <HAL_RCC_OscConfig+0x444>
 8002332:	e03d      	b.n	80023b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d107      	bne.n	800234c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e038      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
 8002340:	40023800 	.word	0x40023800
 8002344:	40007000 	.word	0x40007000
 8002348:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800234c:	4b1b      	ldr	r3, [pc, #108]	@ (80023bc <HAL_RCC_OscConfig+0x4ec>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d028      	beq.n	80023ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002364:	429a      	cmp	r2, r3
 8002366:	d121      	bne.n	80023ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002372:	429a      	cmp	r2, r3
 8002374:	d11a      	bne.n	80023ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800237c:	4013      	ands	r3, r2
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002382:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002384:	4293      	cmp	r3, r2
 8002386:	d111      	bne.n	80023ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002392:	085b      	lsrs	r3, r3, #1
 8002394:	3b01      	subs	r3, #1
 8002396:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002398:	429a      	cmp	r2, r3
 800239a:	d107      	bne.n	80023ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d001      	beq.n	80023b0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e000      	b.n	80023b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3718      	adds	r7, #24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40023800 	.word	0x40023800

080023c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e0cc      	b.n	800256e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023d4:	4b68      	ldr	r3, [pc, #416]	@ (8002578 <HAL_RCC_ClockConfig+0x1b8>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d90c      	bls.n	80023fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e2:	4b65      	ldr	r3, [pc, #404]	@ (8002578 <HAL_RCC_ClockConfig+0x1b8>)
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ea:	4b63      	ldr	r3, [pc, #396]	@ (8002578 <HAL_RCC_ClockConfig+0x1b8>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d001      	beq.n	80023fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e0b8      	b.n	800256e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d020      	beq.n	800244a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b00      	cmp	r3, #0
 8002412:	d005      	beq.n	8002420 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002414:	4b59      	ldr	r3, [pc, #356]	@ (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	4a58      	ldr	r2, [pc, #352]	@ (800257c <HAL_RCC_ClockConfig+0x1bc>)
 800241a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800241e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0308 	and.w	r3, r3, #8
 8002428:	2b00      	cmp	r3, #0
 800242a:	d005      	beq.n	8002438 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800242c:	4b53      	ldr	r3, [pc, #332]	@ (800257c <HAL_RCC_ClockConfig+0x1bc>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	4a52      	ldr	r2, [pc, #328]	@ (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002432:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002436:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002438:	4b50      	ldr	r3, [pc, #320]	@ (800257c <HAL_RCC_ClockConfig+0x1bc>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	494d      	ldr	r1, [pc, #308]	@ (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002446:	4313      	orrs	r3, r2
 8002448:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d044      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d107      	bne.n	800246e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245e:	4b47      	ldr	r3, [pc, #284]	@ (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d119      	bne.n	800249e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e07f      	b.n	800256e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b02      	cmp	r3, #2
 8002474:	d003      	beq.n	800247e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800247a:	2b03      	cmp	r3, #3
 800247c:	d107      	bne.n	800248e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800247e:	4b3f      	ldr	r3, [pc, #252]	@ (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d109      	bne.n	800249e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e06f      	b.n	800256e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800248e:	4b3b      	ldr	r3, [pc, #236]	@ (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e067      	b.n	800256e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800249e:	4b37      	ldr	r3, [pc, #220]	@ (800257c <HAL_RCC_ClockConfig+0x1bc>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f023 0203 	bic.w	r2, r3, #3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	4934      	ldr	r1, [pc, #208]	@ (800257c <HAL_RCC_ClockConfig+0x1bc>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024b0:	f7fe fe54 	bl	800115c <HAL_GetTick>
 80024b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b6:	e00a      	b.n	80024ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b8:	f7fe fe50 	bl	800115c <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e04f      	b.n	800256e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ce:	4b2b      	ldr	r3, [pc, #172]	@ (800257c <HAL_RCC_ClockConfig+0x1bc>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 020c 	and.w	r2, r3, #12
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	429a      	cmp	r2, r3
 80024de:	d1eb      	bne.n	80024b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024e0:	4b25      	ldr	r3, [pc, #148]	@ (8002578 <HAL_RCC_ClockConfig+0x1b8>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d20c      	bcs.n	8002508 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ee:	4b22      	ldr	r3, [pc, #136]	@ (8002578 <HAL_RCC_ClockConfig+0x1b8>)
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f6:	4b20      	ldr	r3, [pc, #128]	@ (8002578 <HAL_RCC_ClockConfig+0x1b8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	429a      	cmp	r2, r3
 8002502:	d001      	beq.n	8002508 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e032      	b.n	800256e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b00      	cmp	r3, #0
 8002512:	d008      	beq.n	8002526 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002514:	4b19      	ldr	r3, [pc, #100]	@ (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	4916      	ldr	r1, [pc, #88]	@ (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002522:	4313      	orrs	r3, r2
 8002524:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0308 	and.w	r3, r3, #8
 800252e:	2b00      	cmp	r3, #0
 8002530:	d009      	beq.n	8002546 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002532:	4b12      	ldr	r3, [pc, #72]	@ (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	490e      	ldr	r1, [pc, #56]	@ (800257c <HAL_RCC_ClockConfig+0x1bc>)
 8002542:	4313      	orrs	r3, r2
 8002544:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002546:	f000 f821 	bl	800258c <HAL_RCC_GetSysClockFreq>
 800254a:	4602      	mov	r2, r0
 800254c:	4b0b      	ldr	r3, [pc, #44]	@ (800257c <HAL_RCC_ClockConfig+0x1bc>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	091b      	lsrs	r3, r3, #4
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	490a      	ldr	r1, [pc, #40]	@ (8002580 <HAL_RCC_ClockConfig+0x1c0>)
 8002558:	5ccb      	ldrb	r3, [r1, r3]
 800255a:	fa22 f303 	lsr.w	r3, r2, r3
 800255e:	4a09      	ldr	r2, [pc, #36]	@ (8002584 <HAL_RCC_ClockConfig+0x1c4>)
 8002560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002562:	4b09      	ldr	r3, [pc, #36]	@ (8002588 <HAL_RCC_ClockConfig+0x1c8>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f7fe fcaa 	bl	8000ec0 <HAL_InitTick>

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40023c00 	.word	0x40023c00
 800257c:	40023800 	.word	0x40023800
 8002580:	080083e8 	.word	0x080083e8
 8002584:	20000000 	.word	0x20000000
 8002588:	20000004 	.word	0x20000004

0800258c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800258c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002590:	b090      	sub	sp, #64	@ 0x40
 8002592:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002594:	2300      	movs	r3, #0
 8002596:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002598:	2300      	movs	r3, #0
 800259a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800259c:	2300      	movs	r3, #0
 800259e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80025a0:	2300      	movs	r3, #0
 80025a2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025a4:	4b59      	ldr	r3, [pc, #356]	@ (800270c <HAL_RCC_GetSysClockFreq+0x180>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f003 030c 	and.w	r3, r3, #12
 80025ac:	2b08      	cmp	r3, #8
 80025ae:	d00d      	beq.n	80025cc <HAL_RCC_GetSysClockFreq+0x40>
 80025b0:	2b08      	cmp	r3, #8
 80025b2:	f200 80a1 	bhi.w	80026f8 <HAL_RCC_GetSysClockFreq+0x16c>
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d002      	beq.n	80025c0 <HAL_RCC_GetSysClockFreq+0x34>
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	d003      	beq.n	80025c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80025be:	e09b      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025c0:	4b53      	ldr	r3, [pc, #332]	@ (8002710 <HAL_RCC_GetSysClockFreq+0x184>)
 80025c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80025c4:	e09b      	b.n	80026fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025c6:	4b53      	ldr	r3, [pc, #332]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x188>)
 80025c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80025ca:	e098      	b.n	80026fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025cc:	4b4f      	ldr	r3, [pc, #316]	@ (800270c <HAL_RCC_GetSysClockFreq+0x180>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025d4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025d6:	4b4d      	ldr	r3, [pc, #308]	@ (800270c <HAL_RCC_GetSysClockFreq+0x180>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d028      	beq.n	8002634 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025e2:	4b4a      	ldr	r3, [pc, #296]	@ (800270c <HAL_RCC_GetSysClockFreq+0x180>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	099b      	lsrs	r3, r3, #6
 80025e8:	2200      	movs	r2, #0
 80025ea:	623b      	str	r3, [r7, #32]
 80025ec:	627a      	str	r2, [r7, #36]	@ 0x24
 80025ee:	6a3b      	ldr	r3, [r7, #32]
 80025f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80025f4:	2100      	movs	r1, #0
 80025f6:	4b47      	ldr	r3, [pc, #284]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x188>)
 80025f8:	fb03 f201 	mul.w	r2, r3, r1
 80025fc:	2300      	movs	r3, #0
 80025fe:	fb00 f303 	mul.w	r3, r0, r3
 8002602:	4413      	add	r3, r2
 8002604:	4a43      	ldr	r2, [pc, #268]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x188>)
 8002606:	fba0 1202 	umull	r1, r2, r0, r2
 800260a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800260c:	460a      	mov	r2, r1
 800260e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002610:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002612:	4413      	add	r3, r2
 8002614:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002618:	2200      	movs	r2, #0
 800261a:	61bb      	str	r3, [r7, #24]
 800261c:	61fa      	str	r2, [r7, #28]
 800261e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002622:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002626:	f7fd fe33 	bl	8000290 <__aeabi_uldivmod>
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	4613      	mov	r3, r2
 8002630:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002632:	e053      	b.n	80026dc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002634:	4b35      	ldr	r3, [pc, #212]	@ (800270c <HAL_RCC_GetSysClockFreq+0x180>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	099b      	lsrs	r3, r3, #6
 800263a:	2200      	movs	r2, #0
 800263c:	613b      	str	r3, [r7, #16]
 800263e:	617a      	str	r2, [r7, #20]
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002646:	f04f 0b00 	mov.w	fp, #0
 800264a:	4652      	mov	r2, sl
 800264c:	465b      	mov	r3, fp
 800264e:	f04f 0000 	mov.w	r0, #0
 8002652:	f04f 0100 	mov.w	r1, #0
 8002656:	0159      	lsls	r1, r3, #5
 8002658:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800265c:	0150      	lsls	r0, r2, #5
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	ebb2 080a 	subs.w	r8, r2, sl
 8002666:	eb63 090b 	sbc.w	r9, r3, fp
 800266a:	f04f 0200 	mov.w	r2, #0
 800266e:	f04f 0300 	mov.w	r3, #0
 8002672:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002676:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800267a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800267e:	ebb2 0408 	subs.w	r4, r2, r8
 8002682:	eb63 0509 	sbc.w	r5, r3, r9
 8002686:	f04f 0200 	mov.w	r2, #0
 800268a:	f04f 0300 	mov.w	r3, #0
 800268e:	00eb      	lsls	r3, r5, #3
 8002690:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002694:	00e2      	lsls	r2, r4, #3
 8002696:	4614      	mov	r4, r2
 8002698:	461d      	mov	r5, r3
 800269a:	eb14 030a 	adds.w	r3, r4, sl
 800269e:	603b      	str	r3, [r7, #0]
 80026a0:	eb45 030b 	adc.w	r3, r5, fp
 80026a4:	607b      	str	r3, [r7, #4]
 80026a6:	f04f 0200 	mov.w	r2, #0
 80026aa:	f04f 0300 	mov.w	r3, #0
 80026ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026b2:	4629      	mov	r1, r5
 80026b4:	028b      	lsls	r3, r1, #10
 80026b6:	4621      	mov	r1, r4
 80026b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026bc:	4621      	mov	r1, r4
 80026be:	028a      	lsls	r2, r1, #10
 80026c0:	4610      	mov	r0, r2
 80026c2:	4619      	mov	r1, r3
 80026c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026c6:	2200      	movs	r2, #0
 80026c8:	60bb      	str	r3, [r7, #8]
 80026ca:	60fa      	str	r2, [r7, #12]
 80026cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026d0:	f7fd fdde 	bl	8000290 <__aeabi_uldivmod>
 80026d4:	4602      	mov	r2, r0
 80026d6:	460b      	mov	r3, r1
 80026d8:	4613      	mov	r3, r2
 80026da:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80026dc:	4b0b      	ldr	r3, [pc, #44]	@ (800270c <HAL_RCC_GetSysClockFreq+0x180>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	0c1b      	lsrs	r3, r3, #16
 80026e2:	f003 0303 	and.w	r3, r3, #3
 80026e6:	3301      	adds	r3, #1
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80026ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80026ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80026f6:	e002      	b.n	80026fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026f8:	4b05      	ldr	r3, [pc, #20]	@ (8002710 <HAL_RCC_GetSysClockFreq+0x184>)
 80026fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80026fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002700:	4618      	mov	r0, r3
 8002702:	3740      	adds	r7, #64	@ 0x40
 8002704:	46bd      	mov	sp, r7
 8002706:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800270a:	bf00      	nop
 800270c:	40023800 	.word	0x40023800
 8002710:	00f42400 	.word	0x00f42400
 8002714:	017d7840 	.word	0x017d7840

08002718 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800271c:	4b03      	ldr	r3, [pc, #12]	@ (800272c <HAL_RCC_GetHCLKFreq+0x14>)
 800271e:	681b      	ldr	r3, [r3, #0]
}
 8002720:	4618      	mov	r0, r3
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	20000000 	.word	0x20000000

08002730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002734:	f7ff fff0 	bl	8002718 <HAL_RCC_GetHCLKFreq>
 8002738:	4602      	mov	r2, r0
 800273a:	4b05      	ldr	r3, [pc, #20]	@ (8002750 <HAL_RCC_GetPCLK1Freq+0x20>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	0a9b      	lsrs	r3, r3, #10
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	4903      	ldr	r1, [pc, #12]	@ (8002754 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002746:	5ccb      	ldrb	r3, [r1, r3]
 8002748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800274c:	4618      	mov	r0, r3
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40023800 	.word	0x40023800
 8002754:	080083f8 	.word	0x080083f8

08002758 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800275c:	f7ff ffdc 	bl	8002718 <HAL_RCC_GetHCLKFreq>
 8002760:	4602      	mov	r2, r0
 8002762:	4b05      	ldr	r3, [pc, #20]	@ (8002778 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	0b5b      	lsrs	r3, r3, #13
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	4903      	ldr	r1, [pc, #12]	@ (800277c <HAL_RCC_GetPCLK2Freq+0x24>)
 800276e:	5ccb      	ldrb	r3, [r1, r3]
 8002770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002774:	4618      	mov	r0, r3
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40023800 	.word	0x40023800
 800277c:	080083f8 	.word	0x080083f8

08002780 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	220f      	movs	r2, #15
 800278e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002790:	4b12      	ldr	r3, [pc, #72]	@ (80027dc <HAL_RCC_GetClockConfig+0x5c>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 0203 	and.w	r2, r3, #3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800279c:	4b0f      	ldr	r3, [pc, #60]	@ (80027dc <HAL_RCC_GetClockConfig+0x5c>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80027a8:	4b0c      	ldr	r3, [pc, #48]	@ (80027dc <HAL_RCC_GetClockConfig+0x5c>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80027b4:	4b09      	ldr	r3, [pc, #36]	@ (80027dc <HAL_RCC_GetClockConfig+0x5c>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	08db      	lsrs	r3, r3, #3
 80027ba:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80027c2:	4b07      	ldr	r3, [pc, #28]	@ (80027e0 <HAL_RCC_GetClockConfig+0x60>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0207 	and.w	r2, r3, #7
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	601a      	str	r2, [r3, #0]
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	40023800 	.word	0x40023800
 80027e0:	40023c00 	.word	0x40023c00

080027e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e07b      	b.n	80028ee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d108      	bne.n	8002810 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002806:	d009      	beq.n	800281c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	61da      	str	r2, [r3, #28]
 800280e:	e005      	b.n	800281c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d106      	bne.n	800283c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7fe fa12 	bl	8000c60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2202      	movs	r2, #2
 8002840:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002852:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002864:	431a      	orrs	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800286e:	431a      	orrs	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	431a      	orrs	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800288c:	431a      	orrs	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002896:	431a      	orrs	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028a0:	ea42 0103 	orr.w	r1, r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	0c1b      	lsrs	r3, r3, #16
 80028ba:	f003 0104 	and.w	r1, r3, #4
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c2:	f003 0210 	and.w	r2, r3, #16
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	69da      	ldr	r2, [r3, #28]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e041      	b.n	800298c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	d106      	bne.n	8002922 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 f839 	bl	8002994 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2202      	movs	r2, #2
 8002926:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	3304      	adds	r3, #4
 8002932:	4619      	mov	r1, r3
 8002934:	4610      	mov	r0, r2
 8002936:	f000 fac3 	bl	8002ec0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d001      	beq.n	80029c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e044      	b.n	8002a4a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2202      	movs	r2, #2
 80029c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68da      	ldr	r2, [r3, #12]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f042 0201 	orr.w	r2, r2, #1
 80029d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a1e      	ldr	r2, [pc, #120]	@ (8002a58 <HAL_TIM_Base_Start_IT+0xb0>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d018      	beq.n	8002a14 <HAL_TIM_Base_Start_IT+0x6c>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029ea:	d013      	beq.n	8002a14 <HAL_TIM_Base_Start_IT+0x6c>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a1a      	ldr	r2, [pc, #104]	@ (8002a5c <HAL_TIM_Base_Start_IT+0xb4>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d00e      	beq.n	8002a14 <HAL_TIM_Base_Start_IT+0x6c>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a19      	ldr	r2, [pc, #100]	@ (8002a60 <HAL_TIM_Base_Start_IT+0xb8>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d009      	beq.n	8002a14 <HAL_TIM_Base_Start_IT+0x6c>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a17      	ldr	r2, [pc, #92]	@ (8002a64 <HAL_TIM_Base_Start_IT+0xbc>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d004      	beq.n	8002a14 <HAL_TIM_Base_Start_IT+0x6c>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a16      	ldr	r2, [pc, #88]	@ (8002a68 <HAL_TIM_Base_Start_IT+0xc0>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d111      	bne.n	8002a38 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2b06      	cmp	r3, #6
 8002a24:	d010      	beq.n	8002a48 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f042 0201 	orr.w	r2, r2, #1
 8002a34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a36:	e007      	b.n	8002a48 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f042 0201 	orr.w	r2, r2, #1
 8002a46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3714      	adds	r7, #20
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	40010000 	.word	0x40010000
 8002a5c:	40000400 	.word	0x40000400
 8002a60:	40000800 	.word	0x40000800
 8002a64:	40000c00 	.word	0x40000c00
 8002a68:	40014000 	.word	0x40014000

08002a6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e041      	b.n	8002b02 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d106      	bne.n	8002a98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7fe f92c 	bl	8000cf0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3304      	adds	r3, #4
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4610      	mov	r0, r2
 8002aac:	f000 fa08 	bl	8002ec0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b084      	sub	sp, #16
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d020      	beq.n	8002b6e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d01b      	beq.n	8002b6e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f06f 0202 	mvn.w	r2, #2
 8002b3e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	f003 0303 	and.w	r3, r3, #3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d003      	beq.n	8002b5c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 f995 	bl	8002e84 <HAL_TIM_IC_CaptureCallback>
 8002b5a:	e005      	b.n	8002b68 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 f987 	bl	8002e70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f998 	bl	8002e98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d020      	beq.n	8002bba <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f003 0304 	and.w	r3, r3, #4
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d01b      	beq.n	8002bba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f06f 0204 	mvn.w	r2, #4
 8002b8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2202      	movs	r2, #2
 8002b90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d003      	beq.n	8002ba8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 f96f 	bl	8002e84 <HAL_TIM_IC_CaptureCallback>
 8002ba6:	e005      	b.n	8002bb4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 f961 	bl	8002e70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 f972 	bl	8002e98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	f003 0308 	and.w	r3, r3, #8
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d020      	beq.n	8002c06 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f003 0308 	and.w	r3, r3, #8
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d01b      	beq.n	8002c06 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f06f 0208 	mvn.w	r2, #8
 8002bd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2204      	movs	r2, #4
 8002bdc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	69db      	ldr	r3, [r3, #28]
 8002be4:	f003 0303 	and.w	r3, r3, #3
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d003      	beq.n	8002bf4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 f949 	bl	8002e84 <HAL_TIM_IC_CaptureCallback>
 8002bf2:	e005      	b.n	8002c00 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 f93b 	bl	8002e70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f94c 	bl	8002e98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	f003 0310 	and.w	r3, r3, #16
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d020      	beq.n	8002c52 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f003 0310 	and.w	r3, r3, #16
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d01b      	beq.n	8002c52 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f06f 0210 	mvn.w	r2, #16
 8002c22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2208      	movs	r2, #8
 8002c28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	69db      	ldr	r3, [r3, #28]
 8002c30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d003      	beq.n	8002c40 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 f923 	bl	8002e84 <HAL_TIM_IC_CaptureCallback>
 8002c3e:	e005      	b.n	8002c4c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 f915 	bl	8002e70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f926 	bl	8002e98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00c      	beq.n	8002c76 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d007      	beq.n	8002c76 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f06f 0201 	mvn.w	r2, #1
 8002c6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f7fd ff21 	bl	8000ab8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00c      	beq.n	8002c9a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d007      	beq.n	8002c9a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002c92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 fbef 	bl	8003478 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00c      	beq.n	8002cbe <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d007      	beq.n	8002cbe <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 f8f7 	bl	8002eac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	f003 0320 	and.w	r3, r3, #32
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00c      	beq.n	8002ce2 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f003 0320 	and.w	r3, r3, #32
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d007      	beq.n	8002ce2 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f06f 0220 	mvn.w	r2, #32
 8002cda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 fbc1 	bl	8003464 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ce2:	bf00      	nop
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
	...

08002cec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d101      	bne.n	8002d0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002d06:	2302      	movs	r3, #2
 8002d08:	e0ae      	b.n	8002e68 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2b0c      	cmp	r3, #12
 8002d16:	f200 809f 	bhi.w	8002e58 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002d1a:	a201      	add	r2, pc, #4	@ (adr r2, 8002d20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d20:	08002d55 	.word	0x08002d55
 8002d24:	08002e59 	.word	0x08002e59
 8002d28:	08002e59 	.word	0x08002e59
 8002d2c:	08002e59 	.word	0x08002e59
 8002d30:	08002d95 	.word	0x08002d95
 8002d34:	08002e59 	.word	0x08002e59
 8002d38:	08002e59 	.word	0x08002e59
 8002d3c:	08002e59 	.word	0x08002e59
 8002d40:	08002dd7 	.word	0x08002dd7
 8002d44:	08002e59 	.word	0x08002e59
 8002d48:	08002e59 	.word	0x08002e59
 8002d4c:	08002e59 	.word	0x08002e59
 8002d50:	08002e17 	.word	0x08002e17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68b9      	ldr	r1, [r7, #8]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 f936 	bl	8002fcc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	699a      	ldr	r2, [r3, #24]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0208 	orr.w	r2, r2, #8
 8002d6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	699a      	ldr	r2, [r3, #24]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 0204 	bic.w	r2, r2, #4
 8002d7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6999      	ldr	r1, [r3, #24]
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	691a      	ldr	r2, [r3, #16]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	619a      	str	r2, [r3, #24]
      break;
 8002d92:	e064      	b.n	8002e5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68b9      	ldr	r1, [r7, #8]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f000 f97c 	bl	8003098 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	699a      	ldr	r2, [r3, #24]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002dae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	699a      	ldr	r2, [r3, #24]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6999      	ldr	r1, [r3, #24]
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	021a      	lsls	r2, r3, #8
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	619a      	str	r2, [r3, #24]
      break;
 8002dd4:	e043      	b.n	8002e5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68b9      	ldr	r1, [r7, #8]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f000 f9c7 	bl	8003170 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	69da      	ldr	r2, [r3, #28]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f042 0208 	orr.w	r2, r2, #8
 8002df0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	69da      	ldr	r2, [r3, #28]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 0204 	bic.w	r2, r2, #4
 8002e00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	69d9      	ldr	r1, [r3, #28]
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	691a      	ldr	r2, [r3, #16]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	61da      	str	r2, [r3, #28]
      break;
 8002e14:	e023      	b.n	8002e5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68b9      	ldr	r1, [r7, #8]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f000 fa11 	bl	8003244 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	69da      	ldr	r2, [r3, #28]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	69da      	ldr	r2, [r3, #28]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	69d9      	ldr	r1, [r3, #28]
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	021a      	lsls	r2, r3, #8
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	61da      	str	r2, [r3, #28]
      break;
 8002e56:	e002      	b.n	8002e5e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	75fb      	strb	r3, [r7, #23]
      break;
 8002e5c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a37      	ldr	r2, [pc, #220]	@ (8002fb0 <TIM_Base_SetConfig+0xf0>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d00f      	beq.n	8002ef8 <TIM_Base_SetConfig+0x38>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ede:	d00b      	beq.n	8002ef8 <TIM_Base_SetConfig+0x38>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a34      	ldr	r2, [pc, #208]	@ (8002fb4 <TIM_Base_SetConfig+0xf4>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d007      	beq.n	8002ef8 <TIM_Base_SetConfig+0x38>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a33      	ldr	r2, [pc, #204]	@ (8002fb8 <TIM_Base_SetConfig+0xf8>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d003      	beq.n	8002ef8 <TIM_Base_SetConfig+0x38>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a32      	ldr	r2, [pc, #200]	@ (8002fbc <TIM_Base_SetConfig+0xfc>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d108      	bne.n	8002f0a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002efe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a28      	ldr	r2, [pc, #160]	@ (8002fb0 <TIM_Base_SetConfig+0xf0>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d01b      	beq.n	8002f4a <TIM_Base_SetConfig+0x8a>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f18:	d017      	beq.n	8002f4a <TIM_Base_SetConfig+0x8a>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a25      	ldr	r2, [pc, #148]	@ (8002fb4 <TIM_Base_SetConfig+0xf4>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d013      	beq.n	8002f4a <TIM_Base_SetConfig+0x8a>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a24      	ldr	r2, [pc, #144]	@ (8002fb8 <TIM_Base_SetConfig+0xf8>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d00f      	beq.n	8002f4a <TIM_Base_SetConfig+0x8a>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a23      	ldr	r2, [pc, #140]	@ (8002fbc <TIM_Base_SetConfig+0xfc>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d00b      	beq.n	8002f4a <TIM_Base_SetConfig+0x8a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a22      	ldr	r2, [pc, #136]	@ (8002fc0 <TIM_Base_SetConfig+0x100>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d007      	beq.n	8002f4a <TIM_Base_SetConfig+0x8a>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a21      	ldr	r2, [pc, #132]	@ (8002fc4 <TIM_Base_SetConfig+0x104>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d003      	beq.n	8002f4a <TIM_Base_SetConfig+0x8a>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a20      	ldr	r2, [pc, #128]	@ (8002fc8 <TIM_Base_SetConfig+0x108>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d108      	bne.n	8002f5c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a0c      	ldr	r2, [pc, #48]	@ (8002fb0 <TIM_Base_SetConfig+0xf0>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d103      	bne.n	8002f8a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	691a      	ldr	r2, [r3, #16]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f043 0204 	orr.w	r2, r3, #4
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	601a      	str	r2, [r3, #0]
}
 8002fa2:	bf00      	nop
 8002fa4:	3714      	adds	r7, #20
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	40010000 	.word	0x40010000
 8002fb4:	40000400 	.word	0x40000400
 8002fb8:	40000800 	.word	0x40000800
 8002fbc:	40000c00 	.word	0x40000c00
 8002fc0:	40014000 	.word	0x40014000
 8002fc4:	40014400 	.word	0x40014400
 8002fc8:	40014800 	.word	0x40014800

08002fcc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b087      	sub	sp, #28
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	f023 0201 	bic.w	r2, r3, #1
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f023 0303 	bic.w	r3, r3, #3
 8003002:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	4313      	orrs	r3, r2
 800300c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	f023 0302 	bic.w	r3, r3, #2
 8003014:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	4313      	orrs	r3, r2
 800301e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a1c      	ldr	r2, [pc, #112]	@ (8003094 <TIM_OC1_SetConfig+0xc8>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d10c      	bne.n	8003042 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	f023 0308 	bic.w	r3, r3, #8
 800302e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	697a      	ldr	r2, [r7, #20]
 8003036:	4313      	orrs	r3, r2
 8003038:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f023 0304 	bic.w	r3, r3, #4
 8003040:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a13      	ldr	r2, [pc, #76]	@ (8003094 <TIM_OC1_SetConfig+0xc8>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d111      	bne.n	800306e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003050:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003058:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	4313      	orrs	r3, r2
 8003062:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	4313      	orrs	r3, r2
 800306c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	621a      	str	r2, [r3, #32]
}
 8003088:	bf00      	nop
 800308a:	371c      	adds	r7, #28
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	40010000 	.word	0x40010000

08003098 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003098:	b480      	push	{r7}
 800309a:	b087      	sub	sp, #28
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	f023 0210 	bic.w	r2, r3, #16
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	021b      	lsls	r3, r3, #8
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	4313      	orrs	r3, r2
 80030da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	f023 0320 	bic.w	r3, r3, #32
 80030e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a1e      	ldr	r2, [pc, #120]	@ (800316c <TIM_OC2_SetConfig+0xd4>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d10d      	bne.n	8003114 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	011b      	lsls	r3, r3, #4
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	4313      	orrs	r3, r2
 800310a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003112:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a15      	ldr	r2, [pc, #84]	@ (800316c <TIM_OC2_SetConfig+0xd4>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d113      	bne.n	8003144 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003122:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800312a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	4313      	orrs	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	4313      	orrs	r3, r2
 8003142:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	621a      	str	r2, [r3, #32]
}
 800315e:	bf00      	nop
 8003160:	371c      	adds	r7, #28
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	40010000 	.word	0x40010000

08003170 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003170:	b480      	push	{r7}
 8003172:	b087      	sub	sp, #28
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800319e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f023 0303 	bic.w	r3, r3, #3
 80031a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80031b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	021b      	lsls	r3, r3, #8
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a1d      	ldr	r2, [pc, #116]	@ (8003240 <TIM_OC3_SetConfig+0xd0>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d10d      	bne.n	80031ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80031d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	021b      	lsls	r3, r3, #8
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	4313      	orrs	r3, r2
 80031e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80031e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a14      	ldr	r2, [pc, #80]	@ (8003240 <TIM_OC3_SetConfig+0xd0>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d113      	bne.n	800321a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80031f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003200:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	4313      	orrs	r3, r2
 800320c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	4313      	orrs	r3, r2
 8003218:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	621a      	str	r2, [r3, #32]
}
 8003234:	bf00      	nop
 8003236:	371c      	adds	r7, #28
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	40010000 	.word	0x40010000

08003244 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003244:	b480      	push	{r7}
 8003246:	b087      	sub	sp, #28
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800327a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	021b      	lsls	r3, r3, #8
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	4313      	orrs	r3, r2
 8003286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800328e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	031b      	lsls	r3, r3, #12
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	4313      	orrs	r3, r2
 800329a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a10      	ldr	r2, [pc, #64]	@ (80032e0 <TIM_OC4_SetConfig+0x9c>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d109      	bne.n	80032b8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80032aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	019b      	lsls	r3, r3, #6
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	621a      	str	r2, [r3, #32]
}
 80032d2:	bf00      	nop
 80032d4:	371c      	adds	r7, #28
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	40010000 	.word	0x40010000

080032e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d101      	bne.n	80032fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032f8:	2302      	movs	r3, #2
 80032fa:	e050      	b.n	800339e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2202      	movs	r2, #2
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003322:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	4313      	orrs	r3, r2
 800332c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a1c      	ldr	r2, [pc, #112]	@ (80033ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d018      	beq.n	8003372 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003348:	d013      	beq.n	8003372 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a18      	ldr	r2, [pc, #96]	@ (80033b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d00e      	beq.n	8003372 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a16      	ldr	r2, [pc, #88]	@ (80033b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d009      	beq.n	8003372 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a15      	ldr	r2, [pc, #84]	@ (80033b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d004      	beq.n	8003372 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a13      	ldr	r2, [pc, #76]	@ (80033bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d10c      	bne.n	800338c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003378:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	4313      	orrs	r3, r2
 8003382:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68ba      	ldr	r2, [r7, #8]
 800338a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3714      	adds	r7, #20
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	40010000 	.word	0x40010000
 80033b0:	40000400 	.word	0x40000400
 80033b4:	40000800 	.word	0x40000800
 80033b8:	40000c00 	.word	0x40000c00
 80033bc:	40014000 	.word	0x40014000

080033c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80033ca:	2300      	movs	r3, #0
 80033cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d101      	bne.n	80033dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80033d8:	2302      	movs	r3, #2
 80033da:	e03d      	b.n	8003458 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	4313      	orrs	r3, r2
 800340c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4313      	orrs	r3, r2
 800341a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	4313      	orrs	r3, r2
 8003428:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	4313      	orrs	r3, r2
 8003436:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	4313      	orrs	r3, r2
 8003444:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e042      	b.n	8003524 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d106      	bne.n	80034b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7fd fc78 	bl	8000da8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2224      	movs	r2, #36	@ 0x24
 80034bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68da      	ldr	r2, [r3, #12]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 fdbf 	bl	8004054 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	691a      	ldr	r2, [r3, #16]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	695a      	ldr	r2, [r3, #20]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68da      	ldr	r2, [r3, #12]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003504:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2220      	movs	r2, #32
 8003510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2220      	movs	r2, #32
 8003518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b08a      	sub	sp, #40	@ 0x28
 8003530:	af02      	add	r7, sp, #8
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	603b      	str	r3, [r7, #0]
 8003538:	4613      	mov	r3, r2
 800353a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b20      	cmp	r3, #32
 800354a:	d175      	bne.n	8003638 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d002      	beq.n	8003558 <HAL_UART_Transmit+0x2c>
 8003552:	88fb      	ldrh	r3, [r7, #6]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e06e      	b.n	800363a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2221      	movs	r2, #33	@ 0x21
 8003566:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800356a:	f7fd fdf7 	bl	800115c <HAL_GetTick>
 800356e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	88fa      	ldrh	r2, [r7, #6]
 8003574:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	88fa      	ldrh	r2, [r7, #6]
 800357a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003584:	d108      	bne.n	8003598 <HAL_UART_Transmit+0x6c>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d104      	bne.n	8003598 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800358e:	2300      	movs	r3, #0
 8003590:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	61bb      	str	r3, [r7, #24]
 8003596:	e003      	b.n	80035a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800359c:	2300      	movs	r3, #0
 800359e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035a0:	e02e      	b.n	8003600 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	2200      	movs	r2, #0
 80035aa:	2180      	movs	r1, #128	@ 0x80
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f000 fb23 	bl	8003bf8 <UART_WaitOnFlagUntilTimeout>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d005      	beq.n	80035c4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2220      	movs	r2, #32
 80035bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e03a      	b.n	800363a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10b      	bne.n	80035e2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	881b      	ldrh	r3, [r3, #0]
 80035ce:	461a      	mov	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	3302      	adds	r3, #2
 80035de:	61bb      	str	r3, [r7, #24]
 80035e0:	e007      	b.n	80035f2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	781a      	ldrb	r2, [r3, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	3301      	adds	r3, #1
 80035f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	3b01      	subs	r3, #1
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003604:	b29b      	uxth	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1cb      	bne.n	80035a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	9300      	str	r3, [sp, #0]
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	2200      	movs	r2, #0
 8003612:	2140      	movs	r1, #64	@ 0x40
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 faef 	bl	8003bf8 <UART_WaitOnFlagUntilTimeout>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d005      	beq.n	800362c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2220      	movs	r2, #32
 8003624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e006      	b.n	800363a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2220      	movs	r2, #32
 8003630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003634:	2300      	movs	r3, #0
 8003636:	e000      	b.n	800363a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003638:	2302      	movs	r3, #2
  }
}
 800363a:	4618      	mov	r0, r3
 800363c:	3720      	adds	r7, #32
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b084      	sub	sp, #16
 8003646:	af00      	add	r7, sp, #0
 8003648:	60f8      	str	r0, [r7, #12]
 800364a:	60b9      	str	r1, [r7, #8]
 800364c:	4613      	mov	r3, r2
 800364e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b20      	cmp	r3, #32
 800365a:	d112      	bne.n	8003682 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d002      	beq.n	8003668 <HAL_UART_Receive_IT+0x26>
 8003662:	88fb      	ldrh	r3, [r7, #6]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d101      	bne.n	800366c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e00b      	b.n	8003684 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003672:	88fb      	ldrh	r3, [r7, #6]
 8003674:	461a      	mov	r2, r3
 8003676:	68b9      	ldr	r1, [r7, #8]
 8003678:	68f8      	ldr	r0, [r7, #12]
 800367a:	f000 fb16 	bl	8003caa <UART_Start_Receive_IT>
 800367e:	4603      	mov	r3, r0
 8003680:	e000      	b.n	8003684 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003682:	2302      	movs	r3, #2
  }
}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b0ba      	sub	sp, #232	@ 0xe8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80036b2:	2300      	movs	r3, #0
 80036b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80036b8:	2300      	movs	r3, #0
 80036ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80036be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036c2:	f003 030f 	and.w	r3, r3, #15
 80036c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80036ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10f      	bne.n	80036f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036d6:	f003 0320 	and.w	r3, r3, #32
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d009      	beq.n	80036f2 <HAL_UART_IRQHandler+0x66>
 80036de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036e2:	f003 0320 	and.w	r3, r3, #32
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 fbf3 	bl	8003ed6 <UART_Receive_IT>
      return;
 80036f0:	e273      	b.n	8003bda <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80036f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f000 80de 	beq.w	80038b8 <HAL_UART_IRQHandler+0x22c>
 80036fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b00      	cmp	r3, #0
 8003706:	d106      	bne.n	8003716 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800370c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003710:	2b00      	cmp	r3, #0
 8003712:	f000 80d1 	beq.w	80038b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00b      	beq.n	800373a <HAL_UART_IRQHandler+0xae>
 8003722:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800372a:	2b00      	cmp	r3, #0
 800372c:	d005      	beq.n	800373a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003732:	f043 0201 	orr.w	r2, r3, #1
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800373a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800373e:	f003 0304 	and.w	r3, r3, #4
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00b      	beq.n	800375e <HAL_UART_IRQHandler+0xd2>
 8003746:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d005      	beq.n	800375e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003756:	f043 0202 	orr.w	r2, r3, #2
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800375e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00b      	beq.n	8003782 <HAL_UART_IRQHandler+0xf6>
 800376a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d005      	beq.n	8003782 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800377a:	f043 0204 	orr.w	r2, r3, #4
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003786:	f003 0308 	and.w	r3, r3, #8
 800378a:	2b00      	cmp	r3, #0
 800378c:	d011      	beq.n	80037b2 <HAL_UART_IRQHandler+0x126>
 800378e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003792:	f003 0320 	and.w	r3, r3, #32
 8003796:	2b00      	cmp	r3, #0
 8003798:	d105      	bne.n	80037a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800379a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d005      	beq.n	80037b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037aa:	f043 0208 	orr.w	r2, r3, #8
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 820a 	beq.w	8003bd0 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037c0:	f003 0320 	and.w	r3, r3, #32
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d008      	beq.n	80037da <HAL_UART_IRQHandler+0x14e>
 80037c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037cc:	f003 0320 	and.w	r3, r3, #32
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d002      	beq.n	80037da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 fb7e 	bl	8003ed6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037e4:	2b40      	cmp	r3, #64	@ 0x40
 80037e6:	bf0c      	ite	eq
 80037e8:	2301      	moveq	r3, #1
 80037ea:	2300      	movne	r3, #0
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037f6:	f003 0308 	and.w	r3, r3, #8
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d103      	bne.n	8003806 <HAL_UART_IRQHandler+0x17a>
 80037fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003802:	2b00      	cmp	r3, #0
 8003804:	d04f      	beq.n	80038a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 fa89 	bl	8003d1e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003816:	2b40      	cmp	r3, #64	@ 0x40
 8003818:	d141      	bne.n	800389e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	3314      	adds	r3, #20
 8003820:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003824:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003828:	e853 3f00 	ldrex	r3, [r3]
 800382c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003830:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003834:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003838:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	3314      	adds	r3, #20
 8003842:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003846:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800384a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003852:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003856:	e841 2300 	strex	r3, r2, [r1]
 800385a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800385e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1d9      	bne.n	800381a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800386a:	2b00      	cmp	r3, #0
 800386c:	d013      	beq.n	8003896 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003872:	4a8a      	ldr	r2, [pc, #552]	@ (8003a9c <HAL_UART_IRQHandler+0x410>)
 8003874:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800387a:	4618      	mov	r0, r3
 800387c:	f7fe f83e 	bl	80018fc <HAL_DMA_Abort_IT>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d016      	beq.n	80038b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800388a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003890:	4610      	mov	r0, r2
 8003892:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003894:	e00e      	b.n	80038b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 ff78 	bl	800478c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800389c:	e00a      	b.n	80038b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 ff74 	bl	800478c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038a4:	e006      	b.n	80038b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 ff70 	bl	800478c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80038b2:	e18d      	b.n	8003bd0 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038b4:	bf00      	nop
    return;
 80038b6:	e18b      	b.n	8003bd0 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038bc:	2b01      	cmp	r3, #1
 80038be:	f040 8167 	bne.w	8003b90 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80038c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038c6:	f003 0310 	and.w	r3, r3, #16
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f000 8160 	beq.w	8003b90 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80038d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038d4:	f003 0310 	and.w	r3, r3, #16
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 8159 	beq.w	8003b90 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038de:	2300      	movs	r3, #0
 80038e0:	60bb      	str	r3, [r7, #8]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	60bb      	str	r3, [r7, #8]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	60bb      	str	r3, [r7, #8]
 80038f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038fe:	2b40      	cmp	r3, #64	@ 0x40
 8003900:	f040 80ce 	bne.w	8003aa0 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003910:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 80a9 	beq.w	8003a6c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800391e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003922:	429a      	cmp	r2, r3
 8003924:	f080 80a2 	bcs.w	8003a6c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800392e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800393a:	f000 8088 	beq.w	8003a4e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	330c      	adds	r3, #12
 8003944:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003948:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800394c:	e853 3f00 	ldrex	r3, [r3]
 8003950:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003954:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003958:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800395c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	330c      	adds	r3, #12
 8003966:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800396a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800396e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003972:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003976:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800397a:	e841 2300 	strex	r3, r2, [r1]
 800397e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003982:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1d9      	bne.n	800393e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	3314      	adds	r3, #20
 8003990:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003992:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003994:	e853 3f00 	ldrex	r3, [r3]
 8003998:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800399a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800399c:	f023 0301 	bic.w	r3, r3, #1
 80039a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	3314      	adds	r3, #20
 80039aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80039ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80039b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80039b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80039ba:	e841 2300 	strex	r3, r2, [r1]
 80039be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80039c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1e1      	bne.n	800398a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	3314      	adds	r3, #20
 80039cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80039d0:	e853 3f00 	ldrex	r3, [r3]
 80039d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80039d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	3314      	adds	r3, #20
 80039e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80039ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80039ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80039f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80039f2:	e841 2300 	strex	r3, r2, [r1]
 80039f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80039f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1e3      	bne.n	80039c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2220      	movs	r2, #32
 8003a02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	330c      	adds	r3, #12
 8003a12:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a16:	e853 3f00 	ldrex	r3, [r3]
 8003a1a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003a1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a1e:	f023 0310 	bic.w	r3, r3, #16
 8003a22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	330c      	adds	r3, #12
 8003a2c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003a30:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003a32:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a34:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a36:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a38:	e841 2300 	strex	r3, r2, [r1]
 8003a3c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003a3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1e3      	bne.n	8003a0c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7fd fee7 	bl	800181c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2202      	movs	r2, #2
 8003a52:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	4619      	mov	r1, r3
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 f8bb 	bl	8003be0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003a6a:	e0b3      	b.n	8003bd4 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a70:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a74:	429a      	cmp	r2, r3
 8003a76:	f040 80ad 	bne.w	8003bd4 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a7e:	69db      	ldr	r3, [r3, #28]
 8003a80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a84:	f040 80a6 	bne.w	8003bd4 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a92:	4619      	mov	r1, r3
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 f8a3 	bl	8003be0 <HAL_UARTEx_RxEventCallback>
      return;
 8003a9a:	e09b      	b.n	8003bd4 <HAL_UART_IRQHandler+0x548>
 8003a9c:	08003de5 	.word	0x08003de5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	f000 808e 	beq.w	8003bd8 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003abc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 8089 	beq.w	8003bd8 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	330c      	adds	r3, #12
 8003acc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ad0:	e853 3f00 	ldrex	r3, [r3]
 8003ad4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ad8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003adc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	330c      	adds	r3, #12
 8003ae6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003aea:	647a      	str	r2, [r7, #68]	@ 0x44
 8003aec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003af0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003af2:	e841 2300 	strex	r3, r2, [r1]
 8003af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003af8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1e3      	bne.n	8003ac6 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	3314      	adds	r3, #20
 8003b04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b08:	e853 3f00 	ldrex	r3, [r3]
 8003b0c:	623b      	str	r3, [r7, #32]
   return(result);
 8003b0e:	6a3b      	ldr	r3, [r7, #32]
 8003b10:	f023 0301 	bic.w	r3, r3, #1
 8003b14:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	3314      	adds	r3, #20
 8003b1e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003b22:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b2a:	e841 2300 	strex	r3, r2, [r1]
 8003b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1e3      	bne.n	8003afe <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2220      	movs	r2, #32
 8003b3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	330c      	adds	r3, #12
 8003b4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	e853 3f00 	ldrex	r3, [r3]
 8003b52:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f023 0310 	bic.w	r3, r3, #16
 8003b5a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	330c      	adds	r3, #12
 8003b64:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003b68:	61fa      	str	r2, [r7, #28]
 8003b6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6c:	69b9      	ldr	r1, [r7, #24]
 8003b6e:	69fa      	ldr	r2, [r7, #28]
 8003b70:	e841 2300 	strex	r3, r2, [r1]
 8003b74:	617b      	str	r3, [r7, #20]
   return(result);
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1e3      	bne.n	8003b44 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b86:	4619      	mov	r1, r3
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 f829 	bl	8003be0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b8e:	e023      	b.n	8003bd8 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d009      	beq.n	8003bb0 <HAL_UART_IRQHandler+0x524>
 8003b9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ba0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f92c 	bl	8003e06 <UART_Transmit_IT>
    return;
 8003bae:	e014      	b.n	8003bda <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00e      	beq.n	8003bda <HAL_UART_IRQHandler+0x54e>
 8003bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d008      	beq.n	8003bda <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f96c 	bl	8003ea6 <UART_EndTransmit_IT>
    return;
 8003bce:	e004      	b.n	8003bda <HAL_UART_IRQHandler+0x54e>
    return;
 8003bd0:	bf00      	nop
 8003bd2:	e002      	b.n	8003bda <HAL_UART_IRQHandler+0x54e>
      return;
 8003bd4:	bf00      	nop
 8003bd6:	e000      	b.n	8003bda <HAL_UART_IRQHandler+0x54e>
      return;
 8003bd8:	bf00      	nop
  }
}
 8003bda:	37e8      	adds	r7, #232	@ 0xe8
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	460b      	mov	r3, r1
 8003bea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	603b      	str	r3, [r7, #0]
 8003c04:	4613      	mov	r3, r2
 8003c06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c08:	e03b      	b.n	8003c82 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c0a:	6a3b      	ldr	r3, [r7, #32]
 8003c0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c10:	d037      	beq.n	8003c82 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c12:	f7fd faa3 	bl	800115c <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	6a3a      	ldr	r2, [r7, #32]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d302      	bcc.n	8003c28 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c22:	6a3b      	ldr	r3, [r7, #32]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d101      	bne.n	8003c2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e03a      	b.n	8003ca2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	f003 0304 	and.w	r3, r3, #4
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d023      	beq.n	8003c82 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	2b80      	cmp	r3, #128	@ 0x80
 8003c3e:	d020      	beq.n	8003c82 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	2b40      	cmp	r3, #64	@ 0x40
 8003c44:	d01d      	beq.n	8003c82 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0308 	and.w	r3, r3, #8
 8003c50:	2b08      	cmp	r3, #8
 8003c52:	d116      	bne.n	8003c82 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003c54:	2300      	movs	r3, #0
 8003c56:	617b      	str	r3, [r7, #20]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	617b      	str	r3, [r7, #20]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	617b      	str	r3, [r7, #20]
 8003c68:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 f857 	bl	8003d1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2208      	movs	r2, #8
 8003c74:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e00f      	b.n	8003ca2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	bf0c      	ite	eq
 8003c92:	2301      	moveq	r3, #1
 8003c94:	2300      	movne	r3, #0
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	461a      	mov	r2, r3
 8003c9a:	79fb      	ldrb	r3, [r7, #7]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d0b4      	beq.n	8003c0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3718      	adds	r7, #24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b085      	sub	sp, #20
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	60f8      	str	r0, [r7, #12]
 8003cb2:	60b9      	str	r1, [r7, #8]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	88fa      	ldrh	r2, [r7, #6]
 8003cc2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	88fa      	ldrh	r2, [r7, #6]
 8003cc8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2222      	movs	r2, #34	@ 0x22
 8003cd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d007      	beq.n	8003cf0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cee:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	695a      	ldr	r2, [r3, #20]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f042 0201 	orr.w	r2, r2, #1
 8003cfe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68da      	ldr	r2, [r3, #12]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0220 	orr.w	r2, r2, #32
 8003d0e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b095      	sub	sp, #84	@ 0x54
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	330c      	adds	r3, #12
 8003d2c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d30:	e853 3f00 	ldrex	r3, [r3]
 8003d34:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	330c      	adds	r3, #12
 8003d44:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d46:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d4c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d4e:	e841 2300 	strex	r3, r2, [r1]
 8003d52:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1e5      	bne.n	8003d26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	3314      	adds	r3, #20
 8003d60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d62:	6a3b      	ldr	r3, [r7, #32]
 8003d64:	e853 3f00 	ldrex	r3, [r3]
 8003d68:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	f023 0301 	bic.w	r3, r3, #1
 8003d70:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	3314      	adds	r3, #20
 8003d78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d82:	e841 2300 	strex	r3, r2, [r1]
 8003d86:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1e5      	bne.n	8003d5a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d119      	bne.n	8003dca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	330c      	adds	r3, #12
 8003d9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	e853 3f00 	ldrex	r3, [r3]
 8003da4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	f023 0310 	bic.w	r3, r3, #16
 8003dac:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	330c      	adds	r3, #12
 8003db4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003db6:	61ba      	str	r2, [r7, #24]
 8003db8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dba:	6979      	ldr	r1, [r7, #20]
 8003dbc:	69ba      	ldr	r2, [r7, #24]
 8003dbe:	e841 2300 	strex	r3, r2, [r1]
 8003dc2:	613b      	str	r3, [r7, #16]
   return(result);
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1e5      	bne.n	8003d96 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2220      	movs	r2, #32
 8003dce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003dd8:	bf00      	nop
 8003dda:	3754      	adds	r7, #84	@ 0x54
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f000 fcc7 	bl	800478c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dfe:	bf00      	nop
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b085      	sub	sp, #20
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b21      	cmp	r3, #33	@ 0x21
 8003e18:	d13e      	bne.n	8003e98 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e22:	d114      	bne.n	8003e4e <UART_Transmit_IT+0x48>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d110      	bne.n	8003e4e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	881b      	ldrh	r3, [r3, #0]
 8003e36:	461a      	mov	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e40:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	1c9a      	adds	r2, r3, #2
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	621a      	str	r2, [r3, #32]
 8003e4c:	e008      	b.n	8003e60 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	1c59      	adds	r1, r3, #1
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	6211      	str	r1, [r2, #32]
 8003e58:	781a      	ldrb	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	3b01      	subs	r3, #1
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10f      	bne.n	8003e94 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68da      	ldr	r2, [r3, #12]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e82:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68da      	ldr	r2, [r3, #12]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e92:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e94:	2300      	movs	r3, #0
 8003e96:	e000      	b.n	8003e9a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e98:	2302      	movs	r3, #2
  }
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3714      	adds	r7, #20
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr

08003ea6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b082      	sub	sp, #8
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68da      	ldr	r2, [r3, #12]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ebc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 fc2a 	bl	8004720 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b08c      	sub	sp, #48	@ 0x30
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b22      	cmp	r3, #34	@ 0x22
 8003ef0:	f040 80aa 	bne.w	8004048 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003efc:	d115      	bne.n	8003f2a <UART_Receive_IT+0x54>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d111      	bne.n	8003f2a <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f1c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f22:	1c9a      	adds	r2, r3, #2
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f28:	e024      	b.n	8003f74 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f38:	d007      	beq.n	8003f4a <UART_Receive_IT+0x74>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10a      	bne.n	8003f58 <UART_Receive_IT+0x82>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d106      	bne.n	8003f58 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f54:	701a      	strb	r2, [r3, #0]
 8003f56:	e008      	b.n	8003f6a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f64:	b2da      	uxtb	r2, r3
 8003f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f68:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f6e:	1c5a      	adds	r2, r3, #1
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	4619      	mov	r1, r3
 8003f82:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d15d      	bne.n	8004044 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68da      	ldr	r2, [r3, #12]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 0220 	bic.w	r2, r2, #32
 8003f96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68da      	ldr	r2, [r3, #12]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003fa6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	695a      	ldr	r2, [r3, #20]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 0201 	bic.w	r2, r2, #1
 8003fb6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d135      	bne.n	800403a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	330c      	adds	r3, #12
 8003fda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	e853 3f00 	ldrex	r3, [r3]
 8003fe2:	613b      	str	r3, [r7, #16]
   return(result);
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	f023 0310 	bic.w	r3, r3, #16
 8003fea:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	330c      	adds	r3, #12
 8003ff2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ff4:	623a      	str	r2, [r7, #32]
 8003ff6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff8:	69f9      	ldr	r1, [r7, #28]
 8003ffa:	6a3a      	ldr	r2, [r7, #32]
 8003ffc:	e841 2300 	strex	r3, r2, [r1]
 8004000:	61bb      	str	r3, [r7, #24]
   return(result);
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1e5      	bne.n	8003fd4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0310 	and.w	r3, r3, #16
 8004012:	2b10      	cmp	r3, #16
 8004014:	d10a      	bne.n	800402c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004016:	2300      	movs	r3, #0
 8004018:	60fb      	str	r3, [r7, #12]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	60fb      	str	r3, [r7, #12]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	60fb      	str	r3, [r7, #12]
 800402a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004030:	4619      	mov	r1, r3
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f7ff fdd4 	bl	8003be0 <HAL_UARTEx_RxEventCallback>
 8004038:	e002      	b.n	8004040 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 fb7a 	bl	8004734 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004040:	2300      	movs	r3, #0
 8004042:	e002      	b.n	800404a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004044:	2300      	movs	r3, #0
 8004046:	e000      	b.n	800404a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004048:	2302      	movs	r3, #2
  }
}
 800404a:	4618      	mov	r0, r3
 800404c:	3730      	adds	r7, #48	@ 0x30
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
	...

08004054 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004058:	b0c0      	sub	sp, #256	@ 0x100
 800405a:	af00      	add	r7, sp, #0
 800405c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800406c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004070:	68d9      	ldr	r1, [r3, #12]
 8004072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	ea40 0301 	orr.w	r3, r0, r1
 800407c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800407e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004082:	689a      	ldr	r2, [r3, #8]
 8004084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	431a      	orrs	r2, r3
 800408c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	431a      	orrs	r2, r3
 8004094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	4313      	orrs	r3, r2
 800409c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80040a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80040ac:	f021 010c 	bic.w	r1, r1, #12
 80040b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80040ba:	430b      	orrs	r3, r1
 80040bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80040ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ce:	6999      	ldr	r1, [r3, #24]
 80040d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	ea40 0301 	orr.w	r3, r0, r1
 80040da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	4b8f      	ldr	r3, [pc, #572]	@ (8004320 <UART_SetConfig+0x2cc>)
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d005      	beq.n	80040f4 <UART_SetConfig+0xa0>
 80040e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	4b8d      	ldr	r3, [pc, #564]	@ (8004324 <UART_SetConfig+0x2d0>)
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d104      	bne.n	80040fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040f4:	f7fe fb30 	bl	8002758 <HAL_RCC_GetPCLK2Freq>
 80040f8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80040fc:	e003      	b.n	8004106 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040fe:	f7fe fb17 	bl	8002730 <HAL_RCC_GetPCLK1Freq>
 8004102:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800410a:	69db      	ldr	r3, [r3, #28]
 800410c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004110:	f040 810c 	bne.w	800432c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004114:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004118:	2200      	movs	r2, #0
 800411a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800411e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004122:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004126:	4622      	mov	r2, r4
 8004128:	462b      	mov	r3, r5
 800412a:	1891      	adds	r1, r2, r2
 800412c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800412e:	415b      	adcs	r3, r3
 8004130:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004132:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004136:	4621      	mov	r1, r4
 8004138:	eb12 0801 	adds.w	r8, r2, r1
 800413c:	4629      	mov	r1, r5
 800413e:	eb43 0901 	adc.w	r9, r3, r1
 8004142:	f04f 0200 	mov.w	r2, #0
 8004146:	f04f 0300 	mov.w	r3, #0
 800414a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800414e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004152:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004156:	4690      	mov	r8, r2
 8004158:	4699      	mov	r9, r3
 800415a:	4623      	mov	r3, r4
 800415c:	eb18 0303 	adds.w	r3, r8, r3
 8004160:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004164:	462b      	mov	r3, r5
 8004166:	eb49 0303 	adc.w	r3, r9, r3
 800416a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800416e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800417a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800417e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004182:	460b      	mov	r3, r1
 8004184:	18db      	adds	r3, r3, r3
 8004186:	653b      	str	r3, [r7, #80]	@ 0x50
 8004188:	4613      	mov	r3, r2
 800418a:	eb42 0303 	adc.w	r3, r2, r3
 800418e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004190:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004194:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004198:	f7fc f87a 	bl	8000290 <__aeabi_uldivmod>
 800419c:	4602      	mov	r2, r0
 800419e:	460b      	mov	r3, r1
 80041a0:	4b61      	ldr	r3, [pc, #388]	@ (8004328 <UART_SetConfig+0x2d4>)
 80041a2:	fba3 2302 	umull	r2, r3, r3, r2
 80041a6:	095b      	lsrs	r3, r3, #5
 80041a8:	011c      	lsls	r4, r3, #4
 80041aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041ae:	2200      	movs	r2, #0
 80041b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80041b4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80041b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80041bc:	4642      	mov	r2, r8
 80041be:	464b      	mov	r3, r9
 80041c0:	1891      	adds	r1, r2, r2
 80041c2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80041c4:	415b      	adcs	r3, r3
 80041c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80041cc:	4641      	mov	r1, r8
 80041ce:	eb12 0a01 	adds.w	sl, r2, r1
 80041d2:	4649      	mov	r1, r9
 80041d4:	eb43 0b01 	adc.w	fp, r3, r1
 80041d8:	f04f 0200 	mov.w	r2, #0
 80041dc:	f04f 0300 	mov.w	r3, #0
 80041e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041ec:	4692      	mov	sl, r2
 80041ee:	469b      	mov	fp, r3
 80041f0:	4643      	mov	r3, r8
 80041f2:	eb1a 0303 	adds.w	r3, sl, r3
 80041f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041fa:	464b      	mov	r3, r9
 80041fc:	eb4b 0303 	adc.w	r3, fp, r3
 8004200:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004210:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004214:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004218:	460b      	mov	r3, r1
 800421a:	18db      	adds	r3, r3, r3
 800421c:	643b      	str	r3, [r7, #64]	@ 0x40
 800421e:	4613      	mov	r3, r2
 8004220:	eb42 0303 	adc.w	r3, r2, r3
 8004224:	647b      	str	r3, [r7, #68]	@ 0x44
 8004226:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800422a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800422e:	f7fc f82f 	bl	8000290 <__aeabi_uldivmod>
 8004232:	4602      	mov	r2, r0
 8004234:	460b      	mov	r3, r1
 8004236:	4611      	mov	r1, r2
 8004238:	4b3b      	ldr	r3, [pc, #236]	@ (8004328 <UART_SetConfig+0x2d4>)
 800423a:	fba3 2301 	umull	r2, r3, r3, r1
 800423e:	095b      	lsrs	r3, r3, #5
 8004240:	2264      	movs	r2, #100	@ 0x64
 8004242:	fb02 f303 	mul.w	r3, r2, r3
 8004246:	1acb      	subs	r3, r1, r3
 8004248:	00db      	lsls	r3, r3, #3
 800424a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800424e:	4b36      	ldr	r3, [pc, #216]	@ (8004328 <UART_SetConfig+0x2d4>)
 8004250:	fba3 2302 	umull	r2, r3, r3, r2
 8004254:	095b      	lsrs	r3, r3, #5
 8004256:	005b      	lsls	r3, r3, #1
 8004258:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800425c:	441c      	add	r4, r3
 800425e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004262:	2200      	movs	r2, #0
 8004264:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004268:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800426c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004270:	4642      	mov	r2, r8
 8004272:	464b      	mov	r3, r9
 8004274:	1891      	adds	r1, r2, r2
 8004276:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004278:	415b      	adcs	r3, r3
 800427a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800427c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004280:	4641      	mov	r1, r8
 8004282:	1851      	adds	r1, r2, r1
 8004284:	6339      	str	r1, [r7, #48]	@ 0x30
 8004286:	4649      	mov	r1, r9
 8004288:	414b      	adcs	r3, r1
 800428a:	637b      	str	r3, [r7, #52]	@ 0x34
 800428c:	f04f 0200 	mov.w	r2, #0
 8004290:	f04f 0300 	mov.w	r3, #0
 8004294:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004298:	4659      	mov	r1, fp
 800429a:	00cb      	lsls	r3, r1, #3
 800429c:	4651      	mov	r1, sl
 800429e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042a2:	4651      	mov	r1, sl
 80042a4:	00ca      	lsls	r2, r1, #3
 80042a6:	4610      	mov	r0, r2
 80042a8:	4619      	mov	r1, r3
 80042aa:	4603      	mov	r3, r0
 80042ac:	4642      	mov	r2, r8
 80042ae:	189b      	adds	r3, r3, r2
 80042b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042b4:	464b      	mov	r3, r9
 80042b6:	460a      	mov	r2, r1
 80042b8:	eb42 0303 	adc.w	r3, r2, r3
 80042bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80042cc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80042d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80042d4:	460b      	mov	r3, r1
 80042d6:	18db      	adds	r3, r3, r3
 80042d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042da:	4613      	mov	r3, r2
 80042dc:	eb42 0303 	adc.w	r3, r2, r3
 80042e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80042e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80042ea:	f7fb ffd1 	bl	8000290 <__aeabi_uldivmod>
 80042ee:	4602      	mov	r2, r0
 80042f0:	460b      	mov	r3, r1
 80042f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004328 <UART_SetConfig+0x2d4>)
 80042f4:	fba3 1302 	umull	r1, r3, r3, r2
 80042f8:	095b      	lsrs	r3, r3, #5
 80042fa:	2164      	movs	r1, #100	@ 0x64
 80042fc:	fb01 f303 	mul.w	r3, r1, r3
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	3332      	adds	r3, #50	@ 0x32
 8004306:	4a08      	ldr	r2, [pc, #32]	@ (8004328 <UART_SetConfig+0x2d4>)
 8004308:	fba2 2303 	umull	r2, r3, r2, r3
 800430c:	095b      	lsrs	r3, r3, #5
 800430e:	f003 0207 	and.w	r2, r3, #7
 8004312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4422      	add	r2, r4
 800431a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800431c:	e106      	b.n	800452c <UART_SetConfig+0x4d8>
 800431e:	bf00      	nop
 8004320:	40011000 	.word	0x40011000
 8004324:	40011400 	.word	0x40011400
 8004328:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800432c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004330:	2200      	movs	r2, #0
 8004332:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004336:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800433a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800433e:	4642      	mov	r2, r8
 8004340:	464b      	mov	r3, r9
 8004342:	1891      	adds	r1, r2, r2
 8004344:	6239      	str	r1, [r7, #32]
 8004346:	415b      	adcs	r3, r3
 8004348:	627b      	str	r3, [r7, #36]	@ 0x24
 800434a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800434e:	4641      	mov	r1, r8
 8004350:	1854      	adds	r4, r2, r1
 8004352:	4649      	mov	r1, r9
 8004354:	eb43 0501 	adc.w	r5, r3, r1
 8004358:	f04f 0200 	mov.w	r2, #0
 800435c:	f04f 0300 	mov.w	r3, #0
 8004360:	00eb      	lsls	r3, r5, #3
 8004362:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004366:	00e2      	lsls	r2, r4, #3
 8004368:	4614      	mov	r4, r2
 800436a:	461d      	mov	r5, r3
 800436c:	4643      	mov	r3, r8
 800436e:	18e3      	adds	r3, r4, r3
 8004370:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004374:	464b      	mov	r3, r9
 8004376:	eb45 0303 	adc.w	r3, r5, r3
 800437a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800437e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800438a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800438e:	f04f 0200 	mov.w	r2, #0
 8004392:	f04f 0300 	mov.w	r3, #0
 8004396:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800439a:	4629      	mov	r1, r5
 800439c:	008b      	lsls	r3, r1, #2
 800439e:	4621      	mov	r1, r4
 80043a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043a4:	4621      	mov	r1, r4
 80043a6:	008a      	lsls	r2, r1, #2
 80043a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80043ac:	f7fb ff70 	bl	8000290 <__aeabi_uldivmod>
 80043b0:	4602      	mov	r2, r0
 80043b2:	460b      	mov	r3, r1
 80043b4:	4b60      	ldr	r3, [pc, #384]	@ (8004538 <UART_SetConfig+0x4e4>)
 80043b6:	fba3 2302 	umull	r2, r3, r3, r2
 80043ba:	095b      	lsrs	r3, r3, #5
 80043bc:	011c      	lsls	r4, r3, #4
 80043be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043c2:	2200      	movs	r2, #0
 80043c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80043c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80043cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80043d0:	4642      	mov	r2, r8
 80043d2:	464b      	mov	r3, r9
 80043d4:	1891      	adds	r1, r2, r2
 80043d6:	61b9      	str	r1, [r7, #24]
 80043d8:	415b      	adcs	r3, r3
 80043da:	61fb      	str	r3, [r7, #28]
 80043dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043e0:	4641      	mov	r1, r8
 80043e2:	1851      	adds	r1, r2, r1
 80043e4:	6139      	str	r1, [r7, #16]
 80043e6:	4649      	mov	r1, r9
 80043e8:	414b      	adcs	r3, r1
 80043ea:	617b      	str	r3, [r7, #20]
 80043ec:	f04f 0200 	mov.w	r2, #0
 80043f0:	f04f 0300 	mov.w	r3, #0
 80043f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043f8:	4659      	mov	r1, fp
 80043fa:	00cb      	lsls	r3, r1, #3
 80043fc:	4651      	mov	r1, sl
 80043fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004402:	4651      	mov	r1, sl
 8004404:	00ca      	lsls	r2, r1, #3
 8004406:	4610      	mov	r0, r2
 8004408:	4619      	mov	r1, r3
 800440a:	4603      	mov	r3, r0
 800440c:	4642      	mov	r2, r8
 800440e:	189b      	adds	r3, r3, r2
 8004410:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004414:	464b      	mov	r3, r9
 8004416:	460a      	mov	r2, r1
 8004418:	eb42 0303 	adc.w	r3, r2, r3
 800441c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	67bb      	str	r3, [r7, #120]	@ 0x78
 800442a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800442c:	f04f 0200 	mov.w	r2, #0
 8004430:	f04f 0300 	mov.w	r3, #0
 8004434:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004438:	4649      	mov	r1, r9
 800443a:	008b      	lsls	r3, r1, #2
 800443c:	4641      	mov	r1, r8
 800443e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004442:	4641      	mov	r1, r8
 8004444:	008a      	lsls	r2, r1, #2
 8004446:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800444a:	f7fb ff21 	bl	8000290 <__aeabi_uldivmod>
 800444e:	4602      	mov	r2, r0
 8004450:	460b      	mov	r3, r1
 8004452:	4611      	mov	r1, r2
 8004454:	4b38      	ldr	r3, [pc, #224]	@ (8004538 <UART_SetConfig+0x4e4>)
 8004456:	fba3 2301 	umull	r2, r3, r3, r1
 800445a:	095b      	lsrs	r3, r3, #5
 800445c:	2264      	movs	r2, #100	@ 0x64
 800445e:	fb02 f303 	mul.w	r3, r2, r3
 8004462:	1acb      	subs	r3, r1, r3
 8004464:	011b      	lsls	r3, r3, #4
 8004466:	3332      	adds	r3, #50	@ 0x32
 8004468:	4a33      	ldr	r2, [pc, #204]	@ (8004538 <UART_SetConfig+0x4e4>)
 800446a:	fba2 2303 	umull	r2, r3, r2, r3
 800446e:	095b      	lsrs	r3, r3, #5
 8004470:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004474:	441c      	add	r4, r3
 8004476:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800447a:	2200      	movs	r2, #0
 800447c:	673b      	str	r3, [r7, #112]	@ 0x70
 800447e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004480:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004484:	4642      	mov	r2, r8
 8004486:	464b      	mov	r3, r9
 8004488:	1891      	adds	r1, r2, r2
 800448a:	60b9      	str	r1, [r7, #8]
 800448c:	415b      	adcs	r3, r3
 800448e:	60fb      	str	r3, [r7, #12]
 8004490:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004494:	4641      	mov	r1, r8
 8004496:	1851      	adds	r1, r2, r1
 8004498:	6039      	str	r1, [r7, #0]
 800449a:	4649      	mov	r1, r9
 800449c:	414b      	adcs	r3, r1
 800449e:	607b      	str	r3, [r7, #4]
 80044a0:	f04f 0200 	mov.w	r2, #0
 80044a4:	f04f 0300 	mov.w	r3, #0
 80044a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80044ac:	4659      	mov	r1, fp
 80044ae:	00cb      	lsls	r3, r1, #3
 80044b0:	4651      	mov	r1, sl
 80044b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044b6:	4651      	mov	r1, sl
 80044b8:	00ca      	lsls	r2, r1, #3
 80044ba:	4610      	mov	r0, r2
 80044bc:	4619      	mov	r1, r3
 80044be:	4603      	mov	r3, r0
 80044c0:	4642      	mov	r2, r8
 80044c2:	189b      	adds	r3, r3, r2
 80044c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044c6:	464b      	mov	r3, r9
 80044c8:	460a      	mov	r2, r1
 80044ca:	eb42 0303 	adc.w	r3, r2, r3
 80044ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80044d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80044da:	667a      	str	r2, [r7, #100]	@ 0x64
 80044dc:	f04f 0200 	mov.w	r2, #0
 80044e0:	f04f 0300 	mov.w	r3, #0
 80044e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80044e8:	4649      	mov	r1, r9
 80044ea:	008b      	lsls	r3, r1, #2
 80044ec:	4641      	mov	r1, r8
 80044ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044f2:	4641      	mov	r1, r8
 80044f4:	008a      	lsls	r2, r1, #2
 80044f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80044fa:	f7fb fec9 	bl	8000290 <__aeabi_uldivmod>
 80044fe:	4602      	mov	r2, r0
 8004500:	460b      	mov	r3, r1
 8004502:	4b0d      	ldr	r3, [pc, #52]	@ (8004538 <UART_SetConfig+0x4e4>)
 8004504:	fba3 1302 	umull	r1, r3, r3, r2
 8004508:	095b      	lsrs	r3, r3, #5
 800450a:	2164      	movs	r1, #100	@ 0x64
 800450c:	fb01 f303 	mul.w	r3, r1, r3
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	011b      	lsls	r3, r3, #4
 8004514:	3332      	adds	r3, #50	@ 0x32
 8004516:	4a08      	ldr	r2, [pc, #32]	@ (8004538 <UART_SetConfig+0x4e4>)
 8004518:	fba2 2303 	umull	r2, r3, r2, r3
 800451c:	095b      	lsrs	r3, r3, #5
 800451e:	f003 020f 	and.w	r2, r3, #15
 8004522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4422      	add	r2, r4
 800452a:	609a      	str	r2, [r3, #8]
}
 800452c:	bf00      	nop
 800452e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004532:	46bd      	mov	sp, r7
 8004534:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004538:	51eb851f 	.word	0x51eb851f

0800453c <__NVIC_SetPriority>:
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	4603      	mov	r3, r0
 8004544:	6039      	str	r1, [r7, #0]
 8004546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800454c:	2b00      	cmp	r3, #0
 800454e:	db0a      	blt.n	8004566 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	b2da      	uxtb	r2, r3
 8004554:	490c      	ldr	r1, [pc, #48]	@ (8004588 <__NVIC_SetPriority+0x4c>)
 8004556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800455a:	0112      	lsls	r2, r2, #4
 800455c:	b2d2      	uxtb	r2, r2
 800455e:	440b      	add	r3, r1
 8004560:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004564:	e00a      	b.n	800457c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	b2da      	uxtb	r2, r3
 800456a:	4908      	ldr	r1, [pc, #32]	@ (800458c <__NVIC_SetPriority+0x50>)
 800456c:	79fb      	ldrb	r3, [r7, #7]
 800456e:	f003 030f 	and.w	r3, r3, #15
 8004572:	3b04      	subs	r3, #4
 8004574:	0112      	lsls	r2, r2, #4
 8004576:	b2d2      	uxtb	r2, r2
 8004578:	440b      	add	r3, r1
 800457a:	761a      	strb	r2, [r3, #24]
}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr
 8004588:	e000e100 	.word	0xe000e100
 800458c:	e000ed00 	.word	0xe000ed00

08004590 <drv_cpu_interrupt_prio_set>:
//	HAL_IWDG_Refresh(wdg_handle.handle);
//}


void  drv_cpu_interrupt_prio_set(void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
	/* Service Call interrupt might be configured before kernel start     */
	/* and when its priority is lower or equal to BASEPRI, svc intruction */
	/* causes a Hard Fault.                                               */
	NVIC_SetPriority (SVCall_IRQn, 0U);
 8004594:	2100      	movs	r1, #0
 8004596:	f06f 0004 	mvn.w	r0, #4
 800459a:	f7ff ffcf 	bl	800453c <__NVIC_SetPriority>
#endif
}
 800459e:	bf00      	nop
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045a2:	b480      	push	{r7}
 80045a4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80045a6:	b672      	cpsid	i
}
 80045a8:	bf00      	nop
	//drv_serial_transmit(SERIAL_DEBUG_COMM, (uint8_t*)"[ FLT ] Hardware fault!\n\r",25);
#else
#warning "Error handler print disabled! As no serial_com_bus selected!!"
#endif
	__disable_irq();
  while (1)
 80045aa:	bf00      	nop
 80045ac:	e7fd      	b.n	80045aa <HardFault_Handler+0x8>

080045ae <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80045ae:	b480      	push	{r7}
 80045b0:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80045b2:	b672      	cpsid	i
}
 80045b4:	bf00      	nop
	//drv_serial_transmit(SERIAL_DEBUG_COMM, (uint8_t*)"[ FLT ] Memory mgmt!\n\r",21);
#else
#warning "Error handler print disabled! As no serial_com_bus selected!!"
#endif
	__disable_irq();
  while (1)
 80045b6:	bf00      	nop
 80045b8:	e7fd      	b.n	80045b6 <MemManage_Handler+0x8>

080045ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80045ba:	b480      	push	{r7}
 80045bc:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80045be:	b672      	cpsid	i
}
 80045c0:	bf00      	nop
	//drv_serial_transmit(SERIAL_DEBUG_COMM, (uint8_t*)"[ FLT ] Bus fault!\n\r",19);
#else
#warning "Error handler print disabled! As no serial_com_bus selected!!"
#endif
	__disable_irq();
  while (1)
 80045c2:	bf00      	nop
 80045c4:	e7fd      	b.n	80045c2 <BusFault_Handler+0x8>

080045c6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80045c6:	b480      	push	{r7}
 80045c8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80045ca:	b672      	cpsid	i
}
 80045cc:	bf00      	nop
	//drv_serial_transmit(SERIAL_DEBUG_COMM, (uint8_t*)"[ FLT ] illegal instruction!\n\r",27);
#else
#warning "Error handler print disabled! As no serial_com_bus selected!!"
#endif
	__disable_irq();
  while (1)
 80045ce:	bf00      	nop
 80045d0:	e7fd      	b.n	80045ce <UsageFault_Handler+0x8>
	...

080045d4 <drv_timer_update_handle>:
 *
 *
 *
 * *****************************************************/
void	drv_timer_update_handle(__TYPE_HW_TIMER_HANDLE_TYPE * handle, uint8_t dev_id)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	460b      	mov	r3, r1
 80045de:	70fb      	strb	r3, [r7, #3]
	if( (handle != NULL) && (dev_id < NO_OF_TIMER) )
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00a      	beq.n	80045fc <drv_timer_update_handle+0x28>
 80045e6:	78fb      	ldrb	r3, [r7, #3]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d107      	bne.n	80045fc <drv_timer_update_handle+0x28>
	{
		timer_handle_ref->handle_hw_timer[dev_id] = handle;
 80045ec:	4b06      	ldr	r3, [pc, #24]	@ (8004608 <drv_timer_update_handle+0x34>)
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	78fb      	ldrb	r3, [r7, #3]
 80045f2:	3306      	adds	r3, #6
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4413      	add	r3, r2
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	605a      	str	r2, [r3, #4]
	}
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr
 8004608:	200002a8 	.word	0x200002a8

0800460c <drv_time_get_ticks>:
 *
 *
 *
 * *****************************************************/
uint32_t drv_time_get_ticks(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8004610:	f7fc fda4 	bl	800115c <HAL_GetTick>
 8004614:	4603      	mov	r3, r0
}
 8004616:	4618      	mov	r0, r3
 8004618:	bd80      	pop	{r7, pc}
	...

0800461c <drv_serial_update_handle>:
 *
 *
 *
 * *****************************************************/
void	drv_serial_update_handle(__TYPE_HW_UART_HANDLE_TYPE * handle, uint8_t dev_id)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	460b      	mov	r3, r1
 8004626:	70fb      	strb	r3, [r7, #3]
	if( (handle != NULL) && (dev_id < NO_OF_UART) )
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d008      	beq.n	8004640 <drv_serial_update_handle+0x24>
 800462e:	78fb      	ldrb	r3, [r7, #3]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d805      	bhi.n	8004640 <drv_serial_update_handle+0x24>
	{
		uart_handle_ref.handle_hw_uart[dev_id] = handle;
 8004634:	78fb      	ldrb	r3, [r7, #3]
 8004636:	4a05      	ldr	r2, [pc, #20]	@ (800464c <drv_serial_update_handle+0x30>)
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4413      	add	r3, r2
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	605a      	str	r2, [r3, #4]
	}
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr
 800464c:	200002ac 	.word	0x200002ac

08004650 <drv_serial_init>:
 *
 *
 *
 * *****************************************************/
status_type	drv_serial_init(uint8_t dev_id)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	4603      	mov	r3, r0
 8004658:	71fb      	strb	r3, [r7, #7]
	status_type drv_staus = ERROR_NONE;
 800465a:	2300      	movs	r3, #0
 800465c:	60fb      	str	r3, [r7, #12]

	/* Check if the handles are NULL or not */
	if((uart_handle_ref.handle_hw_uart[dev_id] != NULL) && (dev_id < NO_OF_UART) )
 800465e:	79fb      	ldrb	r3, [r7, #7]
 8004660:	4a10      	ldr	r2, [pc, #64]	@ (80046a4 <drv_serial_init+0x54>)
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4413      	add	r3, r2
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d012      	beq.n	8004692 <drv_serial_init+0x42>
 800466c:	79fb      	ldrb	r3, [r7, #7]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d80f      	bhi.n	8004692 <drv_serial_init+0x42>
	{
		/*Start the communication */
		drv_staus |= UART_Start_Receive_IT(uart_handle_ref.handle_hw_uart[dev_id], &temp_rx_char_buff, 1);
 8004672:	79fb      	ldrb	r3, [r7, #7]
 8004674:	4a0b      	ldr	r2, [pc, #44]	@ (80046a4 <drv_serial_init+0x54>)
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	4413      	add	r3, r2
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	490a      	ldr	r1, [pc, #40]	@ (80046a8 <drv_serial_init+0x58>)
 8004680:	4618      	mov	r0, r3
 8004682:	f7ff fb12 	bl	8003caa <UART_Start_Receive_IT>
 8004686:	4603      	mov	r3, r0
 8004688:	461a      	mov	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	4313      	orrs	r3, r2
 800468e:	60fb      	str	r3, [r7, #12]
 8004690:	e003      	b.n	800469a <drv_serial_init+0x4a>
	}
	else
	{
		drv_staus |= ERROR_OP;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f043 0301 	orr.w	r3, r3, #1
 8004698:	60fb      	str	r3, [r7, #12]
	}

	return drv_staus;
 800469a:	68fb      	ldr	r3, [r7, #12]
}
 800469c:	4618      	mov	r0, r3
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	200002ac 	.word	0x200002ac
 80046a8:	200002cc 	.word	0x200002cc

080046ac <drv_serial_transmit>:
 *
 *
 *
 * *****************************************************/
status_type	drv_serial_transmit(uint8_t dev_id, uint8_t* data, uint16_t len)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	4603      	mov	r3, r0
 80046b4:	6039      	str	r1, [r7, #0]
 80046b6:	71fb      	strb	r3, [r7, #7]
 80046b8:	4613      	mov	r3, r2
 80046ba:	80bb      	strh	r3, [r7, #4]
	status_type status = ERROR_NONE;
 80046bc:	2300      	movs	r3, #0
 80046be:	60fb      	str	r3, [r7, #12]

	/* Send one by one character if the handle is not null */
	if((uart_handle_ref.handle_hw_uart[dev_id] != NULL) && (dev_id < NO_OF_UART) )
 80046c0:	79fb      	ldrb	r3, [r7, #7]
 80046c2:	4a16      	ldr	r2, [pc, #88]	@ (800471c <drv_serial_transmit+0x70>)
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	4413      	add	r3, r2
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d01c      	beq.n	8004708 <drv_serial_transmit+0x5c>
 80046ce:	79fb      	ldrb	r3, [r7, #7]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d819      	bhi.n	8004708 <drv_serial_transmit+0x5c>
	{
		/* Timeout 10mS*/
		for (int i = 0; i<len; i++)
 80046d4:	2300      	movs	r3, #0
 80046d6:	60bb      	str	r3, [r7, #8]
 80046d8:	e011      	b.n	80046fe <drv_serial_transmit+0x52>
		{
			status |= HAL_UART_Transmit(uart_handle_ref.handle_hw_uart[dev_id]
 80046da:	79fb      	ldrb	r3, [r7, #7]
 80046dc:	4a0f      	ldr	r2, [pc, #60]	@ (800471c <drv_serial_transmit+0x70>)
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	4413      	add	r3, r2
 80046e2:	6858      	ldr	r0, [r3, #4]
 80046e4:	230a      	movs	r3, #10
 80046e6:	2201      	movs	r2, #1
 80046e8:	6839      	ldr	r1, [r7, #0]
 80046ea:	f7fe ff1f 	bl	800352c <HAL_UART_Transmit>
 80046ee:	4603      	mov	r3, r0
 80046f0:	461a      	mov	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i<len; i++)
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	3301      	adds	r3, #1
 80046fc:	60bb      	str	r3, [r7, #8]
 80046fe:	88bb      	ldrh	r3, [r7, #4]
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	429a      	cmp	r2, r3
 8004704:	dbe9      	blt.n	80046da <drv_serial_transmit+0x2e>
 8004706:	e003      	b.n	8004710 <drv_serial_transmit+0x64>
										);
		}
	}
	else
	{
		status |= ERROR_OP;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f043 0301 	orr.w	r3, r3, #1
 800470e:	60fb      	str	r3, [r7, #12]

	}

	return status;
 8004710:	68fb      	ldr	r3, [r7, #12]
}
 8004712:	4618      	mov	r0, r3
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	200002ac 	.word	0x200002ac

08004720 <HAL_UART_TxCpltCallback>:
 * *****************************************************/

#if (DEVICE_VARINAT == 1)

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
	/* Not planned for the implementation */
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
	/* Read the character*/
	HAL_UART_Receive_IT(huart, &temp_rx_char_buff, 1);
 800473c:	2201      	movs	r2, #1
 800473e:	490f      	ldr	r1, [pc, #60]	@ (800477c <HAL_UART_RxCpltCallback+0x48>)
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f7fe ff7e 	bl	8003642 <HAL_UART_Receive_IT>

	/* Put the character in queue [ Multiplexed here according the handle type */
	/* NO context switch will happen here so no thread safe needed */
#if (NO_OF_UART > 0)
	if(huart == uart_handle_ref.handle_hw_uart[HW_ID_UART_1])
 8004746:	4b0e      	ldr	r3, [pc, #56]	@ (8004780 <HAL_UART_RxCpltCallback+0x4c>)
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	429a      	cmp	r2, r3
 800474e:	d105      	bne.n	800475c <HAL_UART_RxCpltCallback+0x28>
	{
		ringbuffer_putchar(&ipc_handle_uart_1_drv_rx_handle, temp_rx_char_buff);
 8004750:	4b0a      	ldr	r3, [pc, #40]	@ (800477c <HAL_UART_RxCpltCallback+0x48>)
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	4619      	mov	r1, r3
 8004756:	480b      	ldr	r0, [pc, #44]	@ (8004784 <HAL_UART_RxCpltCallback+0x50>)
 8004758:	f002 fefa 	bl	8007550 <ringbuffer_putchar>
	}
#endif

#if (NO_OF_UART > 1)
	if(huart == uart_handle_ref.handle_hw_uart[HW_ID_UART_2])
 800475c:	4b08      	ldr	r3, [pc, #32]	@ (8004780 <HAL_UART_RxCpltCallback+0x4c>)
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	429a      	cmp	r2, r3
 8004764:	d105      	bne.n	8004772 <HAL_UART_RxCpltCallback+0x3e>
	{
		ringbuffer_putchar(&ipc_handle_uart_2_drv_rx_handle, temp_rx_char_buff);
 8004766:	4b05      	ldr	r3, [pc, #20]	@ (800477c <HAL_UART_RxCpltCallback+0x48>)
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	4619      	mov	r1, r3
 800476c:	4806      	ldr	r0, [pc, #24]	@ (8004788 <HAL_UART_RxCpltCallback+0x54>)
 800476e:	f002 feef 	bl	8007550 <ringbuffer_putchar>
	}
#endif

}
 8004772:	bf00      	nop
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	200002cc 	.word	0x200002cc
 8004780:	200002ac 	.word	0x200002ac
 8004784:	200002f0 	.word	0x200002f0
 8004788:	200002fc 	.word	0x200002fc

0800478c <HAL_UART_ErrorCallback>:


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]

}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <os_add_drv_uart_handle>:
 *
 *
 *
 * *****************************************************/
void os_add_drv_uart_handle	(__TYPE_HW_UART_HANDLE_TYPE * handle, uint8_t hw_id)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	460b      	mov	r3, r1
 80047aa:	70fb      	strb	r3, [r7, #3]
	if(hw_id < NO_OF_UART)
 80047ac:	78fb      	ldrb	r3, [r7, #3]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d805      	bhi.n	80047be <os_add_drv_uart_handle+0x1e>
	{
		handle_os_harware.handle_hw_uart[hw_id] = handle;
 80047b2:	78fb      	ldrb	r3, [r7, #3]
 80047b4:	4a05      	ldr	r2, [pc, #20]	@ (80047cc <os_add_drv_uart_handle+0x2c>)
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	4413      	add	r3, r2
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	605a      	str	r2, [r3, #4]
	}
}
 80047be:	bf00      	nop
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	200002d0 	.word	0x200002d0

080047d0 <os_add_drv_iic_handle>:
 *
 *
 *
 * *****************************************************/
void os_add_drv_iic_handle	(__TYPE_HW_IIC_HANDLE_TYPE * handle, uint8_t hw_id)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	460b      	mov	r3, r1
 80047da:	70fb      	strb	r3, [r7, #3]
	if(hw_id < NO_OF_IIC)
 80047dc:	78fb      	ldrb	r3, [r7, #3]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d106      	bne.n	80047f0 <os_add_drv_iic_handle+0x20>
	{
		handle_os_harware.handle_hw_iic[hw_id] = handle;
 80047e2:	78fb      	ldrb	r3, [r7, #3]
 80047e4:	4a05      	ldr	r2, [pc, #20]	@ (80047fc <os_add_drv_iic_handle+0x2c>)
 80047e6:	3302      	adds	r3, #2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	4413      	add	r3, r2
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	605a      	str	r2, [r3, #4]
	}
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr
 80047fc:	200002d0 	.word	0x200002d0

08004800 <os_add_drv_spi_handle>:
 *
 *
 *
 * *****************************************************/
void os_add_drv_spi_handle	(__TYPE_HW_SPI_HANDLE_TYPE * handle, uint8_t hw_id)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	460b      	mov	r3, r1
 800480a:	70fb      	strb	r3, [r7, #3]
	if(hw_id < NO_OF_SPI)
 800480c:	78fb      	ldrb	r3, [r7, #3]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d105      	bne.n	800481e <os_add_drv_spi_handle+0x1e>
	{
		handle_os_harware.handle_hw_spi[hw_id] = handle;
 8004812:	78fb      	ldrb	r3, [r7, #3]
 8004814:	4905      	ldr	r1, [pc, #20]	@ (800482c <os_add_drv_spi_handle+0x2c>)
 8004816:	3304      	adds	r3, #4
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 800481e:	bf00      	nop
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	200002d0 	.word	0x200002d0

08004830 <os_add_drv_adc_handle>:
 *
 *
 *
 * *****************************************************/
void os_add_drv_adc_handle	(__TYPE_HW_ADC_HANDLE_TYPE * handle, uint8_t hw_id)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	460b      	mov	r3, r1
 800483a:	70fb      	strb	r3, [r7, #3]
	if(hw_id < NO_OF_ADC)
 800483c:	78fb      	ldrb	r3, [r7, #3]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d106      	bne.n	8004850 <os_add_drv_adc_handle+0x20>
	{
		handle_os_harware.handle_hw_adc[hw_id] = handle;
 8004842:	78fb      	ldrb	r3, [r7, #3]
 8004844:	4a05      	ldr	r2, [pc, #20]	@ (800485c <os_add_drv_adc_handle+0x2c>)
 8004846:	3304      	adds	r3, #4
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	4413      	add	r3, r2
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	605a      	str	r2, [r3, #4]
	}
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr
 800485c:	200002d0 	.word	0x200002d0

08004860 <os_add_drv_timer_handle>:
 *
 *
 *
 * *****************************************************/
void os_add_drv_timer_handle	(__TYPE_HW_TIMER_HANDLE_TYPE * handle, uint8_t hw_id)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	460b      	mov	r3, r1
 800486a:	70fb      	strb	r3, [r7, #3]
	if(hw_id < NO_OF_TIMER)
 800486c:	78fb      	ldrb	r3, [r7, #3]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d106      	bne.n	8004880 <os_add_drv_timer_handle+0x20>
	{
		handle_os_harware.handle_hw_timer[hw_id] = handle;
 8004872:	78fb      	ldrb	r3, [r7, #3]
 8004874:	4a05      	ldr	r2, [pc, #20]	@ (800488c <os_add_drv_timer_handle+0x2c>)
 8004876:	3306      	adds	r3, #6
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4413      	add	r3, r2
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	605a      	str	r2, [r3, #4]
	}
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr
 800488c:	200002d0 	.word	0x200002d0

08004890 <os_add_drv_iwdg_handle>:
 *
 *
 *
 * *****************************************************/
void os_add_drv_iwdg_handle	(__TYPE_HW_IWDG_HANDLE_TYPE * handle)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
	if(IWDG_INCLUDE == 1)
	{
		handle_os_harware.handle_hw_iwdg = handle;
 8004898:	4a04      	ldr	r2, [pc, #16]	@ (80048ac <os_add_drv_iwdg_handle+0x1c>)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6193      	str	r3, [r2, #24]
	}
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	200002d0 	.word	0x200002d0

080048b0 <os_entry>:
/**
 * OS entry function give control to kernel and start OS
 *
 */
void os_entry(void)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
	status_type status = ERROR_NONE;
 80048b6:	2300      	movs	r3, #0
 80048b8:	607b      	str	r3, [r7, #4]

	/*
	 * Send the driver handles to each driver
	 *  */
	for(int i = 0; i < NO_OF_UART; i++)
 80048ba:	2300      	movs	r3, #0
 80048bc:	60fb      	str	r3, [r7, #12]
 80048be:	e00d      	b.n	80048dc <os_entry+0x2c>
	{
		drv_serial_update_handle(handle_os_harware.handle_hw_uart[i], i);
 80048c0:	4a1f      	ldr	r2, [pc, #124]	@ (8004940 <os_entry+0x90>)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4413      	add	r3, r2
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	b2d2      	uxtb	r2, r2
 80048ce:	4611      	mov	r1, r2
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7ff fea3 	bl	800461c <drv_serial_update_handle>
	for(int i = 0; i < NO_OF_UART; i++)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	3301      	adds	r3, #1
 80048da:	60fb      	str	r3, [r7, #12]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	ddee      	ble.n	80048c0 <os_entry+0x10>
	}

	for(int i = 0; i < NO_OF_TIMER; i++)
 80048e2:	2300      	movs	r3, #0
 80048e4:	60bb      	str	r3, [r7, #8]
 80048e6:	e00c      	b.n	8004902 <os_entry+0x52>
	{
		drv_timer_update_handle(handle_os_harware.handle_hw_timer[i], i);
 80048e8:	4a15      	ldr	r2, [pc, #84]	@ (8004940 <os_entry+0x90>)
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	3306      	adds	r3, #6
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	68b9      	ldr	r1, [r7, #8]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7ff fe6c 	bl	80045d4 <drv_timer_update_handle>
	for(int i = 0; i < NO_OF_TIMER; i++)
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	3301      	adds	r3, #1
 8004900:	60bb      	str	r3, [r7, #8]
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	2b00      	cmp	r3, #0
 8004906:	ddef      	ble.n	80048e8 <os_entry+0x38>


	/*
	 * Initialize all the message queues
	 * */
	status |= ipc_mqueue_init();
 8004908:	f000 f81c 	bl	8004944 <ipc_mqueue_init>
 800490c:	4602      	mov	r2, r0
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4313      	orrs	r3, r2
 8004912:	607b      	str	r3, [r7, #4]

	/*
	 * Register all the kernel threads
	 * */
	status |= os_kernel_thread_register();
 8004914:	f002 fefa 	bl	800770c <os_kernel_thread_register>
 8004918:	4602      	mov	r2, r0
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4313      	orrs	r3, r2
 800491e:	607b      	str	r3, [r7, #4]

	status |= app_main();
 8004920:	f002 ffe4 	bl	80078ec <app_main>
 8004924:	4602      	mov	r2, r0
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4313      	orrs	r3, r2
 800492a:	607b      	str	r3, [r7, #4]

	drv_cpu_interrupt_prio_set();
 800492c:	f7ff fe30 	bl	8004590 <drv_cpu_interrupt_prio_set>

	if(status == ERROR_NONE)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d102      	bne.n	800493c <os_entry+0x8c>
	{
		/*Start the schedular */
		vTaskStartScheduler();
 8004936:	f001 f85d 	bl	80059f4 <vTaskStartScheduler>
	}



	/* Program shouldn't go after that  */
	while(1)
 800493a:	bf00      	nop
 800493c:	bf00      	nop
 800493e:	e7fd      	b.n	800493c <os_entry+0x8c>
 8004940:	200002d0 	.word	0x200002d0

08004944 <ipc_mqueue_init>:
 *
 *
 *
 * *****************************************************/
status_type 	ipc_mqueue_init(void)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
	type_kernel_status status = ERROR_NONE;
 800494a:	2300      	movs	r3, #0
 800494c:	607b      	str	r3, [r7, #4]


#if(NO_OF_UART > 0)
	ringbuffer_init(&ipc_handle_uart_1_drv_rx_handle, ipc_handle_uart_1_drv_rx_storage, CONF_IPC_RD_UART_1_RX_SIZE);
 800494e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004952:	490d      	ldr	r1, [pc, #52]	@ (8004988 <ipc_mqueue_init+0x44>)
 8004954:	480d      	ldr	r0, [pc, #52]	@ (800498c <ipc_mqueue_init+0x48>)
 8004956:	f002 fea1 	bl	800769c <ringbuffer_init>
	ringbuffer_init(&ipc_handle_printk_buffer, ipc_handle_printk_buffer_storage, CONF_IPC_PRINTK_BUFFER_SIZE);
 800495a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800495e:	490c      	ldr	r1, [pc, #48]	@ (8004990 <ipc_mqueue_init+0x4c>)
 8004960:	480c      	ldr	r0, [pc, #48]	@ (8004994 <ipc_mqueue_init+0x50>)
 8004962:	f002 fe9b 	bl	800769c <ringbuffer_init>
#endif

#if(NO_OF_UART > 1)
	ringbuffer_init(&ipc_handle_uart_2_drv_rx_handle, ipc_handle_uart_2_drv_rx_storage, CONF_IPC_RD_UART_2_RX_SIZE);
 8004966:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800496a:	490b      	ldr	r1, [pc, #44]	@ (8004998 <ipc_mqueue_init+0x54>)
 800496c:	480b      	ldr	r0, [pc, #44]	@ (800499c <ipc_mqueue_init+0x58>)
 800496e:	f002 fe95 	bl	800769c <ringbuffer_init>
	ringbuffer_init(&ipc_handle_uart_2_drv_tx_handle, ipc_handle_uart_2_drv_tx_storage, CONF_IPC_RD_UART_2_TX_SIZE);
 8004972:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004976:	490a      	ldr	r1, [pc, #40]	@ (80049a0 <ipc_mqueue_init+0x5c>)
 8004978:	480a      	ldr	r0, [pc, #40]	@ (80049a4 <ipc_mqueue_init+0x60>)
 800497a:	f002 fe8f 	bl	800769c <ringbuffer_init>
#endif
	/* USB DRIVER 1 ISR to canopen read funciton linkage */



	return status;
 800497e:	687b      	ldr	r3, [r7, #4]
}
 8004980:	4618      	mov	r0, r3
 8004982:	3708      	adds	r7, #8
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	20000308 	.word	0x20000308
 800498c:	200002f0 	.word	0x200002f0
 8004990:	20000714 	.word	0x20000714
 8004994:	20000708 	.word	0x20000708
 8004998:	20000b20 	.word	0x20000b20
 800499c:	200002fc 	.word	0x200002fc
 80049a0:	20000f20 	.word	0x20000f20
 80049a4:	20000b14 	.word	0x20000b14

080049a8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80049ac:	4b05      	ldr	r3, [pc, #20]	@ (80049c4 <SysTick_Handler+0x1c>)
 80049ae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80049b0:	f001 fc84 	bl	80062bc <xTaskGetSchedulerState>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d001      	beq.n	80049be <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80049ba:	f002 fa7d 	bl	8006eb8 <xPortSysTickHandler>
  }
}
 80049be:	bf00      	nop
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	e000e010 	.word	0xe000e010

080049c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	4a07      	ldr	r2, [pc, #28]	@ (80049f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80049d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	4a06      	ldr	r2, [pc, #24]	@ (80049f8 <vApplicationGetIdleTaskMemory+0x30>)
 80049de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049e6:	601a      	str	r2, [r3, #0]
}
 80049e8:	bf00      	nop
 80049ea:	3714      	adds	r7, #20
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr
 80049f4:	20001320 	.word	0x20001320
 80049f8:	200013c8 	.word	0x200013c8

080049fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	4a07      	ldr	r2, [pc, #28]	@ (8004a28 <vApplicationGetTimerTaskMemory+0x2c>)
 8004a0c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	4a06      	ldr	r2, [pc, #24]	@ (8004a2c <vApplicationGetTimerTaskMemory+0x30>)
 8004a12:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a1a:	601a      	str	r2, [r3, #0]
}
 8004a1c:	bf00      	nop
 8004a1e:	3714      	adds	r7, #20
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	20001bc8 	.word	0x20001bc8
 8004a2c:	20001c70 	.word	0x20001c70

08004a30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f103 0208 	add.w	r2, r3, #8
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004a48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f103 0208 	add.w	r2, r3, #8
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f103 0208 	add.w	r2, r3, #8
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a7e:	bf00      	nop
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b085      	sub	sp, #20
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
 8004a92:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	689a      	ldr	r2, [r3, #8]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	1c5a      	adds	r2, r3, #1
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	601a      	str	r2, [r3, #0]
}
 8004ac6:	bf00      	nop
 8004ac8:	3714      	adds	r7, #20
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b085      	sub	sp, #20
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
 8004ada:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ae8:	d103      	bne.n	8004af2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	60fb      	str	r3, [r7, #12]
 8004af0:	e00c      	b.n	8004b0c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	3308      	adds	r3, #8
 8004af6:	60fb      	str	r3, [r7, #12]
 8004af8:	e002      	b.n	8004b00 <vListInsert+0x2e>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	60fb      	str	r3, [r7, #12]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d2f6      	bcs.n	8004afa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	685a      	ldr	r2, [r3, #4]
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	1c5a      	adds	r2, r3, #1
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	601a      	str	r2, [r3, #0]
}
 8004b38:	bf00      	nop
 8004b3a:	3714      	adds	r7, #20
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	6892      	ldr	r2, [r2, #8]
 8004b5a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	6852      	ldr	r2, [r2, #4]
 8004b64:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d103      	bne.n	8004b78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	689a      	ldr	r2, [r3, #8]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	1e5a      	subs	r2, r3, #1
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3714      	adds	r7, #20
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10b      	bne.n	8004bc4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004bac:	f04f 0310 	mov.w	r3, #16
 8004bb0:	f383 8811 	msr	BASEPRI, r3
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004bbe:	bf00      	nop
 8004bc0:	bf00      	nop
 8004bc2:	e7fd      	b.n	8004bc0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004bc4:	f002 f8e8 	bl	8006d98 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bd0:	68f9      	ldr	r1, [r7, #12]
 8004bd2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004bd4:	fb01 f303 	mul.w	r3, r1, r3
 8004bd8:	441a      	add	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	68f9      	ldr	r1, [r7, #12]
 8004bf8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004bfa:	fb01 f303 	mul.w	r3, r1, r3
 8004bfe:	441a      	add	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	22ff      	movs	r2, #255	@ 0xff
 8004c08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	22ff      	movs	r2, #255	@ 0xff
 8004c10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d114      	bne.n	8004c44 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d01a      	beq.n	8004c58 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	3310      	adds	r3, #16
 8004c26:	4618      	mov	r0, r3
 8004c28:	f001 f982 	bl	8005f30 <xTaskRemoveFromEventList>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d012      	beq.n	8004c58 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004c32:	4b0d      	ldr	r3, [pc, #52]	@ (8004c68 <xQueueGenericReset+0xd0>)
 8004c34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c38:	601a      	str	r2, [r3, #0]
 8004c3a:	f3bf 8f4f 	dsb	sy
 8004c3e:	f3bf 8f6f 	isb	sy
 8004c42:	e009      	b.n	8004c58 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	3310      	adds	r3, #16
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7ff fef1 	bl	8004a30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	3324      	adds	r3, #36	@ 0x24
 8004c52:	4618      	mov	r0, r3
 8004c54:	f7ff feec 	bl	8004a30 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004c58:	f002 f8d0 	bl	8006dfc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004c5c:	2301      	movs	r3, #1
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	e000ed04 	.word	0xe000ed04

08004c6c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b08e      	sub	sp, #56	@ 0x38
 8004c70:	af02      	add	r7, sp, #8
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]
 8004c78:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d10b      	bne.n	8004c98 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004c80:	f04f 0310 	mov.w	r3, #16
 8004c84:	f383 8811 	msr	BASEPRI, r3
 8004c88:	f3bf 8f6f 	isb	sy
 8004c8c:	f3bf 8f4f 	dsb	sy
 8004c90:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004c92:	bf00      	nop
 8004c94:	bf00      	nop
 8004c96:	e7fd      	b.n	8004c94 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10b      	bne.n	8004cb6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004c9e:	f04f 0310 	mov.w	r3, #16
 8004ca2:	f383 8811 	msr	BASEPRI, r3
 8004ca6:	f3bf 8f6f 	isb	sy
 8004caa:	f3bf 8f4f 	dsb	sy
 8004cae:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004cb0:	bf00      	nop
 8004cb2:	bf00      	nop
 8004cb4:	e7fd      	b.n	8004cb2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d002      	beq.n	8004cc2 <xQueueGenericCreateStatic+0x56>
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <xQueueGenericCreateStatic+0x5a>
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e000      	b.n	8004cc8 <xQueueGenericCreateStatic+0x5c>
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d10b      	bne.n	8004ce4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004ccc:	f04f 0310 	mov.w	r3, #16
 8004cd0:	f383 8811 	msr	BASEPRI, r3
 8004cd4:	f3bf 8f6f 	isb	sy
 8004cd8:	f3bf 8f4f 	dsb	sy
 8004cdc:	623b      	str	r3, [r7, #32]
}
 8004cde:	bf00      	nop
 8004ce0:	bf00      	nop
 8004ce2:	e7fd      	b.n	8004ce0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d102      	bne.n	8004cf0 <xQueueGenericCreateStatic+0x84>
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <xQueueGenericCreateStatic+0x88>
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e000      	b.n	8004cf6 <xQueueGenericCreateStatic+0x8a>
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d10b      	bne.n	8004d12 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004cfa:	f04f 0310 	mov.w	r3, #16
 8004cfe:	f383 8811 	msr	BASEPRI, r3
 8004d02:	f3bf 8f6f 	isb	sy
 8004d06:	f3bf 8f4f 	dsb	sy
 8004d0a:	61fb      	str	r3, [r7, #28]
}
 8004d0c:	bf00      	nop
 8004d0e:	bf00      	nop
 8004d10:	e7fd      	b.n	8004d0e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004d12:	2350      	movs	r3, #80	@ 0x50
 8004d14:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	2b50      	cmp	r3, #80	@ 0x50
 8004d1a:	d00b      	beq.n	8004d34 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004d1c:	f04f 0310 	mov.w	r3, #16
 8004d20:	f383 8811 	msr	BASEPRI, r3
 8004d24:	f3bf 8f6f 	isb	sy
 8004d28:	f3bf 8f4f 	dsb	sy
 8004d2c:	61bb      	str	r3, [r7, #24]
}
 8004d2e:	bf00      	nop
 8004d30:	bf00      	nop
 8004d32:	e7fd      	b.n	8004d30 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004d34:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00d      	beq.n	8004d5c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d48:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d4e:	9300      	str	r3, [sp, #0]
 8004d50:	4613      	mov	r3, r2
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	68b9      	ldr	r1, [r7, #8]
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	f000 f805 	bl	8004d66 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3730      	adds	r7, #48	@ 0x30
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b084      	sub	sp, #16
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	60f8      	str	r0, [r7, #12]
 8004d6e:	60b9      	str	r1, [r7, #8]
 8004d70:	607a      	str	r2, [r7, #4]
 8004d72:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d103      	bne.n	8004d82 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	69ba      	ldr	r2, [r7, #24]
 8004d7e:	601a      	str	r2, [r3, #0]
 8004d80:	e002      	b.n	8004d88 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004d94:	2101      	movs	r1, #1
 8004d96:	69b8      	ldr	r0, [r7, #24]
 8004d98:	f7ff fefe 	bl	8004b98 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	78fa      	ldrb	r2, [r7, #3]
 8004da0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004da4:	bf00      	nop
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b08e      	sub	sp, #56	@ 0x38
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
 8004db8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d10b      	bne.n	8004de0 <xQueueGenericSend+0x34>
	__asm volatile
 8004dc8:	f04f 0310 	mov.w	r3, #16
 8004dcc:	f383 8811 	msr	BASEPRI, r3
 8004dd0:	f3bf 8f6f 	isb	sy
 8004dd4:	f3bf 8f4f 	dsb	sy
 8004dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004dda:	bf00      	nop
 8004ddc:	bf00      	nop
 8004dde:	e7fd      	b.n	8004ddc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d103      	bne.n	8004dee <xQueueGenericSend+0x42>
 8004de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <xQueueGenericSend+0x46>
 8004dee:	2301      	movs	r3, #1
 8004df0:	e000      	b.n	8004df4 <xQueueGenericSend+0x48>
 8004df2:	2300      	movs	r3, #0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10b      	bne.n	8004e10 <xQueueGenericSend+0x64>
	__asm volatile
 8004df8:	f04f 0310 	mov.w	r3, #16
 8004dfc:	f383 8811 	msr	BASEPRI, r3
 8004e00:	f3bf 8f6f 	isb	sy
 8004e04:	f3bf 8f4f 	dsb	sy
 8004e08:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004e0a:	bf00      	nop
 8004e0c:	bf00      	nop
 8004e0e:	e7fd      	b.n	8004e0c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d103      	bne.n	8004e1e <xQueueGenericSend+0x72>
 8004e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d101      	bne.n	8004e22 <xQueueGenericSend+0x76>
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e000      	b.n	8004e24 <xQueueGenericSend+0x78>
 8004e22:	2300      	movs	r3, #0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10b      	bne.n	8004e40 <xQueueGenericSend+0x94>
	__asm volatile
 8004e28:	f04f 0310 	mov.w	r3, #16
 8004e2c:	f383 8811 	msr	BASEPRI, r3
 8004e30:	f3bf 8f6f 	isb	sy
 8004e34:	f3bf 8f4f 	dsb	sy
 8004e38:	623b      	str	r3, [r7, #32]
}
 8004e3a:	bf00      	nop
 8004e3c:	bf00      	nop
 8004e3e:	e7fd      	b.n	8004e3c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e40:	f001 fa3c 	bl	80062bc <xTaskGetSchedulerState>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d102      	bne.n	8004e50 <xQueueGenericSend+0xa4>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d101      	bne.n	8004e54 <xQueueGenericSend+0xa8>
 8004e50:	2301      	movs	r3, #1
 8004e52:	e000      	b.n	8004e56 <xQueueGenericSend+0xaa>
 8004e54:	2300      	movs	r3, #0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10b      	bne.n	8004e72 <xQueueGenericSend+0xc6>
	__asm volatile
 8004e5a:	f04f 0310 	mov.w	r3, #16
 8004e5e:	f383 8811 	msr	BASEPRI, r3
 8004e62:	f3bf 8f6f 	isb	sy
 8004e66:	f3bf 8f4f 	dsb	sy
 8004e6a:	61fb      	str	r3, [r7, #28]
}
 8004e6c:	bf00      	nop
 8004e6e:	bf00      	nop
 8004e70:	e7fd      	b.n	8004e6e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e72:	f001 ff91 	bl	8006d98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d302      	bcc.n	8004e88 <xQueueGenericSend+0xdc>
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d129      	bne.n	8004edc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e88:	683a      	ldr	r2, [r7, #0]
 8004e8a:	68b9      	ldr	r1, [r7, #8]
 8004e8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e8e:	f000 fa0f 	bl	80052b0 <prvCopyDataToQueue>
 8004e92:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d010      	beq.n	8004ebe <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e9e:	3324      	adds	r3, #36	@ 0x24
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f001 f845 	bl	8005f30 <xTaskRemoveFromEventList>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d013      	beq.n	8004ed4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004eac:	4b3f      	ldr	r3, [pc, #252]	@ (8004fac <xQueueGenericSend+0x200>)
 8004eae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	f3bf 8f4f 	dsb	sy
 8004eb8:	f3bf 8f6f 	isb	sy
 8004ebc:	e00a      	b.n	8004ed4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d007      	beq.n	8004ed4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004ec4:	4b39      	ldr	r3, [pc, #228]	@ (8004fac <xQueueGenericSend+0x200>)
 8004ec6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004eca:	601a      	str	r2, [r3, #0]
 8004ecc:	f3bf 8f4f 	dsb	sy
 8004ed0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004ed4:	f001 ff92 	bl	8006dfc <vPortExitCritical>
				return pdPASS;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e063      	b.n	8004fa4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d103      	bne.n	8004eea <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ee2:	f001 ff8b 	bl	8006dfc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	e05c      	b.n	8004fa4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004eea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d106      	bne.n	8004efe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ef0:	f107 0314 	add.w	r3, r7, #20
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f001 f87f 	bl	8005ff8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004efa:	2301      	movs	r3, #1
 8004efc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004efe:	f001 ff7d 	bl	8006dfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f02:	f000 fde7 	bl	8005ad4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f06:	f001 ff47 	bl	8006d98 <vPortEnterCritical>
 8004f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f10:	b25b      	sxtb	r3, r3
 8004f12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f16:	d103      	bne.n	8004f20 <xQueueGenericSend+0x174>
 8004f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f26:	b25b      	sxtb	r3, r3
 8004f28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f2c:	d103      	bne.n	8004f36 <xQueueGenericSend+0x18a>
 8004f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f36:	f001 ff61 	bl	8006dfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f3a:	1d3a      	adds	r2, r7, #4
 8004f3c:	f107 0314 	add.w	r3, r7, #20
 8004f40:	4611      	mov	r1, r2
 8004f42:	4618      	mov	r0, r3
 8004f44:	f001 f86e 	bl	8006024 <xTaskCheckForTimeOut>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d124      	bne.n	8004f98 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004f4e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f50:	f000 faa6 	bl	80054a0 <prvIsQueueFull>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d018      	beq.n	8004f8c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f5c:	3310      	adds	r3, #16
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	4611      	mov	r1, r2
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 ff92 	bl	8005e8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004f68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f6a:	f000 fa31 	bl	80053d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004f6e:	f000 fdbf 	bl	8005af0 <xTaskResumeAll>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f47f af7c 	bne.w	8004e72 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8004fac <xQueueGenericSend+0x200>)
 8004f7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f80:	601a      	str	r2, [r3, #0]
 8004f82:	f3bf 8f4f 	dsb	sy
 8004f86:	f3bf 8f6f 	isb	sy
 8004f8a:	e772      	b.n	8004e72 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004f8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f8e:	f000 fa1f 	bl	80053d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f92:	f000 fdad 	bl	8005af0 <xTaskResumeAll>
 8004f96:	e76c      	b.n	8004e72 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004f98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f9a:	f000 fa19 	bl	80053d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f9e:	f000 fda7 	bl	8005af0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004fa2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3738      	adds	r7, #56	@ 0x38
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	e000ed04 	.word	0xe000ed04

08004fb0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b090      	sub	sp, #64	@ 0x40
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	607a      	str	r2, [r7, #4]
 8004fbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d10b      	bne.n	8004fe0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004fc8:	f04f 0310 	mov.w	r3, #16
 8004fcc:	f383 8811 	msr	BASEPRI, r3
 8004fd0:	f3bf 8f6f 	isb	sy
 8004fd4:	f3bf 8f4f 	dsb	sy
 8004fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004fda:	bf00      	nop
 8004fdc:	bf00      	nop
 8004fde:	e7fd      	b.n	8004fdc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d103      	bne.n	8004fee <xQueueGenericSendFromISR+0x3e>
 8004fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <xQueueGenericSendFromISR+0x42>
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e000      	b.n	8004ff4 <xQueueGenericSendFromISR+0x44>
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d10b      	bne.n	8005010 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004ff8:	f04f 0310 	mov.w	r3, #16
 8004ffc:	f383 8811 	msr	BASEPRI, r3
 8005000:	f3bf 8f6f 	isb	sy
 8005004:	f3bf 8f4f 	dsb	sy
 8005008:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800500a:	bf00      	nop
 800500c:	bf00      	nop
 800500e:	e7fd      	b.n	800500c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	2b02      	cmp	r3, #2
 8005014:	d103      	bne.n	800501e <xQueueGenericSendFromISR+0x6e>
 8005016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800501a:	2b01      	cmp	r3, #1
 800501c:	d101      	bne.n	8005022 <xQueueGenericSendFromISR+0x72>
 800501e:	2301      	movs	r3, #1
 8005020:	e000      	b.n	8005024 <xQueueGenericSendFromISR+0x74>
 8005022:	2300      	movs	r3, #0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d10b      	bne.n	8005040 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005028:	f04f 0310 	mov.w	r3, #16
 800502c:	f383 8811 	msr	BASEPRI, r3
 8005030:	f3bf 8f6f 	isb	sy
 8005034:	f3bf 8f4f 	dsb	sy
 8005038:	623b      	str	r3, [r7, #32]
}
 800503a:	bf00      	nop
 800503c:	bf00      	nop
 800503e:	e7fd      	b.n	800503c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005040:	f001 ff8a 	bl	8006f58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005044:	f3ef 8211 	mrs	r2, BASEPRI
 8005048:	f04f 0310 	mov.w	r3, #16
 800504c:	f383 8811 	msr	BASEPRI, r3
 8005050:	f3bf 8f6f 	isb	sy
 8005054:	f3bf 8f4f 	dsb	sy
 8005058:	61fa      	str	r2, [r7, #28]
 800505a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800505c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800505e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005062:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005068:	429a      	cmp	r2, r3
 800506a:	d302      	bcc.n	8005072 <xQueueGenericSendFromISR+0xc2>
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	2b02      	cmp	r3, #2
 8005070:	d12f      	bne.n	80050d2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005074:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005078:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800507c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800507e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005080:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005082:	683a      	ldr	r2, [r7, #0]
 8005084:	68b9      	ldr	r1, [r7, #8]
 8005086:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005088:	f000 f912 	bl	80052b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800508c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005090:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005094:	d112      	bne.n	80050bc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800509a:	2b00      	cmp	r3, #0
 800509c:	d016      	beq.n	80050cc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800509e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050a0:	3324      	adds	r3, #36	@ 0x24
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 ff44 	bl	8005f30 <xTaskRemoveFromEventList>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00e      	beq.n	80050cc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00b      	beq.n	80050cc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	601a      	str	r2, [r3, #0]
 80050ba:	e007      	b.n	80050cc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80050bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80050c0:	3301      	adds	r3, #1
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	b25a      	sxtb	r2, r3
 80050c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80050cc:	2301      	movs	r3, #1
 80050ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80050d0:	e001      	b.n	80050d6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80050d2:	2300      	movs	r3, #0
 80050d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050d8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80050e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80050e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3740      	adds	r7, #64	@ 0x40
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b08c      	sub	sp, #48	@ 0x30
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80050f8:	2300      	movs	r3, #0
 80050fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10b      	bne.n	800511e <xQueueReceive+0x32>
	__asm volatile
 8005106:	f04f 0310 	mov.w	r3, #16
 800510a:	f383 8811 	msr	BASEPRI, r3
 800510e:	f3bf 8f6f 	isb	sy
 8005112:	f3bf 8f4f 	dsb	sy
 8005116:	623b      	str	r3, [r7, #32]
}
 8005118:	bf00      	nop
 800511a:	bf00      	nop
 800511c:	e7fd      	b.n	800511a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d103      	bne.n	800512c <xQueueReceive+0x40>
 8005124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005128:	2b00      	cmp	r3, #0
 800512a:	d101      	bne.n	8005130 <xQueueReceive+0x44>
 800512c:	2301      	movs	r3, #1
 800512e:	e000      	b.n	8005132 <xQueueReceive+0x46>
 8005130:	2300      	movs	r3, #0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10b      	bne.n	800514e <xQueueReceive+0x62>
	__asm volatile
 8005136:	f04f 0310 	mov.w	r3, #16
 800513a:	f383 8811 	msr	BASEPRI, r3
 800513e:	f3bf 8f6f 	isb	sy
 8005142:	f3bf 8f4f 	dsb	sy
 8005146:	61fb      	str	r3, [r7, #28]
}
 8005148:	bf00      	nop
 800514a:	bf00      	nop
 800514c:	e7fd      	b.n	800514a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800514e:	f001 f8b5 	bl	80062bc <xTaskGetSchedulerState>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d102      	bne.n	800515e <xQueueReceive+0x72>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <xQueueReceive+0x76>
 800515e:	2301      	movs	r3, #1
 8005160:	e000      	b.n	8005164 <xQueueReceive+0x78>
 8005162:	2300      	movs	r3, #0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d10b      	bne.n	8005180 <xQueueReceive+0x94>
	__asm volatile
 8005168:	f04f 0310 	mov.w	r3, #16
 800516c:	f383 8811 	msr	BASEPRI, r3
 8005170:	f3bf 8f6f 	isb	sy
 8005174:	f3bf 8f4f 	dsb	sy
 8005178:	61bb      	str	r3, [r7, #24]
}
 800517a:	bf00      	nop
 800517c:	bf00      	nop
 800517e:	e7fd      	b.n	800517c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005180:	f001 fe0a 	bl	8006d98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005188:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800518a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800518c:	2b00      	cmp	r3, #0
 800518e:	d01f      	beq.n	80051d0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005190:	68b9      	ldr	r1, [r7, #8]
 8005192:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005194:	f000 f8f6 	bl	8005384 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519a:	1e5a      	subs	r2, r3, #1
 800519c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800519e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00f      	beq.n	80051c8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051aa:	3310      	adds	r3, #16
 80051ac:	4618      	mov	r0, r3
 80051ae:	f000 febf 	bl	8005f30 <xTaskRemoveFromEventList>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d007      	beq.n	80051c8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80051b8:	4b3c      	ldr	r3, [pc, #240]	@ (80052ac <xQueueReceive+0x1c0>)
 80051ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051be:	601a      	str	r2, [r3, #0]
 80051c0:	f3bf 8f4f 	dsb	sy
 80051c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80051c8:	f001 fe18 	bl	8006dfc <vPortExitCritical>
				return pdPASS;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e069      	b.n	80052a4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d103      	bne.n	80051de <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80051d6:	f001 fe11 	bl	8006dfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80051da:	2300      	movs	r3, #0
 80051dc:	e062      	b.n	80052a4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80051de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d106      	bne.n	80051f2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80051e4:	f107 0310 	add.w	r3, r7, #16
 80051e8:	4618      	mov	r0, r3
 80051ea:	f000 ff05 	bl	8005ff8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80051ee:	2301      	movs	r3, #1
 80051f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80051f2:	f001 fe03 	bl	8006dfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80051f6:	f000 fc6d 	bl	8005ad4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80051fa:	f001 fdcd 	bl	8006d98 <vPortEnterCritical>
 80051fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005200:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005204:	b25b      	sxtb	r3, r3
 8005206:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800520a:	d103      	bne.n	8005214 <xQueueReceive+0x128>
 800520c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800520e:	2200      	movs	r2, #0
 8005210:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005216:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800521a:	b25b      	sxtb	r3, r3
 800521c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005220:	d103      	bne.n	800522a <xQueueReceive+0x13e>
 8005222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005224:	2200      	movs	r2, #0
 8005226:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800522a:	f001 fde7 	bl	8006dfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800522e:	1d3a      	adds	r2, r7, #4
 8005230:	f107 0310 	add.w	r3, r7, #16
 8005234:	4611      	mov	r1, r2
 8005236:	4618      	mov	r0, r3
 8005238:	f000 fef4 	bl	8006024 <xTaskCheckForTimeOut>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d123      	bne.n	800528a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005242:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005244:	f000 f916 	bl	8005474 <prvIsQueueEmpty>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d017      	beq.n	800527e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800524e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005250:	3324      	adds	r3, #36	@ 0x24
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	4611      	mov	r1, r2
 8005256:	4618      	mov	r0, r3
 8005258:	f000 fe18 	bl	8005e8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800525c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800525e:	f000 f8b7 	bl	80053d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005262:	f000 fc45 	bl	8005af0 <xTaskResumeAll>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d189      	bne.n	8005180 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800526c:	4b0f      	ldr	r3, [pc, #60]	@ (80052ac <xQueueReceive+0x1c0>)
 800526e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005272:	601a      	str	r2, [r3, #0]
 8005274:	f3bf 8f4f 	dsb	sy
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	e780      	b.n	8005180 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800527e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005280:	f000 f8a6 	bl	80053d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005284:	f000 fc34 	bl	8005af0 <xTaskResumeAll>
 8005288:	e77a      	b.n	8005180 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800528a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800528c:	f000 f8a0 	bl	80053d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005290:	f000 fc2e 	bl	8005af0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005294:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005296:	f000 f8ed 	bl	8005474 <prvIsQueueEmpty>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	f43f af6f 	beq.w	8005180 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80052a2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3730      	adds	r7, #48	@ 0x30
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	e000ed04 	.word	0xe000ed04

080052b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80052bc:	2300      	movs	r3, #0
 80052be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10d      	bne.n	80052ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d14d      	bne.n	8005372 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	4618      	mov	r0, r3
 80052dc:	f001 f80c 	bl	80062f8 <xTaskPriorityDisinherit>
 80052e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	609a      	str	r2, [r3, #8]
 80052e8:	e043      	b.n	8005372 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d119      	bne.n	8005324 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6858      	ldr	r0, [r3, #4]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f8:	461a      	mov	r2, r3
 80052fa:	68b9      	ldr	r1, [r7, #8]
 80052fc:	f002 fbd6 	bl	8007aac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005308:	441a      	add	r2, r3
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	429a      	cmp	r2, r3
 8005318:	d32b      	bcc.n	8005372 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	605a      	str	r2, [r3, #4]
 8005322:	e026      	b.n	8005372 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	68d8      	ldr	r0, [r3, #12]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800532c:	461a      	mov	r2, r3
 800532e:	68b9      	ldr	r1, [r7, #8]
 8005330:	f002 fbbc 	bl	8007aac <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	68da      	ldr	r2, [r3, #12]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800533c:	425b      	negs	r3, r3
 800533e:	441a      	add	r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	68da      	ldr	r2, [r3, #12]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	429a      	cmp	r2, r3
 800534e:	d207      	bcs.n	8005360 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	689a      	ldr	r2, [r3, #8]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005358:	425b      	negs	r3, r3
 800535a:	441a      	add	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b02      	cmp	r3, #2
 8005364:	d105      	bne.n	8005372 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d002      	beq.n	8005372 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	3b01      	subs	r3, #1
 8005370:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	1c5a      	adds	r2, r3, #1
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800537a:	697b      	ldr	r3, [r7, #20]
}
 800537c:	4618      	mov	r0, r3
 800537e:	3718      	adds	r7, #24
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005392:	2b00      	cmp	r3, #0
 8005394:	d018      	beq.n	80053c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	68da      	ldr	r2, [r3, #12]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800539e:	441a      	add	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	68da      	ldr	r2, [r3, #12]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d303      	bcc.n	80053b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	68d9      	ldr	r1, [r3, #12]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c0:	461a      	mov	r2, r3
 80053c2:	6838      	ldr	r0, [r7, #0]
 80053c4:	f002 fb72 	bl	8007aac <memcpy>
	}
}
 80053c8:	bf00      	nop
 80053ca:	3708      	adds	r7, #8
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80053d8:	f001 fcde 	bl	8006d98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80053e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80053e4:	e011      	b.n	800540a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d012      	beq.n	8005414 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	3324      	adds	r3, #36	@ 0x24
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 fd9c 	bl	8005f30 <xTaskRemoveFromEventList>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80053fe:	f000 fe75 	bl	80060ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005402:	7bfb      	ldrb	r3, [r7, #15]
 8005404:	3b01      	subs	r3, #1
 8005406:	b2db      	uxtb	r3, r3
 8005408:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800540a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800540e:	2b00      	cmp	r3, #0
 8005410:	dce9      	bgt.n	80053e6 <prvUnlockQueue+0x16>
 8005412:	e000      	b.n	8005416 <prvUnlockQueue+0x46>
					break;
 8005414:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	22ff      	movs	r2, #255	@ 0xff
 800541a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800541e:	f001 fced 	bl	8006dfc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005422:	f001 fcb9 	bl	8006d98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800542c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800542e:	e011      	b.n	8005454 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d012      	beq.n	800545e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	3310      	adds	r3, #16
 800543c:	4618      	mov	r0, r3
 800543e:	f000 fd77 	bl	8005f30 <xTaskRemoveFromEventList>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d001      	beq.n	800544c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005448:	f000 fe50 	bl	80060ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800544c:	7bbb      	ldrb	r3, [r7, #14]
 800544e:	3b01      	subs	r3, #1
 8005450:	b2db      	uxtb	r3, r3
 8005452:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005454:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005458:	2b00      	cmp	r3, #0
 800545a:	dce9      	bgt.n	8005430 <prvUnlockQueue+0x60>
 800545c:	e000      	b.n	8005460 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800545e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	22ff      	movs	r2, #255	@ 0xff
 8005464:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005468:	f001 fcc8 	bl	8006dfc <vPortExitCritical>
}
 800546c:	bf00      	nop
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800547c:	f001 fc8c 	bl	8006d98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005484:	2b00      	cmp	r3, #0
 8005486:	d102      	bne.n	800548e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005488:	2301      	movs	r3, #1
 800548a:	60fb      	str	r3, [r7, #12]
 800548c:	e001      	b.n	8005492 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800548e:	2300      	movs	r3, #0
 8005490:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005492:	f001 fcb3 	bl	8006dfc <vPortExitCritical>

	return xReturn;
 8005496:	68fb      	ldr	r3, [r7, #12]
}
 8005498:	4618      	mov	r0, r3
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80054a8:	f001 fc76 	bl	8006d98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d102      	bne.n	80054be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80054b8:	2301      	movs	r3, #1
 80054ba:	60fb      	str	r3, [r7, #12]
 80054bc:	e001      	b.n	80054c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80054be:	2300      	movs	r3, #0
 80054c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80054c2:	f001 fc9b 	bl	8006dfc <vPortExitCritical>

	return xReturn;
 80054c6:	68fb      	ldr	r3, [r7, #12]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80054da:	2300      	movs	r3, #0
 80054dc:	60fb      	str	r3, [r7, #12]
 80054de:	e014      	b.n	800550a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80054e0:	4a0f      	ldr	r2, [pc, #60]	@ (8005520 <vQueueAddToRegistry+0x50>)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10b      	bne.n	8005504 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80054ec:	490c      	ldr	r1, [pc, #48]	@ (8005520 <vQueueAddToRegistry+0x50>)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	683a      	ldr	r2, [r7, #0]
 80054f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80054f6:	4a0a      	ldr	r2, [pc, #40]	@ (8005520 <vQueueAddToRegistry+0x50>)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	00db      	lsls	r3, r3, #3
 80054fc:	4413      	add	r3, r2
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005502:	e006      	b.n	8005512 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	3301      	adds	r3, #1
 8005508:	60fb      	str	r3, [r7, #12]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2b07      	cmp	r3, #7
 800550e:	d9e7      	bls.n	80054e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005510:	bf00      	nop
 8005512:	bf00      	nop
 8005514:	3714      	adds	r7, #20
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	20002070 	.word	0x20002070

08005524 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005524:	b580      	push	{r7, lr}
 8005526:	b086      	sub	sp, #24
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005534:	f001 fc30 	bl	8006d98 <vPortEnterCritical>
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800553e:	b25b      	sxtb	r3, r3
 8005540:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005544:	d103      	bne.n	800554e <vQueueWaitForMessageRestricted+0x2a>
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005554:	b25b      	sxtb	r3, r3
 8005556:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800555a:	d103      	bne.n	8005564 <vQueueWaitForMessageRestricted+0x40>
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005564:	f001 fc4a 	bl	8006dfc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800556c:	2b00      	cmp	r3, #0
 800556e:	d106      	bne.n	800557e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	3324      	adds	r3, #36	@ 0x24
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	68b9      	ldr	r1, [r7, #8]
 8005578:	4618      	mov	r0, r3
 800557a:	f000 fcad 	bl	8005ed8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800557e:	6978      	ldr	r0, [r7, #20]
 8005580:	f7ff ff26 	bl	80053d0 <prvUnlockQueue>
	}
 8005584:	bf00      	nop
 8005586:	3718      	adds	r7, #24
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800558c:	b580      	push	{r7, lr}
 800558e:	b08e      	sub	sp, #56	@ 0x38
 8005590:	af04      	add	r7, sp, #16
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	607a      	str	r2, [r7, #4]
 8005598:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800559a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800559c:	2b00      	cmp	r3, #0
 800559e:	d10b      	bne.n	80055b8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80055a0:	f04f 0310 	mov.w	r3, #16
 80055a4:	f383 8811 	msr	BASEPRI, r3
 80055a8:	f3bf 8f6f 	isb	sy
 80055ac:	f3bf 8f4f 	dsb	sy
 80055b0:	623b      	str	r3, [r7, #32]
}
 80055b2:	bf00      	nop
 80055b4:	bf00      	nop
 80055b6:	e7fd      	b.n	80055b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80055b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10b      	bne.n	80055d6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80055be:	f04f 0310 	mov.w	r3, #16
 80055c2:	f383 8811 	msr	BASEPRI, r3
 80055c6:	f3bf 8f6f 	isb	sy
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	61fb      	str	r3, [r7, #28]
}
 80055d0:	bf00      	nop
 80055d2:	bf00      	nop
 80055d4:	e7fd      	b.n	80055d2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80055d6:	23a8      	movs	r3, #168	@ 0xa8
 80055d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	2ba8      	cmp	r3, #168	@ 0xa8
 80055de:	d00b      	beq.n	80055f8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80055e0:	f04f 0310 	mov.w	r3, #16
 80055e4:	f383 8811 	msr	BASEPRI, r3
 80055e8:	f3bf 8f6f 	isb	sy
 80055ec:	f3bf 8f4f 	dsb	sy
 80055f0:	61bb      	str	r3, [r7, #24]
}
 80055f2:	bf00      	nop
 80055f4:	bf00      	nop
 80055f6:	e7fd      	b.n	80055f4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80055f8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80055fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d01e      	beq.n	800563e <xTaskCreateStatic+0xb2>
 8005600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005602:	2b00      	cmp	r3, #0
 8005604:	d01b      	beq.n	800563e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005608:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800560a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800560e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005612:	2202      	movs	r2, #2
 8005614:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005618:	2300      	movs	r3, #0
 800561a:	9303      	str	r3, [sp, #12]
 800561c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561e:	9302      	str	r3, [sp, #8]
 8005620:	f107 0314 	add.w	r3, r7, #20
 8005624:	9301      	str	r3, [sp, #4]
 8005626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005628:	9300      	str	r3, [sp, #0]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	68b9      	ldr	r1, [r7, #8]
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f000 f851 	bl	80056d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005636:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005638:	f000 f8f6 	bl	8005828 <prvAddNewTaskToReadyList>
 800563c:	e001      	b.n	8005642 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800563e:	2300      	movs	r3, #0
 8005640:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005642:	697b      	ldr	r3, [r7, #20]
	}
 8005644:	4618      	mov	r0, r3
 8005646:	3728      	adds	r7, #40	@ 0x28
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800564c:	b580      	push	{r7, lr}
 800564e:	b08c      	sub	sp, #48	@ 0x30
 8005650:	af04      	add	r7, sp, #16
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	603b      	str	r3, [r7, #0]
 8005658:	4613      	mov	r3, r2
 800565a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800565c:	88fb      	ldrh	r3, [r7, #6]
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	4618      	mov	r0, r3
 8005662:	f001 fcbb 	bl	8006fdc <pvPortMalloc>
 8005666:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00e      	beq.n	800568c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800566e:	20a8      	movs	r0, #168	@ 0xa8
 8005670:	f001 fcb4 	bl	8006fdc <pvPortMalloc>
 8005674:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d003      	beq.n	8005684 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	631a      	str	r2, [r3, #48]	@ 0x30
 8005682:	e005      	b.n	8005690 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005684:	6978      	ldr	r0, [r7, #20]
 8005686:	f001 fd77 	bl	8007178 <vPortFree>
 800568a:	e001      	b.n	8005690 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800568c:	2300      	movs	r3, #0
 800568e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d017      	beq.n	80056c6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800569e:	88fa      	ldrh	r2, [r7, #6]
 80056a0:	2300      	movs	r3, #0
 80056a2:	9303      	str	r3, [sp, #12]
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	9302      	str	r3, [sp, #8]
 80056a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056aa:	9301      	str	r3, [sp, #4]
 80056ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	68b9      	ldr	r1, [r7, #8]
 80056b4:	68f8      	ldr	r0, [r7, #12]
 80056b6:	f000 f80f 	bl	80056d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80056ba:	69f8      	ldr	r0, [r7, #28]
 80056bc:	f000 f8b4 	bl	8005828 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80056c0:	2301      	movs	r3, #1
 80056c2:	61bb      	str	r3, [r7, #24]
 80056c4:	e002      	b.n	80056cc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80056c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80056ca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80056cc:	69bb      	ldr	r3, [r7, #24]
	}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3720      	adds	r7, #32
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
	...

080056d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b088      	sub	sp, #32
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	607a      	str	r2, [r7, #4]
 80056e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80056e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	461a      	mov	r2, r3
 80056f0:	21a5      	movs	r1, #165	@ 0xa5
 80056f2:	f002 f949 	bl	8007988 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80056f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005700:	3b01      	subs	r3, #1
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	4413      	add	r3, r2
 8005706:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	f023 0307 	bic.w	r3, r3, #7
 800570e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	f003 0307 	and.w	r3, r3, #7
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00b      	beq.n	8005732 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800571a:	f04f 0310 	mov.w	r3, #16
 800571e:	f383 8811 	msr	BASEPRI, r3
 8005722:	f3bf 8f6f 	isb	sy
 8005726:	f3bf 8f4f 	dsb	sy
 800572a:	617b      	str	r3, [r7, #20]
}
 800572c:	bf00      	nop
 800572e:	bf00      	nop
 8005730:	e7fd      	b.n	800572e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d01f      	beq.n	8005778 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005738:	2300      	movs	r3, #0
 800573a:	61fb      	str	r3, [r7, #28]
 800573c:	e012      	b.n	8005764 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	4413      	add	r3, r2
 8005744:	7819      	ldrb	r1, [r3, #0]
 8005746:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	4413      	add	r3, r2
 800574c:	3334      	adds	r3, #52	@ 0x34
 800574e:	460a      	mov	r2, r1
 8005750:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005752:	68ba      	ldr	r2, [r7, #8]
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	4413      	add	r3, r2
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d006      	beq.n	800576c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	3301      	adds	r3, #1
 8005762:	61fb      	str	r3, [r7, #28]
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	2b0f      	cmp	r3, #15
 8005768:	d9e9      	bls.n	800573e <prvInitialiseNewTask+0x66>
 800576a:	e000      	b.n	800576e <prvInitialiseNewTask+0x96>
			{
				break;
 800576c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800576e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005770:	2200      	movs	r2, #0
 8005772:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005776:	e003      	b.n	8005780 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800577a:	2200      	movs	r2, #0
 800577c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005782:	2b37      	cmp	r3, #55	@ 0x37
 8005784:	d901      	bls.n	800578a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005786:	2337      	movs	r3, #55	@ 0x37
 8005788:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800578a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800578c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800578e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005792:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005794:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005798:	2200      	movs	r2, #0
 800579a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800579c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800579e:	3304      	adds	r3, #4
 80057a0:	4618      	mov	r0, r3
 80057a2:	f7ff f965 	bl	8004a70 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80057a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a8:	3318      	adds	r3, #24
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7ff f960 	bl	8004a70 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80057b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057b4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057b8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80057bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057be:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80057c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057c4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80057c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c8:	2200      	movs	r2, #0
 80057ca:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80057ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80057d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d8:	3354      	adds	r3, #84	@ 0x54
 80057da:	224c      	movs	r2, #76	@ 0x4c
 80057dc:	2100      	movs	r1, #0
 80057de:	4618      	mov	r0, r3
 80057e0:	f002 f8d2 	bl	8007988 <memset>
 80057e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e6:	4a0d      	ldr	r2, [pc, #52]	@ (800581c <prvInitialiseNewTask+0x144>)
 80057e8:	659a      	str	r2, [r3, #88]	@ 0x58
 80057ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ec:	4a0c      	ldr	r2, [pc, #48]	@ (8005820 <prvInitialiseNewTask+0x148>)
 80057ee:	65da      	str	r2, [r3, #92]	@ 0x5c
 80057f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f2:	4a0c      	ldr	r2, [pc, #48]	@ (8005824 <prvInitialiseNewTask+0x14c>)
 80057f4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80057f6:	683a      	ldr	r2, [r7, #0]
 80057f8:	68f9      	ldr	r1, [r7, #12]
 80057fa:	69b8      	ldr	r0, [r7, #24]
 80057fc:	f001 f99a 	bl	8006b34 <pxPortInitialiseStack>
 8005800:	4602      	mov	r2, r0
 8005802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005804:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005808:	2b00      	cmp	r3, #0
 800580a:	d002      	beq.n	8005812 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800580c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800580e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005810:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005812:	bf00      	nop
 8005814:	3720      	adds	r7, #32
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	20017174 	.word	0x20017174
 8005820:	200171dc 	.word	0x200171dc
 8005824:	20017244 	.word	0x20017244

08005828 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005830:	f001 fab2 	bl	8006d98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005834:	4b2d      	ldr	r3, [pc, #180]	@ (80058ec <prvAddNewTaskToReadyList+0xc4>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	3301      	adds	r3, #1
 800583a:	4a2c      	ldr	r2, [pc, #176]	@ (80058ec <prvAddNewTaskToReadyList+0xc4>)
 800583c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800583e:	4b2c      	ldr	r3, [pc, #176]	@ (80058f0 <prvAddNewTaskToReadyList+0xc8>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d109      	bne.n	800585a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005846:	4a2a      	ldr	r2, [pc, #168]	@ (80058f0 <prvAddNewTaskToReadyList+0xc8>)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800584c:	4b27      	ldr	r3, [pc, #156]	@ (80058ec <prvAddNewTaskToReadyList+0xc4>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d110      	bne.n	8005876 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005854:	f000 fc6e 	bl	8006134 <prvInitialiseTaskLists>
 8005858:	e00d      	b.n	8005876 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800585a:	4b26      	ldr	r3, [pc, #152]	@ (80058f4 <prvAddNewTaskToReadyList+0xcc>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d109      	bne.n	8005876 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005862:	4b23      	ldr	r3, [pc, #140]	@ (80058f0 <prvAddNewTaskToReadyList+0xc8>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800586c:	429a      	cmp	r2, r3
 800586e:	d802      	bhi.n	8005876 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005870:	4a1f      	ldr	r2, [pc, #124]	@ (80058f0 <prvAddNewTaskToReadyList+0xc8>)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005876:	4b20      	ldr	r3, [pc, #128]	@ (80058f8 <prvAddNewTaskToReadyList+0xd0>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	3301      	adds	r3, #1
 800587c:	4a1e      	ldr	r2, [pc, #120]	@ (80058f8 <prvAddNewTaskToReadyList+0xd0>)
 800587e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005880:	4b1d      	ldr	r3, [pc, #116]	@ (80058f8 <prvAddNewTaskToReadyList+0xd0>)
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800588c:	4b1b      	ldr	r3, [pc, #108]	@ (80058fc <prvAddNewTaskToReadyList+0xd4>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	429a      	cmp	r2, r3
 8005892:	d903      	bls.n	800589c <prvAddNewTaskToReadyList+0x74>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005898:	4a18      	ldr	r2, [pc, #96]	@ (80058fc <prvAddNewTaskToReadyList+0xd4>)
 800589a:	6013      	str	r3, [r2, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058a0:	4613      	mov	r3, r2
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	4413      	add	r3, r2
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4a15      	ldr	r2, [pc, #84]	@ (8005900 <prvAddNewTaskToReadyList+0xd8>)
 80058aa:	441a      	add	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	3304      	adds	r3, #4
 80058b0:	4619      	mov	r1, r3
 80058b2:	4610      	mov	r0, r2
 80058b4:	f7ff f8e9 	bl	8004a8a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80058b8:	f001 faa0 	bl	8006dfc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80058bc:	4b0d      	ldr	r3, [pc, #52]	@ (80058f4 <prvAddNewTaskToReadyList+0xcc>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00e      	beq.n	80058e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80058c4:	4b0a      	ldr	r3, [pc, #40]	@ (80058f0 <prvAddNewTaskToReadyList+0xc8>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d207      	bcs.n	80058e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80058d2:	4b0c      	ldr	r3, [pc, #48]	@ (8005904 <prvAddNewTaskToReadyList+0xdc>)
 80058d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058d8:	601a      	str	r2, [r3, #0]
 80058da:	f3bf 8f4f 	dsb	sy
 80058de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058e2:	bf00      	nop
 80058e4:	3708      	adds	r7, #8
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	20002584 	.word	0x20002584
 80058f0:	200020b0 	.word	0x200020b0
 80058f4:	20002590 	.word	0x20002590
 80058f8:	200025a0 	.word	0x200025a0
 80058fc:	2000258c 	.word	0x2000258c
 8005900:	200020b4 	.word	0x200020b4
 8005904:	e000ed04 	.word	0xe000ed04

08005908 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005910:	f001 fa42 	bl	8006d98 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d102      	bne.n	8005920 <vTaskSuspend+0x18>
 800591a:	4b30      	ldr	r3, [pc, #192]	@ (80059dc <vTaskSuspend+0xd4>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	e000      	b.n	8005922 <vTaskSuspend+0x1a>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	3304      	adds	r3, #4
 8005928:	4618      	mov	r0, r3
 800592a:	f7ff f90b 	bl	8004b44 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005932:	2b00      	cmp	r3, #0
 8005934:	d004      	beq.n	8005940 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	3318      	adds	r3, #24
 800593a:	4618      	mov	r0, r3
 800593c:	f7ff f902 	bl	8004b44 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	3304      	adds	r3, #4
 8005944:	4619      	mov	r1, r3
 8005946:	4826      	ldr	r0, [pc, #152]	@ (80059e0 <vTaskSuspend+0xd8>)
 8005948:	f7ff f89f 	bl	8004a8a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b01      	cmp	r3, #1
 8005956:	d103      	bne.n	8005960 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8005960:	f001 fa4c 	bl	8006dfc <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8005964:	4b1f      	ldr	r3, [pc, #124]	@ (80059e4 <vTaskSuspend+0xdc>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d005      	beq.n	8005978 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800596c:	f001 fa14 	bl	8006d98 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8005970:	f000 fc84 	bl	800627c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8005974:	f001 fa42 	bl	8006dfc <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8005978:	4b18      	ldr	r3, [pc, #96]	@ (80059dc <vTaskSuspend+0xd4>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	429a      	cmp	r2, r3
 8005980:	d128      	bne.n	80059d4 <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 8005982:	4b18      	ldr	r3, [pc, #96]	@ (80059e4 <vTaskSuspend+0xdc>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d018      	beq.n	80059bc <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800598a:	4b17      	ldr	r3, [pc, #92]	@ (80059e8 <vTaskSuspend+0xe0>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00b      	beq.n	80059aa <vTaskSuspend+0xa2>
	__asm volatile
 8005992:	f04f 0310 	mov.w	r3, #16
 8005996:	f383 8811 	msr	BASEPRI, r3
 800599a:	f3bf 8f6f 	isb	sy
 800599e:	f3bf 8f4f 	dsb	sy
 80059a2:	60bb      	str	r3, [r7, #8]
}
 80059a4:	bf00      	nop
 80059a6:	bf00      	nop
 80059a8:	e7fd      	b.n	80059a6 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 80059aa:	4b10      	ldr	r3, [pc, #64]	@ (80059ec <vTaskSuspend+0xe4>)
 80059ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059b0:	601a      	str	r2, [r3, #0]
 80059b2:	f3bf 8f4f 	dsb	sy
 80059b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80059ba:	e00b      	b.n	80059d4 <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80059bc:	4b08      	ldr	r3, [pc, #32]	@ (80059e0 <vTaskSuspend+0xd8>)
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	4b0b      	ldr	r3, [pc, #44]	@ (80059f0 <vTaskSuspend+0xe8>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d103      	bne.n	80059d0 <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 80059c8:	4b04      	ldr	r3, [pc, #16]	@ (80059dc <vTaskSuspend+0xd4>)
 80059ca:	2200      	movs	r2, #0
 80059cc:	601a      	str	r2, [r3, #0]
	}
 80059ce:	e001      	b.n	80059d4 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 80059d0:	f000 f9f6 	bl	8005dc0 <vTaskSwitchContext>
	}
 80059d4:	bf00      	nop
 80059d6:	3710      	adds	r7, #16
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	200020b0 	.word	0x200020b0
 80059e0:	20002570 	.word	0x20002570
 80059e4:	20002590 	.word	0x20002590
 80059e8:	200025ac 	.word	0x200025ac
 80059ec:	e000ed04 	.word	0xe000ed04
 80059f0:	20002584 	.word	0x20002584

080059f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b08a      	sub	sp, #40	@ 0x28
 80059f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80059fa:	2300      	movs	r3, #0
 80059fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80059fe:	2300      	movs	r3, #0
 8005a00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005a02:	463a      	mov	r2, r7
 8005a04:	1d39      	adds	r1, r7, #4
 8005a06:	f107 0308 	add.w	r3, r7, #8
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7fe ffdc 	bl	80049c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005a10:	6839      	ldr	r1, [r7, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	68ba      	ldr	r2, [r7, #8]
 8005a16:	9202      	str	r2, [sp, #8]
 8005a18:	9301      	str	r3, [sp, #4]
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	9300      	str	r3, [sp, #0]
 8005a1e:	2300      	movs	r3, #0
 8005a20:	460a      	mov	r2, r1
 8005a22:	4924      	ldr	r1, [pc, #144]	@ (8005ab4 <vTaskStartScheduler+0xc0>)
 8005a24:	4824      	ldr	r0, [pc, #144]	@ (8005ab8 <vTaskStartScheduler+0xc4>)
 8005a26:	f7ff fdb1 	bl	800558c <xTaskCreateStatic>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	4a23      	ldr	r2, [pc, #140]	@ (8005abc <vTaskStartScheduler+0xc8>)
 8005a2e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005a30:	4b22      	ldr	r3, [pc, #136]	@ (8005abc <vTaskStartScheduler+0xc8>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d002      	beq.n	8005a3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	617b      	str	r3, [r7, #20]
 8005a3c:	e001      	b.n	8005a42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d102      	bne.n	8005a4e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005a48:	f000 fd1a 	bl	8006480 <xTimerCreateTimerTask>
 8005a4c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d11b      	bne.n	8005a8c <vTaskStartScheduler+0x98>
	__asm volatile
 8005a54:	f04f 0310 	mov.w	r3, #16
 8005a58:	f383 8811 	msr	BASEPRI, r3
 8005a5c:	f3bf 8f6f 	isb	sy
 8005a60:	f3bf 8f4f 	dsb	sy
 8005a64:	613b      	str	r3, [r7, #16]
}
 8005a66:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005a68:	4b15      	ldr	r3, [pc, #84]	@ (8005ac0 <vTaskStartScheduler+0xcc>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	3354      	adds	r3, #84	@ 0x54
 8005a6e:	4a15      	ldr	r2, [pc, #84]	@ (8005ac4 <vTaskStartScheduler+0xd0>)
 8005a70:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005a72:	4b15      	ldr	r3, [pc, #84]	@ (8005ac8 <vTaskStartScheduler+0xd4>)
 8005a74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005a78:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005a7a:	4b14      	ldr	r3, [pc, #80]	@ (8005acc <vTaskStartScheduler+0xd8>)
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005a80:	4b13      	ldr	r3, [pc, #76]	@ (8005ad0 <vTaskStartScheduler+0xdc>)
 8005a82:	2200      	movs	r2, #0
 8005a84:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005a86:	f001 f8e3 	bl	8006c50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005a8a:	e00f      	b.n	8005aac <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a92:	d10b      	bne.n	8005aac <vTaskStartScheduler+0xb8>
	__asm volatile
 8005a94:	f04f 0310 	mov.w	r3, #16
 8005a98:	f383 8811 	msr	BASEPRI, r3
 8005a9c:	f3bf 8f6f 	isb	sy
 8005aa0:	f3bf 8f4f 	dsb	sy
 8005aa4:	60fb      	str	r3, [r7, #12]
}
 8005aa6:	bf00      	nop
 8005aa8:	bf00      	nop
 8005aaa:	e7fd      	b.n	8005aa8 <vTaskStartScheduler+0xb4>
}
 8005aac:	bf00      	nop
 8005aae:	3718      	adds	r7, #24
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	08008358 	.word	0x08008358
 8005ab8:	08006105 	.word	0x08006105
 8005abc:	200025a8 	.word	0x200025a8
 8005ac0:	200020b0 	.word	0x200020b0
 8005ac4:	20000014 	.word	0x20000014
 8005ac8:	200025a4 	.word	0x200025a4
 8005acc:	20002590 	.word	0x20002590
 8005ad0:	20002588 	.word	0x20002588

08005ad4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005ad8:	4b04      	ldr	r3, [pc, #16]	@ (8005aec <vTaskSuspendAll+0x18>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	3301      	adds	r3, #1
 8005ade:	4a03      	ldr	r2, [pc, #12]	@ (8005aec <vTaskSuspendAll+0x18>)
 8005ae0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005ae2:	bf00      	nop
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	200025ac 	.word	0x200025ac

08005af0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005af6:	2300      	movs	r3, #0
 8005af8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005afa:	2300      	movs	r3, #0
 8005afc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005afe:	4b42      	ldr	r3, [pc, #264]	@ (8005c08 <xTaskResumeAll+0x118>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d10b      	bne.n	8005b1e <xTaskResumeAll+0x2e>
	__asm volatile
 8005b06:	f04f 0310 	mov.w	r3, #16
 8005b0a:	f383 8811 	msr	BASEPRI, r3
 8005b0e:	f3bf 8f6f 	isb	sy
 8005b12:	f3bf 8f4f 	dsb	sy
 8005b16:	603b      	str	r3, [r7, #0]
}
 8005b18:	bf00      	nop
 8005b1a:	bf00      	nop
 8005b1c:	e7fd      	b.n	8005b1a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005b1e:	f001 f93b 	bl	8006d98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005b22:	4b39      	ldr	r3, [pc, #228]	@ (8005c08 <xTaskResumeAll+0x118>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	3b01      	subs	r3, #1
 8005b28:	4a37      	ldr	r2, [pc, #220]	@ (8005c08 <xTaskResumeAll+0x118>)
 8005b2a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b2c:	4b36      	ldr	r3, [pc, #216]	@ (8005c08 <xTaskResumeAll+0x118>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d162      	bne.n	8005bfa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b34:	4b35      	ldr	r3, [pc, #212]	@ (8005c0c <xTaskResumeAll+0x11c>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d05e      	beq.n	8005bfa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b3c:	e02f      	b.n	8005b9e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b3e:	4b34      	ldr	r3, [pc, #208]	@ (8005c10 <xTaskResumeAll+0x120>)
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	3318      	adds	r3, #24
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f7fe fffa 	bl	8004b44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	3304      	adds	r3, #4
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7fe fff5 	bl	8004b44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b5e:	4b2d      	ldr	r3, [pc, #180]	@ (8005c14 <xTaskResumeAll+0x124>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d903      	bls.n	8005b6e <xTaskResumeAll+0x7e>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b6a:	4a2a      	ldr	r2, [pc, #168]	@ (8005c14 <xTaskResumeAll+0x124>)
 8005b6c:	6013      	str	r3, [r2, #0]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b72:	4613      	mov	r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	4413      	add	r3, r2
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	4a27      	ldr	r2, [pc, #156]	@ (8005c18 <xTaskResumeAll+0x128>)
 8005b7c:	441a      	add	r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	3304      	adds	r3, #4
 8005b82:	4619      	mov	r1, r3
 8005b84:	4610      	mov	r0, r2
 8005b86:	f7fe ff80 	bl	8004a8a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b8e:	4b23      	ldr	r3, [pc, #140]	@ (8005c1c <xTaskResumeAll+0x12c>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d302      	bcc.n	8005b9e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005b98:	4b21      	ldr	r3, [pc, #132]	@ (8005c20 <xTaskResumeAll+0x130>)
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b9e:	4b1c      	ldr	r3, [pc, #112]	@ (8005c10 <xTaskResumeAll+0x120>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1cb      	bne.n	8005b3e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d001      	beq.n	8005bb0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005bac:	f000 fb66 	bl	800627c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005bb0:	4b1c      	ldr	r3, [pc, #112]	@ (8005c24 <xTaskResumeAll+0x134>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d010      	beq.n	8005bde <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005bbc:	f000 f846 	bl	8005c4c <xTaskIncrementTick>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d002      	beq.n	8005bcc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005bc6:	4b16      	ldr	r3, [pc, #88]	@ (8005c20 <xTaskResumeAll+0x130>)
 8005bc8:	2201      	movs	r2, #1
 8005bca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d1f1      	bne.n	8005bbc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005bd8:	4b12      	ldr	r3, [pc, #72]	@ (8005c24 <xTaskResumeAll+0x134>)
 8005bda:	2200      	movs	r2, #0
 8005bdc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005bde:	4b10      	ldr	r3, [pc, #64]	@ (8005c20 <xTaskResumeAll+0x130>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d009      	beq.n	8005bfa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005be6:	2301      	movs	r3, #1
 8005be8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005bea:	4b0f      	ldr	r3, [pc, #60]	@ (8005c28 <xTaskResumeAll+0x138>)
 8005bec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bf0:	601a      	str	r2, [r3, #0]
 8005bf2:	f3bf 8f4f 	dsb	sy
 8005bf6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005bfa:	f001 f8ff 	bl	8006dfc <vPortExitCritical>

	return xAlreadyYielded;
 8005bfe:	68bb      	ldr	r3, [r7, #8]
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3710      	adds	r7, #16
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	200025ac 	.word	0x200025ac
 8005c0c:	20002584 	.word	0x20002584
 8005c10:	20002544 	.word	0x20002544
 8005c14:	2000258c 	.word	0x2000258c
 8005c18:	200020b4 	.word	0x200020b4
 8005c1c:	200020b0 	.word	0x200020b0
 8005c20:	20002598 	.word	0x20002598
 8005c24:	20002594 	.word	0x20002594
 8005c28:	e000ed04 	.word	0xe000ed04

08005c2c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005c32:	4b05      	ldr	r3, [pc, #20]	@ (8005c48 <xTaskGetTickCount+0x1c>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005c38:	687b      	ldr	r3, [r7, #4]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	370c      	adds	r7, #12
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	20002588 	.word	0x20002588

08005c4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b086      	sub	sp, #24
 8005c50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005c52:	2300      	movs	r3, #0
 8005c54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c56:	4b4f      	ldr	r3, [pc, #316]	@ (8005d94 <xTaskIncrementTick+0x148>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	f040 8090 	bne.w	8005d80 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005c60:	4b4d      	ldr	r3, [pc, #308]	@ (8005d98 <xTaskIncrementTick+0x14c>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	3301      	adds	r3, #1
 8005c66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005c68:	4a4b      	ldr	r2, [pc, #300]	@ (8005d98 <xTaskIncrementTick+0x14c>)
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d121      	bne.n	8005cb8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005c74:	4b49      	ldr	r3, [pc, #292]	@ (8005d9c <xTaskIncrementTick+0x150>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00b      	beq.n	8005c96 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005c7e:	f04f 0310 	mov.w	r3, #16
 8005c82:	f383 8811 	msr	BASEPRI, r3
 8005c86:	f3bf 8f6f 	isb	sy
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	603b      	str	r3, [r7, #0]
}
 8005c90:	bf00      	nop
 8005c92:	bf00      	nop
 8005c94:	e7fd      	b.n	8005c92 <xTaskIncrementTick+0x46>
 8005c96:	4b41      	ldr	r3, [pc, #260]	@ (8005d9c <xTaskIncrementTick+0x150>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	60fb      	str	r3, [r7, #12]
 8005c9c:	4b40      	ldr	r3, [pc, #256]	@ (8005da0 <xTaskIncrementTick+0x154>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a3e      	ldr	r2, [pc, #248]	@ (8005d9c <xTaskIncrementTick+0x150>)
 8005ca2:	6013      	str	r3, [r2, #0]
 8005ca4:	4a3e      	ldr	r2, [pc, #248]	@ (8005da0 <xTaskIncrementTick+0x154>)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6013      	str	r3, [r2, #0]
 8005caa:	4b3e      	ldr	r3, [pc, #248]	@ (8005da4 <xTaskIncrementTick+0x158>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	3301      	adds	r3, #1
 8005cb0:	4a3c      	ldr	r2, [pc, #240]	@ (8005da4 <xTaskIncrementTick+0x158>)
 8005cb2:	6013      	str	r3, [r2, #0]
 8005cb4:	f000 fae2 	bl	800627c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005cb8:	4b3b      	ldr	r3, [pc, #236]	@ (8005da8 <xTaskIncrementTick+0x15c>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d349      	bcc.n	8005d56 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cc2:	4b36      	ldr	r3, [pc, #216]	@ (8005d9c <xTaskIncrementTick+0x150>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d104      	bne.n	8005cd6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ccc:	4b36      	ldr	r3, [pc, #216]	@ (8005da8 <xTaskIncrementTick+0x15c>)
 8005cce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005cd2:	601a      	str	r2, [r3, #0]
					break;
 8005cd4:	e03f      	b.n	8005d56 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cd6:	4b31      	ldr	r3, [pc, #196]	@ (8005d9c <xTaskIncrementTick+0x150>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ce6:	693a      	ldr	r2, [r7, #16]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d203      	bcs.n	8005cf6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005cee:	4a2e      	ldr	r2, [pc, #184]	@ (8005da8 <xTaskIncrementTick+0x15c>)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005cf4:	e02f      	b.n	8005d56 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	3304      	adds	r3, #4
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7fe ff22 	bl	8004b44 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d004      	beq.n	8005d12 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	3318      	adds	r3, #24
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f7fe ff19 	bl	8004b44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d16:	4b25      	ldr	r3, [pc, #148]	@ (8005dac <xTaskIncrementTick+0x160>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d903      	bls.n	8005d26 <xTaskIncrementTick+0xda>
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d22:	4a22      	ldr	r2, [pc, #136]	@ (8005dac <xTaskIncrementTick+0x160>)
 8005d24:	6013      	str	r3, [r2, #0]
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	4413      	add	r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	4a1f      	ldr	r2, [pc, #124]	@ (8005db0 <xTaskIncrementTick+0x164>)
 8005d34:	441a      	add	r2, r3
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	3304      	adds	r3, #4
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	4610      	mov	r0, r2
 8005d3e:	f7fe fea4 	bl	8004a8a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d46:	4b1b      	ldr	r3, [pc, #108]	@ (8005db4 <xTaskIncrementTick+0x168>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d3b8      	bcc.n	8005cc2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005d50:	2301      	movs	r3, #1
 8005d52:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d54:	e7b5      	b.n	8005cc2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d56:	4b17      	ldr	r3, [pc, #92]	@ (8005db4 <xTaskIncrementTick+0x168>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d5c:	4914      	ldr	r1, [pc, #80]	@ (8005db0 <xTaskIncrementTick+0x164>)
 8005d5e:	4613      	mov	r3, r2
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	4413      	add	r3, r2
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	440b      	add	r3, r1
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d901      	bls.n	8005d72 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005d72:	4b11      	ldr	r3, [pc, #68]	@ (8005db8 <xTaskIncrementTick+0x16c>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d007      	beq.n	8005d8a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	617b      	str	r3, [r7, #20]
 8005d7e:	e004      	b.n	8005d8a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005d80:	4b0e      	ldr	r3, [pc, #56]	@ (8005dbc <xTaskIncrementTick+0x170>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	3301      	adds	r3, #1
 8005d86:	4a0d      	ldr	r2, [pc, #52]	@ (8005dbc <xTaskIncrementTick+0x170>)
 8005d88:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005d8a:	697b      	ldr	r3, [r7, #20]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3718      	adds	r7, #24
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	200025ac 	.word	0x200025ac
 8005d98:	20002588 	.word	0x20002588
 8005d9c:	2000253c 	.word	0x2000253c
 8005da0:	20002540 	.word	0x20002540
 8005da4:	2000259c 	.word	0x2000259c
 8005da8:	200025a4 	.word	0x200025a4
 8005dac:	2000258c 	.word	0x2000258c
 8005db0:	200020b4 	.word	0x200020b4
 8005db4:	200020b0 	.word	0x200020b0
 8005db8:	20002598 	.word	0x20002598
 8005dbc:	20002594 	.word	0x20002594

08005dc0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005dc6:	4b2b      	ldr	r3, [pc, #172]	@ (8005e74 <vTaskSwitchContext+0xb4>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d003      	beq.n	8005dd6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005dce:	4b2a      	ldr	r3, [pc, #168]	@ (8005e78 <vTaskSwitchContext+0xb8>)
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005dd4:	e047      	b.n	8005e66 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005dd6:	4b28      	ldr	r3, [pc, #160]	@ (8005e78 <vTaskSwitchContext+0xb8>)
 8005dd8:	2200      	movs	r2, #0
 8005dda:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ddc:	4b27      	ldr	r3, [pc, #156]	@ (8005e7c <vTaskSwitchContext+0xbc>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	60fb      	str	r3, [r7, #12]
 8005de2:	e011      	b.n	8005e08 <vTaskSwitchContext+0x48>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10b      	bne.n	8005e02 <vTaskSwitchContext+0x42>
	__asm volatile
 8005dea:	f04f 0310 	mov.w	r3, #16
 8005dee:	f383 8811 	msr	BASEPRI, r3
 8005df2:	f3bf 8f6f 	isb	sy
 8005df6:	f3bf 8f4f 	dsb	sy
 8005dfa:	607b      	str	r3, [r7, #4]
}
 8005dfc:	bf00      	nop
 8005dfe:	bf00      	nop
 8005e00:	e7fd      	b.n	8005dfe <vTaskSwitchContext+0x3e>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	3b01      	subs	r3, #1
 8005e06:	60fb      	str	r3, [r7, #12]
 8005e08:	491d      	ldr	r1, [pc, #116]	@ (8005e80 <vTaskSwitchContext+0xc0>)
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4413      	add	r3, r2
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	440b      	add	r3, r1
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d0e3      	beq.n	8005de4 <vTaskSwitchContext+0x24>
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	4413      	add	r3, r2
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4a16      	ldr	r2, [pc, #88]	@ (8005e80 <vTaskSwitchContext+0xc0>)
 8005e28:	4413      	add	r3, r2
 8005e2a:	60bb      	str	r3, [r7, #8]
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	685a      	ldr	r2, [r3, #4]
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	605a      	str	r2, [r3, #4]
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	685a      	ldr	r2, [r3, #4]
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	3308      	adds	r3, #8
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d104      	bne.n	8005e4c <vTaskSwitchContext+0x8c>
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	685a      	ldr	r2, [r3, #4]
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	605a      	str	r2, [r3, #4]
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	4a0c      	ldr	r2, [pc, #48]	@ (8005e84 <vTaskSwitchContext+0xc4>)
 8005e54:	6013      	str	r3, [r2, #0]
 8005e56:	4a09      	ldr	r2, [pc, #36]	@ (8005e7c <vTaskSwitchContext+0xbc>)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005e5c:	4b09      	ldr	r3, [pc, #36]	@ (8005e84 <vTaskSwitchContext+0xc4>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	3354      	adds	r3, #84	@ 0x54
 8005e62:	4a09      	ldr	r2, [pc, #36]	@ (8005e88 <vTaskSwitchContext+0xc8>)
 8005e64:	6013      	str	r3, [r2, #0]
}
 8005e66:	bf00      	nop
 8005e68:	3714      	adds	r7, #20
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	200025ac 	.word	0x200025ac
 8005e78:	20002598 	.word	0x20002598
 8005e7c:	2000258c 	.word	0x2000258c
 8005e80:	200020b4 	.word	0x200020b4
 8005e84:	200020b0 	.word	0x200020b0
 8005e88:	20000014 	.word	0x20000014

08005e8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10b      	bne.n	8005eb4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005e9c:	f04f 0310 	mov.w	r3, #16
 8005ea0:	f383 8811 	msr	BASEPRI, r3
 8005ea4:	f3bf 8f6f 	isb	sy
 8005ea8:	f3bf 8f4f 	dsb	sy
 8005eac:	60fb      	str	r3, [r7, #12]
}
 8005eae:	bf00      	nop
 8005eb0:	bf00      	nop
 8005eb2:	e7fd      	b.n	8005eb0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005eb4:	4b07      	ldr	r3, [pc, #28]	@ (8005ed4 <vTaskPlaceOnEventList+0x48>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	3318      	adds	r3, #24
 8005eba:	4619      	mov	r1, r3
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f7fe fe08 	bl	8004ad2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005ec2:	2101      	movs	r1, #1
 8005ec4:	6838      	ldr	r0, [r7, #0]
 8005ec6:	f000 fa87 	bl	80063d8 <prvAddCurrentTaskToDelayedList>
}
 8005eca:	bf00      	nop
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	200020b0 	.word	0x200020b0

08005ed8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b086      	sub	sp, #24
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d10b      	bne.n	8005f02 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005eea:	f04f 0310 	mov.w	r3, #16
 8005eee:	f383 8811 	msr	BASEPRI, r3
 8005ef2:	f3bf 8f6f 	isb	sy
 8005ef6:	f3bf 8f4f 	dsb	sy
 8005efa:	617b      	str	r3, [r7, #20]
}
 8005efc:	bf00      	nop
 8005efe:	bf00      	nop
 8005f00:	e7fd      	b.n	8005efe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f02:	4b0a      	ldr	r3, [pc, #40]	@ (8005f2c <vTaskPlaceOnEventListRestricted+0x54>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	3318      	adds	r3, #24
 8005f08:	4619      	mov	r1, r3
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	f7fe fdbd 	bl	8004a8a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d002      	beq.n	8005f1c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005f16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005f1a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005f1c:	6879      	ldr	r1, [r7, #4]
 8005f1e:	68b8      	ldr	r0, [r7, #8]
 8005f20:	f000 fa5a 	bl	80063d8 <prvAddCurrentTaskToDelayedList>
	}
 8005f24:	bf00      	nop
 8005f26:	3718      	adds	r7, #24
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	200020b0 	.word	0x200020b0

08005f30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b086      	sub	sp, #24
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d10b      	bne.n	8005f5e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005f46:	f04f 0310 	mov.w	r3, #16
 8005f4a:	f383 8811 	msr	BASEPRI, r3
 8005f4e:	f3bf 8f6f 	isb	sy
 8005f52:	f3bf 8f4f 	dsb	sy
 8005f56:	60fb      	str	r3, [r7, #12]
}
 8005f58:	bf00      	nop
 8005f5a:	bf00      	nop
 8005f5c:	e7fd      	b.n	8005f5a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	3318      	adds	r3, #24
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7fe fdee 	bl	8004b44 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f68:	4b1d      	ldr	r3, [pc, #116]	@ (8005fe0 <xTaskRemoveFromEventList+0xb0>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d11d      	bne.n	8005fac <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	3304      	adds	r3, #4
 8005f74:	4618      	mov	r0, r3
 8005f76:	f7fe fde5 	bl	8004b44 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f7e:	4b19      	ldr	r3, [pc, #100]	@ (8005fe4 <xTaskRemoveFromEventList+0xb4>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d903      	bls.n	8005f8e <xTaskRemoveFromEventList+0x5e>
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f8a:	4a16      	ldr	r2, [pc, #88]	@ (8005fe4 <xTaskRemoveFromEventList+0xb4>)
 8005f8c:	6013      	str	r3, [r2, #0]
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f92:	4613      	mov	r3, r2
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	4413      	add	r3, r2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4a13      	ldr	r2, [pc, #76]	@ (8005fe8 <xTaskRemoveFromEventList+0xb8>)
 8005f9c:	441a      	add	r2, r3
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	3304      	adds	r3, #4
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	4610      	mov	r0, r2
 8005fa6:	f7fe fd70 	bl	8004a8a <vListInsertEnd>
 8005faa:	e005      	b.n	8005fb8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	3318      	adds	r3, #24
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	480e      	ldr	r0, [pc, #56]	@ (8005fec <xTaskRemoveFromEventList+0xbc>)
 8005fb4:	f7fe fd69 	bl	8004a8a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8005ff0 <xTaskRemoveFromEventList+0xc0>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d905      	bls.n	8005fd2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005fca:	4b0a      	ldr	r3, [pc, #40]	@ (8005ff4 <xTaskRemoveFromEventList+0xc4>)
 8005fcc:	2201      	movs	r2, #1
 8005fce:	601a      	str	r2, [r3, #0]
 8005fd0:	e001      	b.n	8005fd6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005fd6:	697b      	ldr	r3, [r7, #20]
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3718      	adds	r7, #24
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	200025ac 	.word	0x200025ac
 8005fe4:	2000258c 	.word	0x2000258c
 8005fe8:	200020b4 	.word	0x200020b4
 8005fec:	20002544 	.word	0x20002544
 8005ff0:	200020b0 	.word	0x200020b0
 8005ff4:	20002598 	.word	0x20002598

08005ff8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006000:	4b06      	ldr	r3, [pc, #24]	@ (800601c <vTaskInternalSetTimeOutState+0x24>)
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006008:	4b05      	ldr	r3, [pc, #20]	@ (8006020 <vTaskInternalSetTimeOutState+0x28>)
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	605a      	str	r2, [r3, #4]
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr
 800601c:	2000259c 	.word	0x2000259c
 8006020:	20002588 	.word	0x20002588

08006024 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b088      	sub	sp, #32
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d10b      	bne.n	800604c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006034:	f04f 0310 	mov.w	r3, #16
 8006038:	f383 8811 	msr	BASEPRI, r3
 800603c:	f3bf 8f6f 	isb	sy
 8006040:	f3bf 8f4f 	dsb	sy
 8006044:	613b      	str	r3, [r7, #16]
}
 8006046:	bf00      	nop
 8006048:	bf00      	nop
 800604a:	e7fd      	b.n	8006048 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d10b      	bne.n	800606a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006052:	f04f 0310 	mov.w	r3, #16
 8006056:	f383 8811 	msr	BASEPRI, r3
 800605a:	f3bf 8f6f 	isb	sy
 800605e:	f3bf 8f4f 	dsb	sy
 8006062:	60fb      	str	r3, [r7, #12]
}
 8006064:	bf00      	nop
 8006066:	bf00      	nop
 8006068:	e7fd      	b.n	8006066 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800606a:	f000 fe95 	bl	8006d98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800606e:	4b1d      	ldr	r3, [pc, #116]	@ (80060e4 <xTaskCheckForTimeOut+0xc0>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	69ba      	ldr	r2, [r7, #24]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006086:	d102      	bne.n	800608e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006088:	2300      	movs	r3, #0
 800608a:	61fb      	str	r3, [r7, #28]
 800608c:	e023      	b.n	80060d6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	4b15      	ldr	r3, [pc, #84]	@ (80060e8 <xTaskCheckForTimeOut+0xc4>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	429a      	cmp	r2, r3
 8006098:	d007      	beq.n	80060aa <xTaskCheckForTimeOut+0x86>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	69ba      	ldr	r2, [r7, #24]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d302      	bcc.n	80060aa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80060a4:	2301      	movs	r3, #1
 80060a6:	61fb      	str	r3, [r7, #28]
 80060a8:	e015      	b.n	80060d6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d20b      	bcs.n	80060cc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	1ad2      	subs	r2, r2, r3
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f7ff ff99 	bl	8005ff8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80060c6:	2300      	movs	r3, #0
 80060c8:	61fb      	str	r3, [r7, #28]
 80060ca:	e004      	b.n	80060d6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	2200      	movs	r2, #0
 80060d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80060d2:	2301      	movs	r3, #1
 80060d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80060d6:	f000 fe91 	bl	8006dfc <vPortExitCritical>

	return xReturn;
 80060da:	69fb      	ldr	r3, [r7, #28]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3720      	adds	r7, #32
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	20002588 	.word	0x20002588
 80060e8:	2000259c 	.word	0x2000259c

080060ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80060ec:	b480      	push	{r7}
 80060ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80060f0:	4b03      	ldr	r3, [pc, #12]	@ (8006100 <vTaskMissedYield+0x14>)
 80060f2:	2201      	movs	r2, #1
 80060f4:	601a      	str	r2, [r3, #0]
}
 80060f6:	bf00      	nop
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr
 8006100:	20002598 	.word	0x20002598

08006104 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800610c:	f000 f852 	bl	80061b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006110:	4b06      	ldr	r3, [pc, #24]	@ (800612c <prvIdleTask+0x28>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d9f9      	bls.n	800610c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006118:	4b05      	ldr	r3, [pc, #20]	@ (8006130 <prvIdleTask+0x2c>)
 800611a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800611e:	601a      	str	r2, [r3, #0]
 8006120:	f3bf 8f4f 	dsb	sy
 8006124:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006128:	e7f0      	b.n	800610c <prvIdleTask+0x8>
 800612a:	bf00      	nop
 800612c:	200020b4 	.word	0x200020b4
 8006130:	e000ed04 	.word	0xe000ed04

08006134 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800613a:	2300      	movs	r3, #0
 800613c:	607b      	str	r3, [r7, #4]
 800613e:	e00c      	b.n	800615a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	4613      	mov	r3, r2
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	4413      	add	r3, r2
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	4a12      	ldr	r2, [pc, #72]	@ (8006194 <prvInitialiseTaskLists+0x60>)
 800614c:	4413      	add	r3, r2
 800614e:	4618      	mov	r0, r3
 8006150:	f7fe fc6e 	bl	8004a30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	3301      	adds	r3, #1
 8006158:	607b      	str	r3, [r7, #4]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2b37      	cmp	r3, #55	@ 0x37
 800615e:	d9ef      	bls.n	8006140 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006160:	480d      	ldr	r0, [pc, #52]	@ (8006198 <prvInitialiseTaskLists+0x64>)
 8006162:	f7fe fc65 	bl	8004a30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006166:	480d      	ldr	r0, [pc, #52]	@ (800619c <prvInitialiseTaskLists+0x68>)
 8006168:	f7fe fc62 	bl	8004a30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800616c:	480c      	ldr	r0, [pc, #48]	@ (80061a0 <prvInitialiseTaskLists+0x6c>)
 800616e:	f7fe fc5f 	bl	8004a30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006172:	480c      	ldr	r0, [pc, #48]	@ (80061a4 <prvInitialiseTaskLists+0x70>)
 8006174:	f7fe fc5c 	bl	8004a30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006178:	480b      	ldr	r0, [pc, #44]	@ (80061a8 <prvInitialiseTaskLists+0x74>)
 800617a:	f7fe fc59 	bl	8004a30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800617e:	4b0b      	ldr	r3, [pc, #44]	@ (80061ac <prvInitialiseTaskLists+0x78>)
 8006180:	4a05      	ldr	r2, [pc, #20]	@ (8006198 <prvInitialiseTaskLists+0x64>)
 8006182:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006184:	4b0a      	ldr	r3, [pc, #40]	@ (80061b0 <prvInitialiseTaskLists+0x7c>)
 8006186:	4a05      	ldr	r2, [pc, #20]	@ (800619c <prvInitialiseTaskLists+0x68>)
 8006188:	601a      	str	r2, [r3, #0]
}
 800618a:	bf00      	nop
 800618c:	3708      	adds	r7, #8
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	200020b4 	.word	0x200020b4
 8006198:	20002514 	.word	0x20002514
 800619c:	20002528 	.word	0x20002528
 80061a0:	20002544 	.word	0x20002544
 80061a4:	20002558 	.word	0x20002558
 80061a8:	20002570 	.word	0x20002570
 80061ac:	2000253c 	.word	0x2000253c
 80061b0:	20002540 	.word	0x20002540

080061b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061ba:	e019      	b.n	80061f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80061bc:	f000 fdec 	bl	8006d98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061c0:	4b10      	ldr	r3, [pc, #64]	@ (8006204 <prvCheckTasksWaitingTermination+0x50>)
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	3304      	adds	r3, #4
 80061cc:	4618      	mov	r0, r3
 80061ce:	f7fe fcb9 	bl	8004b44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80061d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006208 <prvCheckTasksWaitingTermination+0x54>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	3b01      	subs	r3, #1
 80061d8:	4a0b      	ldr	r2, [pc, #44]	@ (8006208 <prvCheckTasksWaitingTermination+0x54>)
 80061da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80061dc:	4b0b      	ldr	r3, [pc, #44]	@ (800620c <prvCheckTasksWaitingTermination+0x58>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	3b01      	subs	r3, #1
 80061e2:	4a0a      	ldr	r2, [pc, #40]	@ (800620c <prvCheckTasksWaitingTermination+0x58>)
 80061e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80061e6:	f000 fe09 	bl	8006dfc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f810 	bl	8006210 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061f0:	4b06      	ldr	r3, [pc, #24]	@ (800620c <prvCheckTasksWaitingTermination+0x58>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1e1      	bne.n	80061bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80061f8:	bf00      	nop
 80061fa:	bf00      	nop
 80061fc:	3708      	adds	r7, #8
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	20002558 	.word	0x20002558
 8006208:	20002584 	.word	0x20002584
 800620c:	2000256c 	.word	0x2000256c

08006210 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	3354      	adds	r3, #84	@ 0x54
 800621c:	4618      	mov	r0, r3
 800621e:	f001 fbbb 	bl	8007998 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006228:	2b00      	cmp	r3, #0
 800622a:	d108      	bne.n	800623e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006230:	4618      	mov	r0, r3
 8006232:	f000 ffa1 	bl	8007178 <vPortFree>
				vPortFree( pxTCB );
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 ff9e 	bl	8007178 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800623c:	e019      	b.n	8006272 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006244:	2b01      	cmp	r3, #1
 8006246:	d103      	bne.n	8006250 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 ff95 	bl	8007178 <vPortFree>
	}
 800624e:	e010      	b.n	8006272 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006256:	2b02      	cmp	r3, #2
 8006258:	d00b      	beq.n	8006272 <prvDeleteTCB+0x62>
	__asm volatile
 800625a:	f04f 0310 	mov.w	r3, #16
 800625e:	f383 8811 	msr	BASEPRI, r3
 8006262:	f3bf 8f6f 	isb	sy
 8006266:	f3bf 8f4f 	dsb	sy
 800626a:	60fb      	str	r3, [r7, #12]
}
 800626c:	bf00      	nop
 800626e:	bf00      	nop
 8006270:	e7fd      	b.n	800626e <prvDeleteTCB+0x5e>
	}
 8006272:	bf00      	nop
 8006274:	3710      	adds	r7, #16
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
	...

0800627c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006282:	4b0c      	ldr	r3, [pc, #48]	@ (80062b4 <prvResetNextTaskUnblockTime+0x38>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d104      	bne.n	8006296 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800628c:	4b0a      	ldr	r3, [pc, #40]	@ (80062b8 <prvResetNextTaskUnblockTime+0x3c>)
 800628e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006292:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006294:	e008      	b.n	80062a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006296:	4b07      	ldr	r3, [pc, #28]	@ (80062b4 <prvResetNextTaskUnblockTime+0x38>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	4a04      	ldr	r2, [pc, #16]	@ (80062b8 <prvResetNextTaskUnblockTime+0x3c>)
 80062a6:	6013      	str	r3, [r2, #0]
}
 80062a8:	bf00      	nop
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr
 80062b4:	2000253c 	.word	0x2000253c
 80062b8:	200025a4 	.word	0x200025a4

080062bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80062c2:	4b0b      	ldr	r3, [pc, #44]	@ (80062f0 <xTaskGetSchedulerState+0x34>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d102      	bne.n	80062d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80062ca:	2301      	movs	r3, #1
 80062cc:	607b      	str	r3, [r7, #4]
 80062ce:	e008      	b.n	80062e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062d0:	4b08      	ldr	r3, [pc, #32]	@ (80062f4 <xTaskGetSchedulerState+0x38>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d102      	bne.n	80062de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80062d8:	2302      	movs	r3, #2
 80062da:	607b      	str	r3, [r7, #4]
 80062dc:	e001      	b.n	80062e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80062de:	2300      	movs	r3, #0
 80062e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80062e2:	687b      	ldr	r3, [r7, #4]
	}
 80062e4:	4618      	mov	r0, r3
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr
 80062f0:	20002590 	.word	0x20002590
 80062f4:	200025ac 	.word	0x200025ac

080062f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b086      	sub	sp, #24
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006304:	2300      	movs	r3, #0
 8006306:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d058      	beq.n	80063c0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800630e:	4b2f      	ldr	r3, [pc, #188]	@ (80063cc <xTaskPriorityDisinherit+0xd4>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	693a      	ldr	r2, [r7, #16]
 8006314:	429a      	cmp	r2, r3
 8006316:	d00b      	beq.n	8006330 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006318:	f04f 0310 	mov.w	r3, #16
 800631c:	f383 8811 	msr	BASEPRI, r3
 8006320:	f3bf 8f6f 	isb	sy
 8006324:	f3bf 8f4f 	dsb	sy
 8006328:	60fb      	str	r3, [r7, #12]
}
 800632a:	bf00      	nop
 800632c:	bf00      	nop
 800632e:	e7fd      	b.n	800632c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006334:	2b00      	cmp	r3, #0
 8006336:	d10b      	bne.n	8006350 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006338:	f04f 0310 	mov.w	r3, #16
 800633c:	f383 8811 	msr	BASEPRI, r3
 8006340:	f3bf 8f6f 	isb	sy
 8006344:	f3bf 8f4f 	dsb	sy
 8006348:	60bb      	str	r3, [r7, #8]
}
 800634a:	bf00      	nop
 800634c:	bf00      	nop
 800634e:	e7fd      	b.n	800634c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006354:	1e5a      	subs	r2, r3, #1
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006362:	429a      	cmp	r2, r3
 8006364:	d02c      	beq.n	80063c0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800636a:	2b00      	cmp	r3, #0
 800636c:	d128      	bne.n	80063c0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	3304      	adds	r3, #4
 8006372:	4618      	mov	r0, r3
 8006374:	f7fe fbe6 	bl	8004b44 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006384:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006390:	4b0f      	ldr	r3, [pc, #60]	@ (80063d0 <xTaskPriorityDisinherit+0xd8>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	429a      	cmp	r2, r3
 8006396:	d903      	bls.n	80063a0 <xTaskPriorityDisinherit+0xa8>
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800639c:	4a0c      	ldr	r2, [pc, #48]	@ (80063d0 <xTaskPriorityDisinherit+0xd8>)
 800639e:	6013      	str	r3, [r2, #0]
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063a4:	4613      	mov	r3, r2
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	4413      	add	r3, r2
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	4a09      	ldr	r2, [pc, #36]	@ (80063d4 <xTaskPriorityDisinherit+0xdc>)
 80063ae:	441a      	add	r2, r3
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	3304      	adds	r3, #4
 80063b4:	4619      	mov	r1, r3
 80063b6:	4610      	mov	r0, r2
 80063b8:	f7fe fb67 	bl	8004a8a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80063bc:	2301      	movs	r3, #1
 80063be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80063c0:	697b      	ldr	r3, [r7, #20]
	}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3718      	adds	r7, #24
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	200020b0 	.word	0x200020b0
 80063d0:	2000258c 	.word	0x2000258c
 80063d4:	200020b4 	.word	0x200020b4

080063d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80063e2:	4b21      	ldr	r3, [pc, #132]	@ (8006468 <prvAddCurrentTaskToDelayedList+0x90>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063e8:	4b20      	ldr	r3, [pc, #128]	@ (800646c <prvAddCurrentTaskToDelayedList+0x94>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	3304      	adds	r3, #4
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7fe fba8 	bl	8004b44 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80063fa:	d10a      	bne.n	8006412 <prvAddCurrentTaskToDelayedList+0x3a>
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d007      	beq.n	8006412 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006402:	4b1a      	ldr	r3, [pc, #104]	@ (800646c <prvAddCurrentTaskToDelayedList+0x94>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	3304      	adds	r3, #4
 8006408:	4619      	mov	r1, r3
 800640a:	4819      	ldr	r0, [pc, #100]	@ (8006470 <prvAddCurrentTaskToDelayedList+0x98>)
 800640c:	f7fe fb3d 	bl	8004a8a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006410:	e026      	b.n	8006460 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4413      	add	r3, r2
 8006418:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800641a:	4b14      	ldr	r3, [pc, #80]	@ (800646c <prvAddCurrentTaskToDelayedList+0x94>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68ba      	ldr	r2, [r7, #8]
 8006420:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006422:	68ba      	ldr	r2, [r7, #8]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	429a      	cmp	r2, r3
 8006428:	d209      	bcs.n	800643e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800642a:	4b12      	ldr	r3, [pc, #72]	@ (8006474 <prvAddCurrentTaskToDelayedList+0x9c>)
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	4b0f      	ldr	r3, [pc, #60]	@ (800646c <prvAddCurrentTaskToDelayedList+0x94>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	3304      	adds	r3, #4
 8006434:	4619      	mov	r1, r3
 8006436:	4610      	mov	r0, r2
 8006438:	f7fe fb4b 	bl	8004ad2 <vListInsert>
}
 800643c:	e010      	b.n	8006460 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800643e:	4b0e      	ldr	r3, [pc, #56]	@ (8006478 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	4b0a      	ldr	r3, [pc, #40]	@ (800646c <prvAddCurrentTaskToDelayedList+0x94>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	3304      	adds	r3, #4
 8006448:	4619      	mov	r1, r3
 800644a:	4610      	mov	r0, r2
 800644c:	f7fe fb41 	bl	8004ad2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006450:	4b0a      	ldr	r3, [pc, #40]	@ (800647c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	429a      	cmp	r2, r3
 8006458:	d202      	bcs.n	8006460 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800645a:	4a08      	ldr	r2, [pc, #32]	@ (800647c <prvAddCurrentTaskToDelayedList+0xa4>)
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	6013      	str	r3, [r2, #0]
}
 8006460:	bf00      	nop
 8006462:	3710      	adds	r7, #16
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	20002588 	.word	0x20002588
 800646c:	200020b0 	.word	0x200020b0
 8006470:	20002570 	.word	0x20002570
 8006474:	20002540 	.word	0x20002540
 8006478:	2000253c 	.word	0x2000253c
 800647c:	200025a4 	.word	0x200025a4

08006480 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b08a      	sub	sp, #40	@ 0x28
 8006484:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006486:	2300      	movs	r3, #0
 8006488:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800648a:	f000 fb13 	bl	8006ab4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800648e:	4b1d      	ldr	r3, [pc, #116]	@ (8006504 <xTimerCreateTimerTask+0x84>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d021      	beq.n	80064da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006496:	2300      	movs	r3, #0
 8006498:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800649a:	2300      	movs	r3, #0
 800649c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800649e:	1d3a      	adds	r2, r7, #4
 80064a0:	f107 0108 	add.w	r1, r7, #8
 80064a4:	f107 030c 	add.w	r3, r7, #12
 80064a8:	4618      	mov	r0, r3
 80064aa:	f7fe faa7 	bl	80049fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80064ae:	6879      	ldr	r1, [r7, #4]
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	9202      	str	r2, [sp, #8]
 80064b6:	9301      	str	r3, [sp, #4]
 80064b8:	2302      	movs	r3, #2
 80064ba:	9300      	str	r3, [sp, #0]
 80064bc:	2300      	movs	r3, #0
 80064be:	460a      	mov	r2, r1
 80064c0:	4911      	ldr	r1, [pc, #68]	@ (8006508 <xTimerCreateTimerTask+0x88>)
 80064c2:	4812      	ldr	r0, [pc, #72]	@ (800650c <xTimerCreateTimerTask+0x8c>)
 80064c4:	f7ff f862 	bl	800558c <xTaskCreateStatic>
 80064c8:	4603      	mov	r3, r0
 80064ca:	4a11      	ldr	r2, [pc, #68]	@ (8006510 <xTimerCreateTimerTask+0x90>)
 80064cc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80064ce:	4b10      	ldr	r3, [pc, #64]	@ (8006510 <xTimerCreateTimerTask+0x90>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d001      	beq.n	80064da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80064d6:	2301      	movs	r3, #1
 80064d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10b      	bne.n	80064f8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80064e0:	f04f 0310 	mov.w	r3, #16
 80064e4:	f383 8811 	msr	BASEPRI, r3
 80064e8:	f3bf 8f6f 	isb	sy
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	613b      	str	r3, [r7, #16]
}
 80064f2:	bf00      	nop
 80064f4:	bf00      	nop
 80064f6:	e7fd      	b.n	80064f4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80064f8:	697b      	ldr	r3, [r7, #20]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3718      	adds	r7, #24
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	200025e0 	.word	0x200025e0
 8006508:	08008360 	.word	0x08008360
 800650c:	0800664d 	.word	0x0800664d
 8006510:	200025e4 	.word	0x200025e4

08006514 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b08a      	sub	sp, #40	@ 0x28
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
 8006520:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006522:	2300      	movs	r3, #0
 8006524:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d10b      	bne.n	8006544 <xTimerGenericCommand+0x30>
	__asm volatile
 800652c:	f04f 0310 	mov.w	r3, #16
 8006530:	f383 8811 	msr	BASEPRI, r3
 8006534:	f3bf 8f6f 	isb	sy
 8006538:	f3bf 8f4f 	dsb	sy
 800653c:	623b      	str	r3, [r7, #32]
}
 800653e:	bf00      	nop
 8006540:	bf00      	nop
 8006542:	e7fd      	b.n	8006540 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006544:	4b19      	ldr	r3, [pc, #100]	@ (80065ac <xTimerGenericCommand+0x98>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d02a      	beq.n	80065a2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	2b05      	cmp	r3, #5
 800655c:	dc18      	bgt.n	8006590 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800655e:	f7ff fead 	bl	80062bc <xTaskGetSchedulerState>
 8006562:	4603      	mov	r3, r0
 8006564:	2b02      	cmp	r3, #2
 8006566:	d109      	bne.n	800657c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006568:	4b10      	ldr	r3, [pc, #64]	@ (80065ac <xTimerGenericCommand+0x98>)
 800656a:	6818      	ldr	r0, [r3, #0]
 800656c:	f107 0110 	add.w	r1, r7, #16
 8006570:	2300      	movs	r3, #0
 8006572:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006574:	f7fe fc1a 	bl	8004dac <xQueueGenericSend>
 8006578:	6278      	str	r0, [r7, #36]	@ 0x24
 800657a:	e012      	b.n	80065a2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800657c:	4b0b      	ldr	r3, [pc, #44]	@ (80065ac <xTimerGenericCommand+0x98>)
 800657e:	6818      	ldr	r0, [r3, #0]
 8006580:	f107 0110 	add.w	r1, r7, #16
 8006584:	2300      	movs	r3, #0
 8006586:	2200      	movs	r2, #0
 8006588:	f7fe fc10 	bl	8004dac <xQueueGenericSend>
 800658c:	6278      	str	r0, [r7, #36]	@ 0x24
 800658e:	e008      	b.n	80065a2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006590:	4b06      	ldr	r3, [pc, #24]	@ (80065ac <xTimerGenericCommand+0x98>)
 8006592:	6818      	ldr	r0, [r3, #0]
 8006594:	f107 0110 	add.w	r1, r7, #16
 8006598:	2300      	movs	r3, #0
 800659a:	683a      	ldr	r2, [r7, #0]
 800659c:	f7fe fd08 	bl	8004fb0 <xQueueGenericSendFromISR>
 80065a0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80065a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3728      	adds	r7, #40	@ 0x28
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	200025e0 	.word	0x200025e0

080065b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b088      	sub	sp, #32
 80065b4:	af02      	add	r7, sp, #8
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065ba:	4b23      	ldr	r3, [pc, #140]	@ (8006648 <prvProcessExpiredTimer+0x98>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	3304      	adds	r3, #4
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7fe fabb 	bl	8004b44 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80065d4:	f003 0304 	and.w	r3, r3, #4
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d023      	beq.n	8006624 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	699a      	ldr	r2, [r3, #24]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	18d1      	adds	r1, r2, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	683a      	ldr	r2, [r7, #0]
 80065e8:	6978      	ldr	r0, [r7, #20]
 80065ea:	f000 f8d5 	bl	8006798 <prvInsertTimerInActiveList>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d020      	beq.n	8006636 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80065f4:	2300      	movs	r3, #0
 80065f6:	9300      	str	r3, [sp, #0]
 80065f8:	2300      	movs	r3, #0
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	2100      	movs	r1, #0
 80065fe:	6978      	ldr	r0, [r7, #20]
 8006600:	f7ff ff88 	bl	8006514 <xTimerGenericCommand>
 8006604:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d114      	bne.n	8006636 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800660c:	f04f 0310 	mov.w	r3, #16
 8006610:	f383 8811 	msr	BASEPRI, r3
 8006614:	f3bf 8f6f 	isb	sy
 8006618:	f3bf 8f4f 	dsb	sy
 800661c:	60fb      	str	r3, [r7, #12]
}
 800661e:	bf00      	nop
 8006620:	bf00      	nop
 8006622:	e7fd      	b.n	8006620 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800662a:	f023 0301 	bic.w	r3, r3, #1
 800662e:	b2da      	uxtb	r2, r3
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	6978      	ldr	r0, [r7, #20]
 800663c:	4798      	blx	r3
}
 800663e:	bf00      	nop
 8006640:	3718      	adds	r7, #24
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	200025d8 	.word	0x200025d8

0800664c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006654:	f107 0308 	add.w	r3, r7, #8
 8006658:	4618      	mov	r0, r3
 800665a:	f000 f859 	bl	8006710 <prvGetNextExpireTime>
 800665e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	4619      	mov	r1, r3
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	f000 f805 	bl	8006674 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800666a:	f000 f8d7 	bl	800681c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800666e:	bf00      	nop
 8006670:	e7f0      	b.n	8006654 <prvTimerTask+0x8>
	...

08006674 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800667e:	f7ff fa29 	bl	8005ad4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006682:	f107 0308 	add.w	r3, r7, #8
 8006686:	4618      	mov	r0, r3
 8006688:	f000 f866 	bl	8006758 <prvSampleTimeNow>
 800668c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d130      	bne.n	80066f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d10a      	bne.n	80066b0 <prvProcessTimerOrBlockTask+0x3c>
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d806      	bhi.n	80066b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80066a2:	f7ff fa25 	bl	8005af0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80066a6:	68f9      	ldr	r1, [r7, #12]
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f7ff ff81 	bl	80065b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80066ae:	e024      	b.n	80066fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d008      	beq.n	80066c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80066b6:	4b13      	ldr	r3, [pc, #76]	@ (8006704 <prvProcessTimerOrBlockTask+0x90>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d101      	bne.n	80066c4 <prvProcessTimerOrBlockTask+0x50>
 80066c0:	2301      	movs	r3, #1
 80066c2:	e000      	b.n	80066c6 <prvProcessTimerOrBlockTask+0x52>
 80066c4:	2300      	movs	r3, #0
 80066c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80066c8:	4b0f      	ldr	r3, [pc, #60]	@ (8006708 <prvProcessTimerOrBlockTask+0x94>)
 80066ca:	6818      	ldr	r0, [r3, #0]
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	683a      	ldr	r2, [r7, #0]
 80066d4:	4619      	mov	r1, r3
 80066d6:	f7fe ff25 	bl	8005524 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80066da:	f7ff fa09 	bl	8005af0 <xTaskResumeAll>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d10a      	bne.n	80066fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80066e4:	4b09      	ldr	r3, [pc, #36]	@ (800670c <prvProcessTimerOrBlockTask+0x98>)
 80066e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066ea:	601a      	str	r2, [r3, #0]
 80066ec:	f3bf 8f4f 	dsb	sy
 80066f0:	f3bf 8f6f 	isb	sy
}
 80066f4:	e001      	b.n	80066fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80066f6:	f7ff f9fb 	bl	8005af0 <xTaskResumeAll>
}
 80066fa:	bf00      	nop
 80066fc:	3710      	adds	r7, #16
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	200025dc 	.word	0x200025dc
 8006708:	200025e0 	.word	0x200025e0
 800670c:	e000ed04 	.word	0xe000ed04

08006710 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006710:	b480      	push	{r7}
 8006712:	b085      	sub	sp, #20
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006718:	4b0e      	ldr	r3, [pc, #56]	@ (8006754 <prvGetNextExpireTime+0x44>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d101      	bne.n	8006726 <prvGetNextExpireTime+0x16>
 8006722:	2201      	movs	r2, #1
 8006724:	e000      	b.n	8006728 <prvGetNextExpireTime+0x18>
 8006726:	2200      	movs	r2, #0
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d105      	bne.n	8006740 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006734:	4b07      	ldr	r3, [pc, #28]	@ (8006754 <prvGetNextExpireTime+0x44>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	60fb      	str	r3, [r7, #12]
 800673e:	e001      	b.n	8006744 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006740:	2300      	movs	r3, #0
 8006742:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006744:	68fb      	ldr	r3, [r7, #12]
}
 8006746:	4618      	mov	r0, r3
 8006748:	3714      	adds	r7, #20
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	200025d8 	.word	0x200025d8

08006758 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006760:	f7ff fa64 	bl	8005c2c <xTaskGetTickCount>
 8006764:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006766:	4b0b      	ldr	r3, [pc, #44]	@ (8006794 <prvSampleTimeNow+0x3c>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	429a      	cmp	r2, r3
 800676e:	d205      	bcs.n	800677c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006770:	f000 f93a 	bl	80069e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	601a      	str	r2, [r3, #0]
 800677a:	e002      	b.n	8006782 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006782:	4a04      	ldr	r2, [pc, #16]	@ (8006794 <prvSampleTimeNow+0x3c>)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006788:	68fb      	ldr	r3, [r7, #12]
}
 800678a:	4618      	mov	r0, r3
 800678c:	3710      	adds	r7, #16
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	200025e8 	.word	0x200025e8

08006798 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b086      	sub	sp, #24
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	607a      	str	r2, [r7, #4]
 80067a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80067a6:	2300      	movs	r3, #0
 80067a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d812      	bhi.n	80067e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	1ad2      	subs	r2, r2, r3
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d302      	bcc.n	80067d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80067cc:	2301      	movs	r3, #1
 80067ce:	617b      	str	r3, [r7, #20]
 80067d0:	e01b      	b.n	800680a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80067d2:	4b10      	ldr	r3, [pc, #64]	@ (8006814 <prvInsertTimerInActiveList+0x7c>)
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	3304      	adds	r3, #4
 80067da:	4619      	mov	r1, r3
 80067dc:	4610      	mov	r0, r2
 80067de:	f7fe f978 	bl	8004ad2 <vListInsert>
 80067e2:	e012      	b.n	800680a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d206      	bcs.n	80067fa <prvInsertTimerInActiveList+0x62>
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d302      	bcc.n	80067fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80067f4:	2301      	movs	r3, #1
 80067f6:	617b      	str	r3, [r7, #20]
 80067f8:	e007      	b.n	800680a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80067fa:	4b07      	ldr	r3, [pc, #28]	@ (8006818 <prvInsertTimerInActiveList+0x80>)
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	3304      	adds	r3, #4
 8006802:	4619      	mov	r1, r3
 8006804:	4610      	mov	r0, r2
 8006806:	f7fe f964 	bl	8004ad2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800680a:	697b      	ldr	r3, [r7, #20]
}
 800680c:	4618      	mov	r0, r3
 800680e:	3718      	adds	r7, #24
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	200025dc 	.word	0x200025dc
 8006818:	200025d8 	.word	0x200025d8

0800681c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b08e      	sub	sp, #56	@ 0x38
 8006820:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006822:	e0ce      	b.n	80069c2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2b00      	cmp	r3, #0
 8006828:	da19      	bge.n	800685e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800682a:	1d3b      	adds	r3, r7, #4
 800682c:	3304      	adds	r3, #4
 800682e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006832:	2b00      	cmp	r3, #0
 8006834:	d10b      	bne.n	800684e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006836:	f04f 0310 	mov.w	r3, #16
 800683a:	f383 8811 	msr	BASEPRI, r3
 800683e:	f3bf 8f6f 	isb	sy
 8006842:	f3bf 8f4f 	dsb	sy
 8006846:	61fb      	str	r3, [r7, #28]
}
 8006848:	bf00      	nop
 800684a:	bf00      	nop
 800684c:	e7fd      	b.n	800684a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800684e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006854:	6850      	ldr	r0, [r2, #4]
 8006856:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006858:	6892      	ldr	r2, [r2, #8]
 800685a:	4611      	mov	r1, r2
 800685c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2b00      	cmp	r3, #0
 8006862:	f2c0 80ae 	blt.w	80069c2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800686a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800686c:	695b      	ldr	r3, [r3, #20]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d004      	beq.n	800687c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006874:	3304      	adds	r3, #4
 8006876:	4618      	mov	r0, r3
 8006878:	f7fe f964 	bl	8004b44 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800687c:	463b      	mov	r3, r7
 800687e:	4618      	mov	r0, r3
 8006880:	f7ff ff6a 	bl	8006758 <prvSampleTimeNow>
 8006884:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2b09      	cmp	r3, #9
 800688a:	f200 8097 	bhi.w	80069bc <prvProcessReceivedCommands+0x1a0>
 800688e:	a201      	add	r2, pc, #4	@ (adr r2, 8006894 <prvProcessReceivedCommands+0x78>)
 8006890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006894:	080068bd 	.word	0x080068bd
 8006898:	080068bd 	.word	0x080068bd
 800689c:	080068bd 	.word	0x080068bd
 80068a0:	08006933 	.word	0x08006933
 80068a4:	08006947 	.word	0x08006947
 80068a8:	08006993 	.word	0x08006993
 80068ac:	080068bd 	.word	0x080068bd
 80068b0:	080068bd 	.word	0x080068bd
 80068b4:	08006933 	.word	0x08006933
 80068b8:	08006947 	.word	0x08006947
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80068bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80068c2:	f043 0301 	orr.w	r3, r3, #1
 80068c6:	b2da      	uxtb	r2, r3
 80068c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80068ce:	68ba      	ldr	r2, [r7, #8]
 80068d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068d2:	699b      	ldr	r3, [r3, #24]
 80068d4:	18d1      	adds	r1, r2, r3
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068dc:	f7ff ff5c 	bl	8006798 <prvInsertTimerInActiveList>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d06c      	beq.n	80069c0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80068e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068e8:	6a1b      	ldr	r3, [r3, #32]
 80068ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80068ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80068f4:	f003 0304 	and.w	r3, r3, #4
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d061      	beq.n	80069c0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80068fc:	68ba      	ldr	r2, [r7, #8]
 80068fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	441a      	add	r2, r3
 8006904:	2300      	movs	r3, #0
 8006906:	9300      	str	r3, [sp, #0]
 8006908:	2300      	movs	r3, #0
 800690a:	2100      	movs	r1, #0
 800690c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800690e:	f7ff fe01 	bl	8006514 <xTimerGenericCommand>
 8006912:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006914:	6a3b      	ldr	r3, [r7, #32]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d152      	bne.n	80069c0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800691a:	f04f 0310 	mov.w	r3, #16
 800691e:	f383 8811 	msr	BASEPRI, r3
 8006922:	f3bf 8f6f 	isb	sy
 8006926:	f3bf 8f4f 	dsb	sy
 800692a:	61bb      	str	r3, [r7, #24]
}
 800692c:	bf00      	nop
 800692e:	bf00      	nop
 8006930:	e7fd      	b.n	800692e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006934:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006938:	f023 0301 	bic.w	r3, r3, #1
 800693c:	b2da      	uxtb	r2, r3
 800693e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006940:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006944:	e03d      	b.n	80069c2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006948:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800694c:	f043 0301 	orr.w	r3, r3, #1
 8006950:	b2da      	uxtb	r2, r3
 8006952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006954:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006958:	68ba      	ldr	r2, [r7, #8]
 800695a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800695c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800695e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d10b      	bne.n	800697e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006966:	f04f 0310 	mov.w	r3, #16
 800696a:	f383 8811 	msr	BASEPRI, r3
 800696e:	f3bf 8f6f 	isb	sy
 8006972:	f3bf 8f4f 	dsb	sy
 8006976:	617b      	str	r3, [r7, #20]
}
 8006978:	bf00      	nop
 800697a:	bf00      	nop
 800697c:	e7fd      	b.n	800697a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800697e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006980:	699a      	ldr	r2, [r3, #24]
 8006982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006984:	18d1      	adds	r1, r2, r3
 8006986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006988:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800698a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800698c:	f7ff ff04 	bl	8006798 <prvInsertTimerInActiveList>
					break;
 8006990:	e017      	b.n	80069c2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006994:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006998:	f003 0302 	and.w	r3, r3, #2
 800699c:	2b00      	cmp	r3, #0
 800699e:	d103      	bne.n	80069a8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80069a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069a2:	f000 fbe9 	bl	8007178 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80069a6:	e00c      	b.n	80069c2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80069a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80069ae:	f023 0301 	bic.w	r3, r3, #1
 80069b2:	b2da      	uxtb	r2, r3
 80069b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80069ba:	e002      	b.n	80069c2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80069bc:	bf00      	nop
 80069be:	e000      	b.n	80069c2 <prvProcessReceivedCommands+0x1a6>
					break;
 80069c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80069c2:	4b08      	ldr	r3, [pc, #32]	@ (80069e4 <prvProcessReceivedCommands+0x1c8>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	1d39      	adds	r1, r7, #4
 80069c8:	2200      	movs	r2, #0
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7fe fb8e 	bl	80050ec <xQueueReceive>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f47f af26 	bne.w	8006824 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80069d8:	bf00      	nop
 80069da:	bf00      	nop
 80069dc:	3730      	adds	r7, #48	@ 0x30
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	200025e0 	.word	0x200025e0

080069e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b088      	sub	sp, #32
 80069ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80069ee:	e049      	b.n	8006a84 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80069f0:	4b2e      	ldr	r3, [pc, #184]	@ (8006aac <prvSwitchTimerLists+0xc4>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069fa:	4b2c      	ldr	r3, [pc, #176]	@ (8006aac <prvSwitchTimerLists+0xc4>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	3304      	adds	r3, #4
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7fe f89b 	bl	8004b44 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6a1b      	ldr	r3, [r3, #32]
 8006a12:	68f8      	ldr	r0, [r7, #12]
 8006a14:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a1c:	f003 0304 	and.w	r3, r3, #4
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d02f      	beq.n	8006a84 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	699b      	ldr	r3, [r3, #24]
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006a2e:	68ba      	ldr	r2, [r7, #8]
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d90e      	bls.n	8006a54 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	68ba      	ldr	r2, [r7, #8]
 8006a3a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a42:	4b1a      	ldr	r3, [pc, #104]	@ (8006aac <prvSwitchTimerLists+0xc4>)
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	3304      	adds	r3, #4
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	4610      	mov	r0, r2
 8006a4e:	f7fe f840 	bl	8004ad2 <vListInsert>
 8006a52:	e017      	b.n	8006a84 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a54:	2300      	movs	r3, #0
 8006a56:	9300      	str	r3, [sp, #0]
 8006a58:	2300      	movs	r3, #0
 8006a5a:	693a      	ldr	r2, [r7, #16]
 8006a5c:	2100      	movs	r1, #0
 8006a5e:	68f8      	ldr	r0, [r7, #12]
 8006a60:	f7ff fd58 	bl	8006514 <xTimerGenericCommand>
 8006a64:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d10b      	bne.n	8006a84 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006a6c:	f04f 0310 	mov.w	r3, #16
 8006a70:	f383 8811 	msr	BASEPRI, r3
 8006a74:	f3bf 8f6f 	isb	sy
 8006a78:	f3bf 8f4f 	dsb	sy
 8006a7c:	603b      	str	r3, [r7, #0]
}
 8006a7e:	bf00      	nop
 8006a80:	bf00      	nop
 8006a82:	e7fd      	b.n	8006a80 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a84:	4b09      	ldr	r3, [pc, #36]	@ (8006aac <prvSwitchTimerLists+0xc4>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1b0      	bne.n	80069f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006a8e:	4b07      	ldr	r3, [pc, #28]	@ (8006aac <prvSwitchTimerLists+0xc4>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006a94:	4b06      	ldr	r3, [pc, #24]	@ (8006ab0 <prvSwitchTimerLists+0xc8>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a04      	ldr	r2, [pc, #16]	@ (8006aac <prvSwitchTimerLists+0xc4>)
 8006a9a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006a9c:	4a04      	ldr	r2, [pc, #16]	@ (8006ab0 <prvSwitchTimerLists+0xc8>)
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	6013      	str	r3, [r2, #0]
}
 8006aa2:	bf00      	nop
 8006aa4:	3718      	adds	r7, #24
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	200025d8 	.word	0x200025d8
 8006ab0:	200025dc 	.word	0x200025dc

08006ab4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006aba:	f000 f96d 	bl	8006d98 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006abe:	4b15      	ldr	r3, [pc, #84]	@ (8006b14 <prvCheckForValidListAndQueue+0x60>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d120      	bne.n	8006b08 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006ac6:	4814      	ldr	r0, [pc, #80]	@ (8006b18 <prvCheckForValidListAndQueue+0x64>)
 8006ac8:	f7fd ffb2 	bl	8004a30 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006acc:	4813      	ldr	r0, [pc, #76]	@ (8006b1c <prvCheckForValidListAndQueue+0x68>)
 8006ace:	f7fd ffaf 	bl	8004a30 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006ad2:	4b13      	ldr	r3, [pc, #76]	@ (8006b20 <prvCheckForValidListAndQueue+0x6c>)
 8006ad4:	4a10      	ldr	r2, [pc, #64]	@ (8006b18 <prvCheckForValidListAndQueue+0x64>)
 8006ad6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006ad8:	4b12      	ldr	r3, [pc, #72]	@ (8006b24 <prvCheckForValidListAndQueue+0x70>)
 8006ada:	4a10      	ldr	r2, [pc, #64]	@ (8006b1c <prvCheckForValidListAndQueue+0x68>)
 8006adc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006ade:	2300      	movs	r3, #0
 8006ae0:	9300      	str	r3, [sp, #0]
 8006ae2:	4b11      	ldr	r3, [pc, #68]	@ (8006b28 <prvCheckForValidListAndQueue+0x74>)
 8006ae4:	4a11      	ldr	r2, [pc, #68]	@ (8006b2c <prvCheckForValidListAndQueue+0x78>)
 8006ae6:	2110      	movs	r1, #16
 8006ae8:	200a      	movs	r0, #10
 8006aea:	f7fe f8bf 	bl	8004c6c <xQueueGenericCreateStatic>
 8006aee:	4603      	mov	r3, r0
 8006af0:	4a08      	ldr	r2, [pc, #32]	@ (8006b14 <prvCheckForValidListAndQueue+0x60>)
 8006af2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006af4:	4b07      	ldr	r3, [pc, #28]	@ (8006b14 <prvCheckForValidListAndQueue+0x60>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d005      	beq.n	8006b08 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006afc:	4b05      	ldr	r3, [pc, #20]	@ (8006b14 <prvCheckForValidListAndQueue+0x60>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	490b      	ldr	r1, [pc, #44]	@ (8006b30 <prvCheckForValidListAndQueue+0x7c>)
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7fe fce4 	bl	80054d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b08:	f000 f978 	bl	8006dfc <vPortExitCritical>
}
 8006b0c:	bf00      	nop
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	200025e0 	.word	0x200025e0
 8006b18:	200025b0 	.word	0x200025b0
 8006b1c:	200025c4 	.word	0x200025c4
 8006b20:	200025d8 	.word	0x200025d8
 8006b24:	200025dc 	.word	0x200025dc
 8006b28:	2000268c 	.word	0x2000268c
 8006b2c:	200025ec 	.word	0x200025ec
 8006b30:	08008368 	.word	0x08008368

08006b34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006b34:	b480      	push	{r7}
 8006b36:	b085      	sub	sp, #20
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	3b04      	subs	r3, #4
 8006b44:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006b4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	3b04      	subs	r3, #4
 8006b52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	f023 0201 	bic.w	r2, r3, #1
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	3b04      	subs	r3, #4
 8006b62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006b64:	4a0c      	ldr	r2, [pc, #48]	@ (8006b98 <pxPortInitialiseStack+0x64>)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	3b14      	subs	r3, #20
 8006b6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	3b04      	subs	r3, #4
 8006b7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f06f 0202 	mvn.w	r2, #2
 8006b82:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	3b20      	subs	r3, #32
 8006b88:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3714      	adds	r7, #20
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr
 8006b98:	08006b9d 	.word	0x08006b9d

08006b9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b085      	sub	sp, #20
 8006ba0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006ba6:	4b13      	ldr	r3, [pc, #76]	@ (8006bf4 <prvTaskExitError+0x58>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006bae:	d00b      	beq.n	8006bc8 <prvTaskExitError+0x2c>
	__asm volatile
 8006bb0:	f04f 0310 	mov.w	r3, #16
 8006bb4:	f383 8811 	msr	BASEPRI, r3
 8006bb8:	f3bf 8f6f 	isb	sy
 8006bbc:	f3bf 8f4f 	dsb	sy
 8006bc0:	60fb      	str	r3, [r7, #12]
}
 8006bc2:	bf00      	nop
 8006bc4:	bf00      	nop
 8006bc6:	e7fd      	b.n	8006bc4 <prvTaskExitError+0x28>
	__asm volatile
 8006bc8:	f04f 0310 	mov.w	r3, #16
 8006bcc:	f383 8811 	msr	BASEPRI, r3
 8006bd0:	f3bf 8f6f 	isb	sy
 8006bd4:	f3bf 8f4f 	dsb	sy
 8006bd8:	60bb      	str	r3, [r7, #8]
}
 8006bda:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006bdc:	bf00      	nop
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d0fc      	beq.n	8006bde <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006be4:	bf00      	nop
 8006be6:	bf00      	nop
 8006be8:	3714      	adds	r7, #20
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	2000000c 	.word	0x2000000c
	...

08006c00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006c00:	4b07      	ldr	r3, [pc, #28]	@ (8006c20 <pxCurrentTCBConst2>)
 8006c02:	6819      	ldr	r1, [r3, #0]
 8006c04:	6808      	ldr	r0, [r1, #0]
 8006c06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c0a:	f380 8809 	msr	PSP, r0
 8006c0e:	f3bf 8f6f 	isb	sy
 8006c12:	f04f 0000 	mov.w	r0, #0
 8006c16:	f380 8811 	msr	BASEPRI, r0
 8006c1a:	4770      	bx	lr
 8006c1c:	f3af 8000 	nop.w

08006c20 <pxCurrentTCBConst2>:
 8006c20:	200020b0 	.word	0x200020b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006c24:	bf00      	nop
 8006c26:	bf00      	nop

08006c28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006c28:	4808      	ldr	r0, [pc, #32]	@ (8006c4c <prvPortStartFirstTask+0x24>)
 8006c2a:	6800      	ldr	r0, [r0, #0]
 8006c2c:	6800      	ldr	r0, [r0, #0]
 8006c2e:	f380 8808 	msr	MSP, r0
 8006c32:	f04f 0000 	mov.w	r0, #0
 8006c36:	f380 8814 	msr	CONTROL, r0
 8006c3a:	b662      	cpsie	i
 8006c3c:	b661      	cpsie	f
 8006c3e:	f3bf 8f4f 	dsb	sy
 8006c42:	f3bf 8f6f 	isb	sy
 8006c46:	df00      	svc	0
 8006c48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006c4a:	bf00      	nop
 8006c4c:	e000ed08 	.word	0xe000ed08

08006c50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b086      	sub	sp, #24
 8006c54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006c56:	4b47      	ldr	r3, [pc, #284]	@ (8006d74 <xPortStartScheduler+0x124>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a47      	ldr	r2, [pc, #284]	@ (8006d78 <xPortStartScheduler+0x128>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d10b      	bne.n	8006c78 <xPortStartScheduler+0x28>
	__asm volatile
 8006c60:	f04f 0310 	mov.w	r3, #16
 8006c64:	f383 8811 	msr	BASEPRI, r3
 8006c68:	f3bf 8f6f 	isb	sy
 8006c6c:	f3bf 8f4f 	dsb	sy
 8006c70:	60fb      	str	r3, [r7, #12]
}
 8006c72:	bf00      	nop
 8006c74:	bf00      	nop
 8006c76:	e7fd      	b.n	8006c74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006c78:	4b3e      	ldr	r3, [pc, #248]	@ (8006d74 <xPortStartScheduler+0x124>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a3f      	ldr	r2, [pc, #252]	@ (8006d7c <xPortStartScheduler+0x12c>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d10b      	bne.n	8006c9a <xPortStartScheduler+0x4a>
	__asm volatile
 8006c82:	f04f 0310 	mov.w	r3, #16
 8006c86:	f383 8811 	msr	BASEPRI, r3
 8006c8a:	f3bf 8f6f 	isb	sy
 8006c8e:	f3bf 8f4f 	dsb	sy
 8006c92:	613b      	str	r3, [r7, #16]
}
 8006c94:	bf00      	nop
 8006c96:	bf00      	nop
 8006c98:	e7fd      	b.n	8006c96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006c9a:	4b39      	ldr	r3, [pc, #228]	@ (8006d80 <xPortStartScheduler+0x130>)
 8006c9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	22ff      	movs	r2, #255	@ 0xff
 8006caa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006cb4:	78fb      	ldrb	r3, [r7, #3]
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	f003 0310 	and.w	r3, r3, #16
 8006cbc:	b2da      	uxtb	r2, r3
 8006cbe:	4b31      	ldr	r3, [pc, #196]	@ (8006d84 <xPortStartScheduler+0x134>)
 8006cc0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006cc2:	4b31      	ldr	r3, [pc, #196]	@ (8006d88 <xPortStartScheduler+0x138>)
 8006cc4:	2207      	movs	r2, #7
 8006cc6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006cc8:	e009      	b.n	8006cde <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006cca:	4b2f      	ldr	r3, [pc, #188]	@ (8006d88 <xPortStartScheduler+0x138>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	3b01      	subs	r3, #1
 8006cd0:	4a2d      	ldr	r2, [pc, #180]	@ (8006d88 <xPortStartScheduler+0x138>)
 8006cd2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006cd4:	78fb      	ldrb	r3, [r7, #3]
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	005b      	lsls	r3, r3, #1
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006cde:	78fb      	ldrb	r3, [r7, #3]
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ce6:	2b80      	cmp	r3, #128	@ 0x80
 8006ce8:	d0ef      	beq.n	8006cca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006cea:	4b27      	ldr	r3, [pc, #156]	@ (8006d88 <xPortStartScheduler+0x138>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f1c3 0307 	rsb	r3, r3, #7
 8006cf2:	2b04      	cmp	r3, #4
 8006cf4:	d00b      	beq.n	8006d0e <xPortStartScheduler+0xbe>
	__asm volatile
 8006cf6:	f04f 0310 	mov.w	r3, #16
 8006cfa:	f383 8811 	msr	BASEPRI, r3
 8006cfe:	f3bf 8f6f 	isb	sy
 8006d02:	f3bf 8f4f 	dsb	sy
 8006d06:	60bb      	str	r3, [r7, #8]
}
 8006d08:	bf00      	nop
 8006d0a:	bf00      	nop
 8006d0c:	e7fd      	b.n	8006d0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8006d88 <xPortStartScheduler+0x138>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	021b      	lsls	r3, r3, #8
 8006d14:	4a1c      	ldr	r2, [pc, #112]	@ (8006d88 <xPortStartScheduler+0x138>)
 8006d16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006d18:	4b1b      	ldr	r3, [pc, #108]	@ (8006d88 <xPortStartScheduler+0x138>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006d20:	4a19      	ldr	r2, [pc, #100]	@ (8006d88 <xPortStartScheduler+0x138>)
 8006d22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	b2da      	uxtb	r2, r3
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006d2c:	4b17      	ldr	r3, [pc, #92]	@ (8006d8c <xPortStartScheduler+0x13c>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a16      	ldr	r2, [pc, #88]	@ (8006d8c <xPortStartScheduler+0x13c>)
 8006d32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006d36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006d38:	4b14      	ldr	r3, [pc, #80]	@ (8006d8c <xPortStartScheduler+0x13c>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a13      	ldr	r2, [pc, #76]	@ (8006d8c <xPortStartScheduler+0x13c>)
 8006d3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006d42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006d44:	f000 f8da 	bl	8006efc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006d48:	4b11      	ldr	r3, [pc, #68]	@ (8006d90 <xPortStartScheduler+0x140>)
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006d4e:	f000 f8f9 	bl	8006f44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006d52:	4b10      	ldr	r3, [pc, #64]	@ (8006d94 <xPortStartScheduler+0x144>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a0f      	ldr	r2, [pc, #60]	@ (8006d94 <xPortStartScheduler+0x144>)
 8006d58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006d5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006d5e:	f7ff ff63 	bl	8006c28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006d62:	f7ff f82d 	bl	8005dc0 <vTaskSwitchContext>
	prvTaskExitError();
 8006d66:	f7ff ff19 	bl	8006b9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3718      	adds	r7, #24
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	e000ed00 	.word	0xe000ed00
 8006d78:	410fc271 	.word	0x410fc271
 8006d7c:	410fc270 	.word	0x410fc270
 8006d80:	e000e400 	.word	0xe000e400
 8006d84:	200026dc 	.word	0x200026dc
 8006d88:	200026e0 	.word	0x200026e0
 8006d8c:	e000ed20 	.word	0xe000ed20
 8006d90:	2000000c 	.word	0x2000000c
 8006d94:	e000ef34 	.word	0xe000ef34

08006d98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
	__asm volatile
 8006d9e:	f04f 0310 	mov.w	r3, #16
 8006da2:	f383 8811 	msr	BASEPRI, r3
 8006da6:	f3bf 8f6f 	isb	sy
 8006daa:	f3bf 8f4f 	dsb	sy
 8006dae:	607b      	str	r3, [r7, #4]
}
 8006db0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006db2:	4b10      	ldr	r3, [pc, #64]	@ (8006df4 <vPortEnterCritical+0x5c>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	3301      	adds	r3, #1
 8006db8:	4a0e      	ldr	r2, [pc, #56]	@ (8006df4 <vPortEnterCritical+0x5c>)
 8006dba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8006df4 <vPortEnterCritical+0x5c>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d110      	bne.n	8006de6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8006df8 <vPortEnterCritical+0x60>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00b      	beq.n	8006de6 <vPortEnterCritical+0x4e>
	__asm volatile
 8006dce:	f04f 0310 	mov.w	r3, #16
 8006dd2:	f383 8811 	msr	BASEPRI, r3
 8006dd6:	f3bf 8f6f 	isb	sy
 8006dda:	f3bf 8f4f 	dsb	sy
 8006dde:	603b      	str	r3, [r7, #0]
}
 8006de0:	bf00      	nop
 8006de2:	bf00      	nop
 8006de4:	e7fd      	b.n	8006de2 <vPortEnterCritical+0x4a>
	}
}
 8006de6:	bf00      	nop
 8006de8:	370c      	adds	r7, #12
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	2000000c 	.word	0x2000000c
 8006df8:	e000ed04 	.word	0xe000ed04

08006dfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006e02:	4b12      	ldr	r3, [pc, #72]	@ (8006e4c <vPortExitCritical+0x50>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d10b      	bne.n	8006e22 <vPortExitCritical+0x26>
	__asm volatile
 8006e0a:	f04f 0310 	mov.w	r3, #16
 8006e0e:	f383 8811 	msr	BASEPRI, r3
 8006e12:	f3bf 8f6f 	isb	sy
 8006e16:	f3bf 8f4f 	dsb	sy
 8006e1a:	607b      	str	r3, [r7, #4]
}
 8006e1c:	bf00      	nop
 8006e1e:	bf00      	nop
 8006e20:	e7fd      	b.n	8006e1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006e22:	4b0a      	ldr	r3, [pc, #40]	@ (8006e4c <vPortExitCritical+0x50>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	3b01      	subs	r3, #1
 8006e28:	4a08      	ldr	r2, [pc, #32]	@ (8006e4c <vPortExitCritical+0x50>)
 8006e2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006e2c:	4b07      	ldr	r3, [pc, #28]	@ (8006e4c <vPortExitCritical+0x50>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d105      	bne.n	8006e40 <vPortExitCritical+0x44>
 8006e34:	2300      	movs	r3, #0
 8006e36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	f383 8811 	msr	BASEPRI, r3
}
 8006e3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006e40:	bf00      	nop
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr
 8006e4c:	2000000c 	.word	0x2000000c

08006e50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e50:	f3ef 8009 	mrs	r0, PSP
 8006e54:	f3bf 8f6f 	isb	sy
 8006e58:	4b15      	ldr	r3, [pc, #84]	@ (8006eb0 <pxCurrentTCBConst>)
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	f01e 0f10 	tst.w	lr, #16
 8006e60:	bf08      	it	eq
 8006e62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006e66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e6a:	6010      	str	r0, [r2, #0]
 8006e6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006e70:	f04f 0010 	mov.w	r0, #16
 8006e74:	f380 8811 	msr	BASEPRI, r0
 8006e78:	f3bf 8f4f 	dsb	sy
 8006e7c:	f3bf 8f6f 	isb	sy
 8006e80:	f7fe ff9e 	bl	8005dc0 <vTaskSwitchContext>
 8006e84:	f04f 0000 	mov.w	r0, #0
 8006e88:	f380 8811 	msr	BASEPRI, r0
 8006e8c:	bc09      	pop	{r0, r3}
 8006e8e:	6819      	ldr	r1, [r3, #0]
 8006e90:	6808      	ldr	r0, [r1, #0]
 8006e92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e96:	f01e 0f10 	tst.w	lr, #16
 8006e9a:	bf08      	it	eq
 8006e9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ea0:	f380 8809 	msr	PSP, r0
 8006ea4:	f3bf 8f6f 	isb	sy
 8006ea8:	4770      	bx	lr
 8006eaa:	bf00      	nop
 8006eac:	f3af 8000 	nop.w

08006eb0 <pxCurrentTCBConst>:
 8006eb0:	200020b0 	.word	0x200020b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006eb4:	bf00      	nop
 8006eb6:	bf00      	nop

08006eb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
	__asm volatile
 8006ebe:	f04f 0310 	mov.w	r3, #16
 8006ec2:	f383 8811 	msr	BASEPRI, r3
 8006ec6:	f3bf 8f6f 	isb	sy
 8006eca:	f3bf 8f4f 	dsb	sy
 8006ece:	607b      	str	r3, [r7, #4]
}
 8006ed0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ed2:	f7fe febb 	bl	8005c4c <xTaskIncrementTick>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d003      	beq.n	8006ee4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006edc:	4b06      	ldr	r3, [pc, #24]	@ (8006ef8 <xPortSysTickHandler+0x40>)
 8006ede:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ee2:	601a      	str	r2, [r3, #0]
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	f383 8811 	msr	BASEPRI, r3
}
 8006eee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ef0:	bf00      	nop
 8006ef2:	3708      	adds	r7, #8
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	e000ed04 	.word	0xe000ed04

08006efc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006efc:	b480      	push	{r7}
 8006efe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006f00:	4b0b      	ldr	r3, [pc, #44]	@ (8006f30 <vPortSetupTimerInterrupt+0x34>)
 8006f02:	2200      	movs	r2, #0
 8006f04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006f06:	4b0b      	ldr	r3, [pc, #44]	@ (8006f34 <vPortSetupTimerInterrupt+0x38>)
 8006f08:	2200      	movs	r2, #0
 8006f0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8006f38 <vPortSetupTimerInterrupt+0x3c>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a0a      	ldr	r2, [pc, #40]	@ (8006f3c <vPortSetupTimerInterrupt+0x40>)
 8006f12:	fba2 2303 	umull	r2, r3, r2, r3
 8006f16:	0a5b      	lsrs	r3, r3, #9
 8006f18:	4a09      	ldr	r2, [pc, #36]	@ (8006f40 <vPortSetupTimerInterrupt+0x44>)
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006f1e:	4b04      	ldr	r3, [pc, #16]	@ (8006f30 <vPortSetupTimerInterrupt+0x34>)
 8006f20:	2207      	movs	r2, #7
 8006f22:	601a      	str	r2, [r3, #0]
}
 8006f24:	bf00      	nop
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr
 8006f2e:	bf00      	nop
 8006f30:	e000e010 	.word	0xe000e010
 8006f34:	e000e018 	.word	0xe000e018
 8006f38:	20000000 	.word	0x20000000
 8006f3c:	10624dd3 	.word	0x10624dd3
 8006f40:	e000e014 	.word	0xe000e014

08006f44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006f44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006f54 <vPortEnableVFP+0x10>
 8006f48:	6801      	ldr	r1, [r0, #0]
 8006f4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006f4e:	6001      	str	r1, [r0, #0]
 8006f50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006f52:	bf00      	nop
 8006f54:	e000ed88 	.word	0xe000ed88

08006f58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006f58:	b480      	push	{r7}
 8006f5a:	b085      	sub	sp, #20
 8006f5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006f5e:	f3ef 8305 	mrs	r3, IPSR
 8006f62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2b0f      	cmp	r3, #15
 8006f68:	d915      	bls.n	8006f96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006f6a:	4a18      	ldr	r2, [pc, #96]	@ (8006fcc <vPortValidateInterruptPriority+0x74>)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	4413      	add	r3, r2
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006f74:	4b16      	ldr	r3, [pc, #88]	@ (8006fd0 <vPortValidateInterruptPriority+0x78>)
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	7afa      	ldrb	r2, [r7, #11]
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d20b      	bcs.n	8006f96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006f7e:	f04f 0310 	mov.w	r3, #16
 8006f82:	f383 8811 	msr	BASEPRI, r3
 8006f86:	f3bf 8f6f 	isb	sy
 8006f8a:	f3bf 8f4f 	dsb	sy
 8006f8e:	607b      	str	r3, [r7, #4]
}
 8006f90:	bf00      	nop
 8006f92:	bf00      	nop
 8006f94:	e7fd      	b.n	8006f92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006f96:	4b0f      	ldr	r3, [pc, #60]	@ (8006fd4 <vPortValidateInterruptPriority+0x7c>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8006fd8 <vPortValidateInterruptPriority+0x80>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d90b      	bls.n	8006fbe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006fa6:	f04f 0310 	mov.w	r3, #16
 8006faa:	f383 8811 	msr	BASEPRI, r3
 8006fae:	f3bf 8f6f 	isb	sy
 8006fb2:	f3bf 8f4f 	dsb	sy
 8006fb6:	603b      	str	r3, [r7, #0]
}
 8006fb8:	bf00      	nop
 8006fba:	bf00      	nop
 8006fbc:	e7fd      	b.n	8006fba <vPortValidateInterruptPriority+0x62>
	}
 8006fbe:	bf00      	nop
 8006fc0:	3714      	adds	r7, #20
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	e000e3f0 	.word	0xe000e3f0
 8006fd0:	200026dc 	.word	0x200026dc
 8006fd4:	e000ed0c 	.word	0xe000ed0c
 8006fd8:	200026e0 	.word	0x200026e0

08006fdc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b08a      	sub	sp, #40	@ 0x28
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006fe8:	f7fe fd74 	bl	8005ad4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006fec:	4b5c      	ldr	r3, [pc, #368]	@ (8007160 <pvPortMalloc+0x184>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d101      	bne.n	8006ff8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006ff4:	f000 f924 	bl	8007240 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ff8:	4b5a      	ldr	r3, [pc, #360]	@ (8007164 <pvPortMalloc+0x188>)
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	4013      	ands	r3, r2
 8007000:	2b00      	cmp	r3, #0
 8007002:	f040 8095 	bne.w	8007130 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d01e      	beq.n	800704a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800700c:	2208      	movs	r2, #8
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4413      	add	r3, r2
 8007012:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f003 0307 	and.w	r3, r3, #7
 800701a:	2b00      	cmp	r3, #0
 800701c:	d015      	beq.n	800704a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f023 0307 	bic.w	r3, r3, #7
 8007024:	3308      	adds	r3, #8
 8007026:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f003 0307 	and.w	r3, r3, #7
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00b      	beq.n	800704a <pvPortMalloc+0x6e>
	__asm volatile
 8007032:	f04f 0310 	mov.w	r3, #16
 8007036:	f383 8811 	msr	BASEPRI, r3
 800703a:	f3bf 8f6f 	isb	sy
 800703e:	f3bf 8f4f 	dsb	sy
 8007042:	617b      	str	r3, [r7, #20]
}
 8007044:	bf00      	nop
 8007046:	bf00      	nop
 8007048:	e7fd      	b.n	8007046 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d06f      	beq.n	8007130 <pvPortMalloc+0x154>
 8007050:	4b45      	ldr	r3, [pc, #276]	@ (8007168 <pvPortMalloc+0x18c>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	429a      	cmp	r2, r3
 8007058:	d86a      	bhi.n	8007130 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800705a:	4b44      	ldr	r3, [pc, #272]	@ (800716c <pvPortMalloc+0x190>)
 800705c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800705e:	4b43      	ldr	r3, [pc, #268]	@ (800716c <pvPortMalloc+0x190>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007064:	e004      	b.n	8007070 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007068:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800706a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	429a      	cmp	r2, r3
 8007078:	d903      	bls.n	8007082 <pvPortMalloc+0xa6>
 800707a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1f1      	bne.n	8007066 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007082:	4b37      	ldr	r3, [pc, #220]	@ (8007160 <pvPortMalloc+0x184>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007088:	429a      	cmp	r2, r3
 800708a:	d051      	beq.n	8007130 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800708c:	6a3b      	ldr	r3, [r7, #32]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2208      	movs	r2, #8
 8007092:	4413      	add	r3, r2
 8007094:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	6a3b      	ldr	r3, [r7, #32]
 800709c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800709e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a0:	685a      	ldr	r2, [r3, #4]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	1ad2      	subs	r2, r2, r3
 80070a6:	2308      	movs	r3, #8
 80070a8:	005b      	lsls	r3, r3, #1
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d920      	bls.n	80070f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80070ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	4413      	add	r3, r2
 80070b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	f003 0307 	and.w	r3, r3, #7
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d00b      	beq.n	80070d8 <pvPortMalloc+0xfc>
	__asm volatile
 80070c0:	f04f 0310 	mov.w	r3, #16
 80070c4:	f383 8811 	msr	BASEPRI, r3
 80070c8:	f3bf 8f6f 	isb	sy
 80070cc:	f3bf 8f4f 	dsb	sy
 80070d0:	613b      	str	r3, [r7, #16]
}
 80070d2:	bf00      	nop
 80070d4:	bf00      	nop
 80070d6:	e7fd      	b.n	80070d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80070d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070da:	685a      	ldr	r2, [r3, #4]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	1ad2      	subs	r2, r2, r3
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80070e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80070ea:	69b8      	ldr	r0, [r7, #24]
 80070ec:	f000 f90c 	bl	8007308 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80070f0:	4b1d      	ldr	r3, [pc, #116]	@ (8007168 <pvPortMalloc+0x18c>)
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	4a1b      	ldr	r2, [pc, #108]	@ (8007168 <pvPortMalloc+0x18c>)
 80070fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80070fe:	4b1a      	ldr	r3, [pc, #104]	@ (8007168 <pvPortMalloc+0x18c>)
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	4b1b      	ldr	r3, [pc, #108]	@ (8007170 <pvPortMalloc+0x194>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	429a      	cmp	r2, r3
 8007108:	d203      	bcs.n	8007112 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800710a:	4b17      	ldr	r3, [pc, #92]	@ (8007168 <pvPortMalloc+0x18c>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a18      	ldr	r2, [pc, #96]	@ (8007170 <pvPortMalloc+0x194>)
 8007110:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007114:	685a      	ldr	r2, [r3, #4]
 8007116:	4b13      	ldr	r3, [pc, #76]	@ (8007164 <pvPortMalloc+0x188>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	431a      	orrs	r2, r3
 800711c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800711e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007122:	2200      	movs	r2, #0
 8007124:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007126:	4b13      	ldr	r3, [pc, #76]	@ (8007174 <pvPortMalloc+0x198>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	3301      	adds	r3, #1
 800712c:	4a11      	ldr	r2, [pc, #68]	@ (8007174 <pvPortMalloc+0x198>)
 800712e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007130:	f7fe fcde 	bl	8005af0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	f003 0307 	and.w	r3, r3, #7
 800713a:	2b00      	cmp	r3, #0
 800713c:	d00b      	beq.n	8007156 <pvPortMalloc+0x17a>
	__asm volatile
 800713e:	f04f 0310 	mov.w	r3, #16
 8007142:	f383 8811 	msr	BASEPRI, r3
 8007146:	f3bf 8f6f 	isb	sy
 800714a:	f3bf 8f4f 	dsb	sy
 800714e:	60fb      	str	r3, [r7, #12]
}
 8007150:	bf00      	nop
 8007152:	bf00      	nop
 8007154:	e7fd      	b.n	8007152 <pvPortMalloc+0x176>
	return pvReturn;
 8007156:	69fb      	ldr	r3, [r7, #28]
}
 8007158:	4618      	mov	r0, r3
 800715a:	3728      	adds	r7, #40	@ 0x28
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}
 8007160:	20015f6c 	.word	0x20015f6c
 8007164:	20015f80 	.word	0x20015f80
 8007168:	20015f70 	.word	0x20015f70
 800716c:	20015f64 	.word	0x20015f64
 8007170:	20015f74 	.word	0x20015f74
 8007174:	20015f78 	.word	0x20015f78

08007178 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b086      	sub	sp, #24
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d04f      	beq.n	800722a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800718a:	2308      	movs	r3, #8
 800718c:	425b      	negs	r3, r3
 800718e:	697a      	ldr	r2, [r7, #20]
 8007190:	4413      	add	r3, r2
 8007192:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	685a      	ldr	r2, [r3, #4]
 800719c:	4b25      	ldr	r3, [pc, #148]	@ (8007234 <vPortFree+0xbc>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4013      	ands	r3, r2
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d10b      	bne.n	80071be <vPortFree+0x46>
	__asm volatile
 80071a6:	f04f 0310 	mov.w	r3, #16
 80071aa:	f383 8811 	msr	BASEPRI, r3
 80071ae:	f3bf 8f6f 	isb	sy
 80071b2:	f3bf 8f4f 	dsb	sy
 80071b6:	60fb      	str	r3, [r7, #12]
}
 80071b8:	bf00      	nop
 80071ba:	bf00      	nop
 80071bc:	e7fd      	b.n	80071ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00b      	beq.n	80071de <vPortFree+0x66>
	__asm volatile
 80071c6:	f04f 0310 	mov.w	r3, #16
 80071ca:	f383 8811 	msr	BASEPRI, r3
 80071ce:	f3bf 8f6f 	isb	sy
 80071d2:	f3bf 8f4f 	dsb	sy
 80071d6:	60bb      	str	r3, [r7, #8]
}
 80071d8:	bf00      	nop
 80071da:	bf00      	nop
 80071dc:	e7fd      	b.n	80071da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	685a      	ldr	r2, [r3, #4]
 80071e2:	4b14      	ldr	r3, [pc, #80]	@ (8007234 <vPortFree+0xbc>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4013      	ands	r3, r2
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d01e      	beq.n	800722a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d11a      	bne.n	800722a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	685a      	ldr	r2, [r3, #4]
 80071f8:	4b0e      	ldr	r3, [pc, #56]	@ (8007234 <vPortFree+0xbc>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	43db      	mvns	r3, r3
 80071fe:	401a      	ands	r2, r3
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007204:	f7fe fc66 	bl	8005ad4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	685a      	ldr	r2, [r3, #4]
 800720c:	4b0a      	ldr	r3, [pc, #40]	@ (8007238 <vPortFree+0xc0>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4413      	add	r3, r2
 8007212:	4a09      	ldr	r2, [pc, #36]	@ (8007238 <vPortFree+0xc0>)
 8007214:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007216:	6938      	ldr	r0, [r7, #16]
 8007218:	f000 f876 	bl	8007308 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800721c:	4b07      	ldr	r3, [pc, #28]	@ (800723c <vPortFree+0xc4>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	3301      	adds	r3, #1
 8007222:	4a06      	ldr	r2, [pc, #24]	@ (800723c <vPortFree+0xc4>)
 8007224:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007226:	f7fe fc63 	bl	8005af0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800722a:	bf00      	nop
 800722c:	3718      	adds	r7, #24
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	20015f80 	.word	0x20015f80
 8007238:	20015f70 	.word	0x20015f70
 800723c:	20015f7c 	.word	0x20015f7c

08007240 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007240:	b480      	push	{r7}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007246:	4b29      	ldr	r3, [pc, #164]	@ (80072ec <prvHeapInit+0xac>)
 8007248:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800724a:	4b29      	ldr	r3, [pc, #164]	@ (80072f0 <prvHeapInit+0xb0>)
 800724c:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f003 0307 	and.w	r3, r3, #7
 8007254:	2b00      	cmp	r3, #0
 8007256:	d00c      	beq.n	8007272 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	3307      	adds	r3, #7
 800725c:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f023 0307 	bic.w	r3, r3, #7
 8007264:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007266:	68ba      	ldr	r2, [r7, #8]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	1ad3      	subs	r3, r2, r3
 800726c:	4a20      	ldr	r2, [pc, #128]	@ (80072f0 <prvHeapInit+0xb0>)
 800726e:	4413      	add	r3, r2
 8007270:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007276:	4a1f      	ldr	r2, [pc, #124]	@ (80072f4 <prvHeapInit+0xb4>)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800727c:	4b1d      	ldr	r3, [pc, #116]	@ (80072f4 <prvHeapInit+0xb4>)
 800727e:	2200      	movs	r2, #0
 8007280:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	68ba      	ldr	r2, [r7, #8]
 8007286:	4413      	add	r3, r2
 8007288:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800728a:	2208      	movs	r2, #8
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	1a9b      	subs	r3, r3, r2
 8007290:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f023 0307 	bic.w	r3, r3, #7
 8007298:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	4a16      	ldr	r2, [pc, #88]	@ (80072f8 <prvHeapInit+0xb8>)
 800729e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80072a0:	4b15      	ldr	r3, [pc, #84]	@ (80072f8 <prvHeapInit+0xb8>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2200      	movs	r2, #0
 80072a6:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80072a8:	4b13      	ldr	r3, [pc, #76]	@ (80072f8 <prvHeapInit+0xb8>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2200      	movs	r2, #0
 80072ae:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	1ad2      	subs	r2, r2, r3
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80072be:	4b0e      	ldr	r3, [pc, #56]	@ (80072f8 <prvHeapInit+0xb8>)
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	4a0c      	ldr	r2, [pc, #48]	@ (80072fc <prvHeapInit+0xbc>)
 80072cc:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	4a0b      	ldr	r2, [pc, #44]	@ (8007300 <prvHeapInit+0xc0>)
 80072d4:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80072d6:	4b0b      	ldr	r3, [pc, #44]	@ (8007304 <prvHeapInit+0xc4>)
 80072d8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80072dc:	601a      	str	r2, [r3, #0]
}
 80072de:	bf00      	nop
 80072e0:	3714      	adds	r7, #20
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	00013880 	.word	0x00013880
 80072f0:	200026e4 	.word	0x200026e4
 80072f4:	20015f64 	.word	0x20015f64
 80072f8:	20015f6c 	.word	0x20015f6c
 80072fc:	20015f74 	.word	0x20015f74
 8007300:	20015f70 	.word	0x20015f70
 8007304:	20015f80 	.word	0x20015f80

08007308 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007310:	4b28      	ldr	r3, [pc, #160]	@ (80073b4 <prvInsertBlockIntoFreeList+0xac>)
 8007312:	60fb      	str	r3, [r7, #12]
 8007314:	e002      	b.n	800731c <prvInsertBlockIntoFreeList+0x14>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	60fb      	str	r3, [r7, #12]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	429a      	cmp	r2, r3
 8007324:	d8f7      	bhi.n	8007316 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	68ba      	ldr	r2, [r7, #8]
 8007330:	4413      	add	r3, r2
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	429a      	cmp	r2, r3
 8007336:	d108      	bne.n	800734a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	685a      	ldr	r2, [r3, #4]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	441a      	add	r2, r3
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	68ba      	ldr	r2, [r7, #8]
 8007354:	441a      	add	r2, r3
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	429a      	cmp	r2, r3
 800735c:	d118      	bne.n	8007390 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	4b15      	ldr	r3, [pc, #84]	@ (80073b8 <prvInsertBlockIntoFreeList+0xb0>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	429a      	cmp	r2, r3
 8007368:	d00d      	beq.n	8007386 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	685a      	ldr	r2, [r3, #4]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	441a      	add	r2, r3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	601a      	str	r2, [r3, #0]
 8007384:	e008      	b.n	8007398 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007386:	4b0c      	ldr	r3, [pc, #48]	@ (80073b8 <prvInsertBlockIntoFreeList+0xb0>)
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	601a      	str	r2, [r3, #0]
 800738e:	e003      	b.n	8007398 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	429a      	cmp	r2, r3
 800739e:	d002      	beq.n	80073a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073a6:	bf00      	nop
 80073a8:	3714      	adds	r7, #20
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	20015f64 	.word	0x20015f64
 80073b8:	20015f6c 	.word	0x20015f6c

080073bc <os_create_thread>:
 * *****************************************************/
int32_t		os_create_thread(type_os_thread thread_func,
		                      const char * const thread_name,
							  const uint32_t thread_stack_depth,
							  void * const thread_parameters)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b088      	sub	sp, #32
 80073c0:	af02      	add	r7, sp, #8
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	607a      	str	r2, [r7, #4]
 80073c8:	603b      	str	r3, [r7, #0]
	if( (thread_func != NULL) && \
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d047      	beq.n	8007460 <os_create_thread+0xa4>
		(registered_thread_index < CONF_NO_OF_MAX_APP_THREAD) && \
 80073d0:	4b26      	ldr	r3, [pc, #152]	@ (800746c <os_create_thread+0xb0>)
 80073d2:	681b      	ldr	r3, [r3, #0]
	if( (thread_func != NULL) && \
 80073d4:	2b04      	cmp	r3, #4
 80073d6:	dc43      	bgt.n	8007460 <os_create_thread+0xa4>
		(registered_thread_index < CONF_NO_OF_MAX_APP_THREAD) && \
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d040      	beq.n	8007460 <os_create_thread+0xa4>
		(thread_stack_depth != 0)
	  )
	{
		xTaskCreate(thread_func, thread_name, thread_stack_depth, thread_parameters, 1, &app_thread_handles[registered_thread_index].thread_handle);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	b299      	uxth	r1, r3
 80073e2:	4b22      	ldr	r3, [pc, #136]	@ (800746c <os_create_thread+0xb0>)
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	4613      	mov	r3, r2
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	4413      	add	r3, r2
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	4a20      	ldr	r2, [pc, #128]	@ (8007470 <os_create_thread+0xb4>)
 80073f0:	4413      	add	r3, r2
 80073f2:	3304      	adds	r3, #4
 80073f4:	9301      	str	r3, [sp, #4]
 80073f6:	2301      	movs	r3, #1
 80073f8:	9300      	str	r3, [sp, #0]
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	460a      	mov	r2, r1
 80073fe:	68b9      	ldr	r1, [r7, #8]
 8007400:	68f8      	ldr	r0, [r7, #12]
 8007402:	f7fe f923 	bl	800564c <xTaskCreate>

		int32_t current_thread_id = thread_counter++;
 8007406:	4b1b      	ldr	r3, [pc, #108]	@ (8007474 <os_create_thread+0xb8>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	1c5a      	adds	r2, r3, #1
 800740c:	4919      	ldr	r1, [pc, #100]	@ (8007474 <os_create_thread+0xb8>)
 800740e:	600a      	str	r2, [r1, #0]
 8007410:	617b      	str	r3, [r7, #20]
		registered_thread_index++;
 8007412:	4b16      	ldr	r3, [pc, #88]	@ (800746c <os_create_thread+0xb0>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	3301      	adds	r3, #1
 8007418:	4a14      	ldr	r2, [pc, #80]	@ (800746c <os_create_thread+0xb0>)
 800741a:	6013      	str	r3, [r2, #0]

		app_thread_handles[registered_thread_index].thread_id				= current_thread_id;
 800741c:	4b13      	ldr	r3, [pc, #76]	@ (800746c <os_create_thread+0xb0>)
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	6979      	ldr	r1, [r7, #20]
 8007422:	4813      	ldr	r0, [pc, #76]	@ (8007470 <os_create_thread+0xb4>)
 8007424:	4613      	mov	r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	4413      	add	r3, r2
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	4403      	add	r3, r0
 800742e:	6019      	str	r1, [r3, #0]
		app_thread_handles[registered_thread_index].thread_priority 		= 1;
 8007430:	4b0e      	ldr	r3, [pc, #56]	@ (800746c <os_create_thread+0xb0>)
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	490e      	ldr	r1, [pc, #56]	@ (8007470 <os_create_thread+0xb4>)
 8007436:	4613      	mov	r3, r2
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	4413      	add	r3, r2
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	440b      	add	r3, r1
 8007440:	3310      	adds	r3, #16
 8007442:	2201      	movs	r2, #1
 8007444:	601a      	str	r2, [r3, #0]
		app_thread_handles[registered_thread_index].thread_stack_depth		= thread_stack_depth;
 8007446:	4b09      	ldr	r3, [pc, #36]	@ (800746c <os_create_thread+0xb0>)
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	4909      	ldr	r1, [pc, #36]	@ (8007470 <os_create_thread+0xb4>)
 800744c:	4613      	mov	r3, r2
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	4413      	add	r3, r2
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	440b      	add	r3, r1
 8007456:	3308      	adds	r3, #8
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	601a      	str	r2, [r3, #0]

		return current_thread_id;
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	e000      	b.n	8007462 <os_create_thread+0xa6>
	}
	else
	{
		return 0;
 8007460:	2300      	movs	r3, #0
	}
}
 8007462:	4618      	mov	r0, r3
 8007464:	3718      	adds	r7, #24
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	20015fe8 	.word	0x20015fe8
 8007470:	20015f84 	.word	0x20015f84
 8007474:	20000010 	.word	0x20000010

08007478 <ringbuffer_status>:
#include <string.h>
#include <inttypes.h>

#define ASSERT(EX)                                                         \

__inline enum ringbuffer_state ringbuffer_status(struct ringbuffer *rb) {
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
	if (rb->read_index == rb->write_index) {
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	889b      	ldrh	r3, [r3, #4]
 8007484:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8007488:	b29a      	uxth	r2, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	88db      	ldrh	r3, [r3, #6]
 800748e:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8007492:	b29b      	uxth	r3, r3
 8007494:	429a      	cmp	r2, r3
 8007496:	d10f      	bne.n	80074b8 <ringbuffer_status+0x40>
		if (rb->read_mirror == rb->write_mirror)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	791b      	ldrb	r3, [r3, #4]
 800749c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80074a0:	b2da      	uxtb	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	799b      	ldrb	r3, [r3, #6]
 80074a6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d101      	bne.n	80074b4 <ringbuffer_status+0x3c>
			return RT_RINGBUFFER_EMPTY;
 80074b0:	2300      	movs	r3, #0
 80074b2:	e002      	b.n	80074ba <ringbuffer_status+0x42>
		else
			return RT_RINGBUFFER_FULL;
 80074b4:	2301      	movs	r3, #1
 80074b6:	e000      	b.n	80074ba <ringbuffer_status+0x42>
	}
	return RT_RINGBUFFER_HALFFULL;
 80074b8:	2302      	movs	r3, #2
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	370c      	adds	r7, #12
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr

080074c6 <ringbuffer_data_len>:

/** return the size of data in rb */
uint16_t ringbuffer_data_len(struct ringbuffer *rb) {
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b082      	sub	sp, #8
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
	switch (ringbuffer_status(rb)) {
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f7ff ffd2 	bl	8007478 <ringbuffer_status>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d002      	beq.n	80074e0 <ringbuffer_data_len+0x1a>
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d002      	beq.n	80074e4 <ringbuffer_data_len+0x1e>
 80074de:	e006      	b.n	80074ee <ringbuffer_data_len+0x28>
	case RT_RINGBUFFER_EMPTY:
		return 0;
 80074e0:	2300      	movs	r3, #0
 80074e2:	e031      	b.n	8007548 <ringbuffer_data_len+0x82>
	case RT_RINGBUFFER_FULL:
		return rb->buffer_size;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	e02c      	b.n	8007548 <ringbuffer_data_len+0x82>
	case RT_RINGBUFFER_HALFFULL:
	default:
		if (rb->write_index > rb->read_index)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	88db      	ldrh	r3, [r3, #6]
 80074f2:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	889b      	ldrh	r3, [r3, #4]
 80074fc:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8007500:	b29b      	uxth	r3, r3
 8007502:	429a      	cmp	r2, r3
 8007504:	d90d      	bls.n	8007522 <ringbuffer_data_len+0x5c>
			return rb->write_index - rb->read_index;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	88db      	ldrh	r3, [r3, #6]
 800750a:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800750e:	b29b      	uxth	r3, r3
 8007510:	461a      	mov	r2, r3
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	889b      	ldrh	r3, [r3, #4]
 8007516:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800751a:	b29b      	uxth	r3, r3
 800751c:	1ad3      	subs	r3, r2, r3
 800751e:	b29b      	uxth	r3, r3
 8007520:	e012      	b.n	8007548 <ringbuffer_data_len+0x82>
		else
			return rb->buffer_size - (rb->read_index - rb->write_index);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007528:	b29a      	uxth	r2, r3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	88db      	ldrh	r3, [r3, #6]
 800752e:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8007532:	b29b      	uxth	r3, r3
 8007534:	4619      	mov	r1, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	889b      	ldrh	r3, [r3, #4]
 800753a:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800753e:	b29b      	uxth	r3, r3
 8007540:	1acb      	subs	r3, r1, r3
 8007542:	b29b      	uxth	r3, r3
 8007544:	4413      	add	r3, r2
 8007546:	b29b      	uxth	r3, r3
	};
}
 8007548:	4618      	mov	r0, r3
 800754a:	3708      	adds	r7, #8
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <ringbuffer_putchar>:
}

/**
 * put a character into ring buffer
 */
uint32_t ringbuffer_putchar(struct ringbuffer *rb, const uint8_t ch) {
 8007550:	b590      	push	{r4, r7, lr}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	460b      	mov	r3, r1
 800755a:	70fb      	strb	r3, [r7, #3]
	ASSERT(rb != NULL);

	/* whether has enough space */
	if (!ringbuffer_empty_space(rb))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007562:	461c      	mov	r4, r3
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f7ff ffae 	bl	80074c6 <ringbuffer_data_len>
 800756a:	4603      	mov	r3, r0
 800756c:	429c      	cmp	r4, r3
 800756e:	bf0c      	ite	eq
 8007570:	2301      	moveq	r3, #1
 8007572:	2300      	movne	r3, #0
 8007574:	b2db      	uxtb	r3, r3
 8007576:	2b00      	cmp	r3, #0
 8007578:	d001      	beq.n	800757e <ringbuffer_putchar+0x2e>
		return 0;
 800757a:	2300      	movs	r3, #0
 800757c:	e039      	b.n	80075f2 <ringbuffer_putchar+0xa2>

	rb->buffer_ptr[rb->write_index] = ch;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	88d2      	ldrh	r2, [r2, #6]
 8007586:	f3c2 024e 	ubfx	r2, r2, #1, #15
 800758a:	b292      	uxth	r2, r2
 800758c:	4413      	add	r3, r2
 800758e:	78fa      	ldrb	r2, [r7, #3]
 8007590:	701a      	strb	r2, [r3, #0]

	/* flip mirror */
	if (rb->write_index == rb->buffer_size - 1) {
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	88db      	ldrh	r3, [r3, #6]
 8007596:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800759a:	b29b      	uxth	r3, r3
 800759c:	461a      	mov	r2, r3
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80075a4:	3b01      	subs	r3, #1
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d114      	bne.n	80075d4 <ringbuffer_putchar+0x84>
		rb->write_mirror = ~rb->write_mirror;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	799b      	ldrb	r3, [r3, #6]
 80075ae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	43db      	mvns	r3, r3
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	f003 0301 	and.w	r3, r3, #1
 80075bc:	b2d9      	uxtb	r1, r3
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	7993      	ldrb	r3, [r2, #6]
 80075c2:	f361 0300 	bfi	r3, r1, #0, #1
 80075c6:	7193      	strb	r3, [r2, #6]
		rb->write_index = 0;
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	88d3      	ldrh	r3, [r2, #6]
 80075cc:	f36f 034f 	bfc	r3, #1, #15
 80075d0:	80d3      	strh	r3, [r2, #6]
 80075d2:	e00d      	b.n	80075f0 <ringbuffer_putchar+0xa0>
	} else {
		rb->write_index++;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	88db      	ldrh	r3, [r3, #6]
 80075d8:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80075dc:	b29b      	uxth	r3, r3
 80075de:	3301      	adds	r3, #1
 80075e0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80075e4:	b299      	uxth	r1, r3
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	88d3      	ldrh	r3, [r2, #6]
 80075ea:	f361 034f 	bfi	r3, r1, #1, #15
 80075ee:	80d3      	strh	r3, [r2, #6]
	}

	return 1;
 80075f0:	2301      	movs	r3, #1
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	370c      	adds	r7, #12
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd90      	pop	{r4, r7, pc}

080075fa <ringbuffer_getchar>:
}

/**
 * get a character from a ringbuffer
 */
uint32_t ringbuffer_getchar(struct ringbuffer *rb, uint8_t *ch) {
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b082      	sub	sp, #8
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
 8007602:	6039      	str	r1, [r7, #0]
	ASSERT(rb != NULL);

	/* ringbuffer is empty */
	if (!ringbuffer_data_len(rb))
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f7ff ff5e 	bl	80074c6 <ringbuffer_data_len>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	bf0c      	ite	eq
 8007610:	2301      	moveq	r3, #1
 8007612:	2300      	movne	r3, #0
 8007614:	b2db      	uxtb	r3, r3
 8007616:	2b00      	cmp	r3, #0
 8007618:	d001      	beq.n	800761e <ringbuffer_getchar+0x24>
		return 0;
 800761a:	2300      	movs	r3, #0
 800761c:	e03a      	b.n	8007694 <ringbuffer_getchar+0x9a>

	/* put character */
	*ch = rb->buffer_ptr[rb->read_index];
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	8892      	ldrh	r2, [r2, #4]
 8007626:	f3c2 024e 	ubfx	r2, r2, #1, #15
 800762a:	b292      	uxth	r2, r2
 800762c:	4413      	add	r3, r2
 800762e:	781a      	ldrb	r2, [r3, #0]
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	701a      	strb	r2, [r3, #0]

	if (rb->read_index == rb->buffer_size - 1) {
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	889b      	ldrh	r3, [r3, #4]
 8007638:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800763c:	b29b      	uxth	r3, r3
 800763e:	461a      	mov	r2, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007646:	3b01      	subs	r3, #1
 8007648:	429a      	cmp	r2, r3
 800764a:	d114      	bne.n	8007676 <ringbuffer_getchar+0x7c>
		rb->read_mirror = ~rb->read_mirror;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	791b      	ldrb	r3, [r3, #4]
 8007650:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007654:	b2db      	uxtb	r3, r3
 8007656:	43db      	mvns	r3, r3
 8007658:	b2db      	uxtb	r3, r3
 800765a:	f003 0301 	and.w	r3, r3, #1
 800765e:	b2d9      	uxtb	r1, r3
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	7913      	ldrb	r3, [r2, #4]
 8007664:	f361 0300 	bfi	r3, r1, #0, #1
 8007668:	7113      	strb	r3, [r2, #4]
		rb->read_index = 0;
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	8893      	ldrh	r3, [r2, #4]
 800766e:	f36f 034f 	bfc	r3, #1, #15
 8007672:	8093      	strh	r3, [r2, #4]
 8007674:	e00d      	b.n	8007692 <ringbuffer_getchar+0x98>
	} else {
		rb->read_index++;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	889b      	ldrh	r3, [r3, #4]
 800767a:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800767e:	b29b      	uxth	r3, r3
 8007680:	3301      	adds	r3, #1
 8007682:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007686:	b299      	uxth	r1, r3
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	8893      	ldrh	r3, [r2, #4]
 800768c:	f361 034f 	bfi	r3, r1, #1, #15
 8007690:	8093      	strh	r3, [r2, #4]
	}

	return 1;
 8007692:	2301      	movs	r3, #1
}
 8007694:	4618      	mov	r0, r3
 8007696:	3708      	adds	r7, #8
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <ringbuffer_init>:
	/* initialize read and write index */
	rb->read_mirror = rb->read_index = 0;
	rb->write_mirror = rb->write_index = 0;
}

void ringbuffer_init(struct ringbuffer *rb, uint8_t *pool, int16_t size) {
 800769c:	b480      	push	{r7}
 800769e:	b085      	sub	sp, #20
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	4613      	mov	r3, r2
 80076a8:	80fb      	strh	r3, [r7, #6]
	ASSERT(rb != NULL); ASSERT(size > 0);

	/* initialize read and write index */
	rb->read_mirror = rb->read_index = 0;
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	8893      	ldrh	r3, [r2, #4]
 80076ae:	f36f 034f 	bfc	r3, #1, #15
 80076b2:	8093      	strh	r3, [r2, #4]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	889b      	ldrh	r3, [r3, #4]
 80076b8:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80076bc:	b29b      	uxth	r3, r3
 80076be:	f003 0301 	and.w	r3, r3, #1
 80076c2:	b2d9      	uxtb	r1, r3
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	7913      	ldrb	r3, [r2, #4]
 80076c8:	f361 0300 	bfi	r3, r1, #0, #1
 80076cc:	7113      	strb	r3, [r2, #4]
	rb->write_mirror = rb->write_index = 0;
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	88d3      	ldrh	r3, [r2, #6]
 80076d2:	f36f 034f 	bfc	r3, #1, #15
 80076d6:	80d3      	strh	r3, [r2, #6]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	88db      	ldrh	r3, [r3, #6]
 80076dc:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	f003 0301 	and.w	r3, r3, #1
 80076e6:	b2d9      	uxtb	r1, r3
 80076e8:	68fa      	ldr	r2, [r7, #12]
 80076ea:	7993      	ldrb	r3, [r2, #6]
 80076ec:	f361 0300 	bfi	r3, r1, #0, #1
 80076f0:	7193      	strb	r3, [r2, #6]

	/* set buffer pool and size */
	rb->buffer_ptr = pool;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	68ba      	ldr	r2, [r7, #8]
 80076f6:	601a      	str	r2, [r3, #0]
	rb->buffer_size = size; //ALIGN_DOWN(size, ALIGN_SIZE);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	88fa      	ldrh	r2, [r7, #6]
 80076fc:	811a      	strh	r2, [r3, #8]
}
 80076fe:	bf00      	nop
 8007700:	3714      	adds	r7, #20
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr
	...

0800770c <os_kernel_thread_register>:
 *
 *
 *
 * *****************************************************/
status_type os_kernel_thread_register(void)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b086      	sub	sp, #24
 8007710:	af04      	add	r7, sp, #16
	status_type status = ERROR_NONE;
 8007712:	2300      	movs	r3, #0
 8007714:	607b      	str	r3, [r7, #4]

	/* Register serial management task */
	thread_handle_service_uart_mgmt = xTaskCreateStatic( thread_uart_mgmt,
 8007716:	4b0e      	ldr	r3, [pc, #56]	@ (8007750 <os_kernel_thread_register+0x44>)
 8007718:	9302      	str	r3, [sp, #8]
 800771a:	4b0e      	ldr	r3, [pc, #56]	@ (8007754 <os_kernel_thread_register+0x48>)
 800771c:	9301      	str	r3, [sp, #4]
 800771e:	2301      	movs	r3, #1
 8007720:	9300      	str	r3, [sp, #0]
 8007722:	2300      	movs	r3, #0
 8007724:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007728:	490b      	ldr	r1, [pc, #44]	@ (8007758 <os_kernel_thread_register+0x4c>)
 800772a:	480c      	ldr	r0, [pc, #48]	@ (800775c <os_kernel_thread_register+0x50>)
 800772c:	f7fd ff2e 	bl	800558c <xTaskCreateStatic>
 8007730:	4603      	mov	r3, r0
 8007732:	4a0b      	ldr	r2, [pc, #44]	@ (8007760 <os_kernel_thread_register+0x54>)
 8007734:	6013      	str	r3, [r2, #0]
													    NULL,
														CONF_THREAD_UART_MGMT_PRIORITY,
														thread_stack_service_uart_mgmt,
													    &thread_buff_service_uart_mgmt
		                							   );
	if( thread_handle_service_uart_mgmt == NULL )
 8007736:	4b0a      	ldr	r3, [pc, #40]	@ (8007760 <os_kernel_thread_register+0x54>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d103      	bne.n	8007746 <os_kernel_thread_register+0x3a>
	{
		/* Exception mechanism */
		status |= ERROR_OP;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f043 0301 	orr.w	r3, r3, #1
 8007744:	607b      	str	r3, [r7, #4]





	return status;
 8007746:	687b      	ldr	r3, [r7, #4]
}
 8007748:	4618      	mov	r0, r3
 800774a:	3708      	adds	r7, #8
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}
 8007750:	20015ff0 	.word	0x20015ff0
 8007754:	20016098 	.word	0x20016098
 8007758:	08008370 	.word	0x08008370
 800775c:	0800783d 	.word	0x0800783d
 8007760:	20015fec 	.word	0x20015fec

08007764 <printk>:
 *
 *
 *
 * *****************************************************/
int32_t	printk(char* ch)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b08a      	sub	sp, #40	@ 0x28
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
	int 	len = 0, DataIdx;
 800776c:	2300      	movs	r3, #0
 800776e:	623b      	str	r3, [r7, #32]
	__asm volatile
 8007770:	f3ef 8211 	mrs	r2, BASEPRI
 8007774:	f04f 0310 	mov.w	r3, #16
 8007778:	f383 8811 	msr	BASEPRI, r3
 800777c:	f3bf 8f6f 	isb	sy
 8007780:	f3bf 8f4f 	dsb	sy
 8007784:	617a      	str	r2, [r7, #20]
 8007786:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007788:	697b      	ldr	r3, [r7, #20]
	char 	temp_byte_buff;
#if (NO_OF_UART > 0)

	ATOMIC_ENTER_CRITICAL();
 800778a:	61fb      	str	r3, [r7, #28]

	memset(temp_time_buffer, 0, 10);
 800778c:	220a      	movs	r2, #10
 800778e:	2100      	movs	r1, #0
 8007790:	4826      	ldr	r0, [pc, #152]	@ (800782c <printk+0xc8>)
 8007792:	f000 f8f9 	bl	8007988 <memset>
	memset(temp_char_buffer, 0, CONF_MAX_CHAR_IN_PRINTK);
 8007796:	22c8      	movs	r2, #200	@ 0xc8
 8007798:	2100      	movs	r1, #0
 800779a:	4825      	ldr	r0, [pc, #148]	@ (8007830 <printk+0xcc>)
 800779c:	f000 f8f4 	bl	8007988 <memset>

	/*
	 * Print the time-stamp
	 * */

	sprintf(temp_time_buffer,"[%d] ",(int)drv_time_get_ticks());
 80077a0:	f7fc ff34 	bl	800460c <drv_time_get_ticks>
 80077a4:	4603      	mov	r3, r0
 80077a6:	461a      	mov	r2, r3
 80077a8:	4922      	ldr	r1, [pc, #136]	@ (8007834 <printk+0xd0>)
 80077aa:	4820      	ldr	r0, [pc, #128]	@ (800782c <printk+0xc8>)
 80077ac:	f000 f8ca 	bl	8007944 <siprintf>
	len = strlen((char*)temp_time_buffer);
 80077b0:	481e      	ldr	r0, [pc, #120]	@ (800782c <printk+0xc8>)
 80077b2:	f7f8 fd15 	bl	80001e0 <strlen>
 80077b6:	4603      	mov	r3, r0
 80077b8:	623b      	str	r3, [r7, #32]

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80077ba:	2300      	movs	r3, #0
 80077bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80077be:	e00c      	b.n	80077da <printk+0x76>
	{
		temp_byte_buff = temp_time_buffer[DataIdx];
 80077c0:	4a1a      	ldr	r2, [pc, #104]	@ (800782c <printk+0xc8>)
 80077c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c4:	4413      	add	r3, r2
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	76fb      	strb	r3, [r7, #27]
		ringbuffer_putchar(&ipc_handle_printk_buffer, temp_byte_buff);
 80077ca:	7efb      	ldrb	r3, [r7, #27]
 80077cc:	4619      	mov	r1, r3
 80077ce:	481a      	ldr	r0, [pc, #104]	@ (8007838 <printk+0xd4>)
 80077d0:	f7ff febe 	bl	8007550 <ringbuffer_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80077d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d6:	3301      	adds	r3, #1
 80077d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80077da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077dc:	6a3b      	ldr	r3, [r7, #32]
 80077de:	429a      	cmp	r2, r3
 80077e0:	dbee      	blt.n	80077c0 <printk+0x5c>
	}

	/*
	 * Print actual message
	 * */
	len = strlen(ch);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f7f8 fcfc 	bl	80001e0 <strlen>
 80077e8:	4603      	mov	r3, r0
 80077ea:	623b      	str	r3, [r7, #32]

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80077ec:	2300      	movs	r3, #0
 80077ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80077f0:	e00c      	b.n	800780c <printk+0xa8>
	{
		temp_byte_buff = ch[DataIdx];
 80077f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	4413      	add	r3, r2
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	76fb      	strb	r3, [r7, #27]
		ringbuffer_putchar(&ipc_handle_printk_buffer, temp_byte_buff);
 80077fc:	7efb      	ldrb	r3, [r7, #27]
 80077fe:	4619      	mov	r1, r3
 8007800:	480d      	ldr	r0, [pc, #52]	@ (8007838 <printk+0xd4>)
 8007802:	f7ff fea5 	bl	8007550 <ringbuffer_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007808:	3301      	adds	r3, #1
 800780a:	627b      	str	r3, [r7, #36]	@ 0x24
 800780c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800780e:	6a3b      	ldr	r3, [r7, #32]
 8007810:	429a      	cmp	r2, r3
 8007812:	dbee      	blt.n	80077f2 <printk+0x8e>
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f383 8811 	msr	BASEPRI, r3
}
 800781e:	bf00      	nop
	}

	ATOMIC_EXIT_CRITICAL();
#endif
	return len;
 8007820:	6a3b      	ldr	r3, [r7, #32]
}
 8007822:	4618      	mov	r0, r3
 8007824:	3728      	adds	r7, #40	@ 0x28
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	20017098 	.word	0x20017098
 8007830:	200170a4 	.word	0x200170a4
 8007834:	08008384 	.word	0x08008384
 8007838:	20000708 	.word	0x20000708

0800783c <thread_uart_mgmt>:
 *
 *
 *
 * *****************************************************/
void thread_uart_mgmt(void * arg)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
	if(thread_uart_mgmt_init() != ERROR_NONE)
 8007844:	f000 f822 	bl	800788c <thread_uart_mgmt_init>
 8007848:	4603      	mov	r3, r0
 800784a:	2b00      	cmp	r3, #0
 800784c:	d005      	beq.n	800785a <thread_uart_mgmt+0x1e>
	{
		printk("[ ERR ] UART Management suspended!\n\r");
 800784e:	480b      	ldr	r0, [pc, #44]	@ (800787c <thread_uart_mgmt+0x40>)
 8007850:	f7ff ff88 	bl	8007764 <printk>
		vTaskSuspend(NULL);
 8007854:	2000      	movs	r0, #0
 8007856:	f7fe f857 	bl	8005908 <vTaskSuspend>
	}
	{
		printk("[ OK ] UART Management started!\n\r");
 800785a:	4809      	ldr	r0, [pc, #36]	@ (8007880 <thread_uart_mgmt+0x44>)
 800785c:	f7ff ff82 	bl	8007764 <printk>

	while(1)
	{
		/* Printk related prints */
#if defined(COMM_PRINTK_HW_ID)
		if( ringbuffer_getchar(&ipc_handle_printk_buffer, (uint8_t*)&temp_char) == FLAG_SET )
 8007860:	4908      	ldr	r1, [pc, #32]	@ (8007884 <thread_uart_mgmt+0x48>)
 8007862:	4809      	ldr	r0, [pc, #36]	@ (8007888 <thread_uart_mgmt+0x4c>)
 8007864:	f7ff fec9 	bl	80075fa <ringbuffer_getchar>
 8007868:	4603      	mov	r3, r0
 800786a:	2b01      	cmp	r3, #1
 800786c:	d1f8      	bne.n	8007860 <thread_uart_mgmt+0x24>
		{
			drv_serial_transmit(COMM_PRINTK_HW_ID, (uint8_t*)&temp_char, 1);
 800786e:	2201      	movs	r2, #1
 8007870:	4904      	ldr	r1, [pc, #16]	@ (8007884 <thread_uart_mgmt+0x48>)
 8007872:	2001      	movs	r0, #1
 8007874:	f7fc ff1a 	bl	80046ac <drv_serial_transmit>
		if( ringbuffer_getchar(&ipc_handle_printk_buffer, (uint8_t*)&temp_char) == FLAG_SET )
 8007878:	e7f2      	b.n	8007860 <thread_uart_mgmt+0x24>
 800787a:	bf00      	nop
 800787c:	0800838c 	.word	0x0800838c
 8007880:	080083b4 	.word	0x080083b4
 8007884:	2001716c 	.word	0x2001716c
 8007888:	20000708 	.word	0x20000708

0800788c <thread_uart_mgmt_init>:

	}
}

status_type thread_uart_mgmt_init(void)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b082      	sub	sp, #8
 8007890:	af00      	add	r7, sp, #0
	status_type status = ERROR_NONE;
 8007892:	2300      	movs	r3, #0
 8007894:	607b      	str	r3, [r7, #4]

	/* Initialize all the UART drivers */
	for(int i = 0; i < NO_OF_UART; i++)
 8007896:	2300      	movs	r3, #0
 8007898:	603b      	str	r3, [r7, #0]
 800789a:	e00b      	b.n	80078b4 <thread_uart_mgmt_init+0x28>
	{
		status |= drv_serial_init( i );
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	4618      	mov	r0, r3
 80078a2:	f7fc fed5 	bl	8004650 <drv_serial_init>
 80078a6:	4602      	mov	r2, r0
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < NO_OF_UART; i++)
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	3301      	adds	r3, #1
 80078b2:	603b      	str	r3, [r7, #0]
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	ddf0      	ble.n	800789c <thread_uart_mgmt_init+0x10>
	}




	return status;
 80078ba:	687b      	ldr	r3, [r7, #4]
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3708      	adds	r7, #8
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <app_task_1>:
int pid = 0;



void app_task_1(void* data)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b085      	sub	sp, #20
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]

	int a = 20;
 80078cc:	2314      	movs	r3, #20
 80078ce:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		a++;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	3301      	adds	r3, #1
 80078d4:	60fb      	str	r3, [r7, #12]
 80078d6:	e7fb      	b.n	80078d0 <app_task_1+0xc>

080078d8 <app_task_2>:
	}
}


void app_task_2(void* data)
{
 80078d8:	b480      	push	{r7}
 80078da:	b085      	sub	sp, #20
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]

	int a = 20;
 80078e0:	2314      	movs	r3, #20
 80078e2:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		a++;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	3301      	adds	r3, #1
 80078e8:	60fb      	str	r3, [r7, #12]
 80078ea:	e7fb      	b.n	80078e4 <app_task_2+0xc>

080078ec <app_main>:
	}
}

int app_main()
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0

	int k = 0;
 80078f2:	2300      	movs	r3, #0
 80078f4:	607b      	str	r3, [r7, #4]
	k++;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	3301      	adds	r3, #1
 80078fa:	607b      	str	r3, [r7, #4]

	pid = os_create_thread(app_task_1, "TASK_1", 512, NULL);
 80078fc:	2300      	movs	r3, #0
 80078fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007902:	490b      	ldr	r1, [pc, #44]	@ (8007930 <app_main+0x44>)
 8007904:	480b      	ldr	r0, [pc, #44]	@ (8007934 <app_main+0x48>)
 8007906:	f7ff fd59 	bl	80073bc <os_create_thread>
 800790a:	4603      	mov	r3, r0
 800790c:	4a0a      	ldr	r2, [pc, #40]	@ (8007938 <app_main+0x4c>)
 800790e:	6013      	str	r3, [r2, #0]
	pid = os_create_thread(app_task_2, "TASK_2", 512, NULL);
 8007910:	2300      	movs	r3, #0
 8007912:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007916:	4909      	ldr	r1, [pc, #36]	@ (800793c <app_main+0x50>)
 8007918:	4809      	ldr	r0, [pc, #36]	@ (8007940 <app_main+0x54>)
 800791a:	f7ff fd4f 	bl	80073bc <os_create_thread>
 800791e:	4603      	mov	r3, r0
 8007920:	4a05      	ldr	r2, [pc, #20]	@ (8007938 <app_main+0x4c>)
 8007922:	6013      	str	r3, [r2, #0]




	return 0;
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	3708      	adds	r7, #8
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop
 8007930:	080083d8 	.word	0x080083d8
 8007934:	080078c5 	.word	0x080078c5
 8007938:	20017170 	.word	0x20017170
 800793c:	080083e0 	.word	0x080083e0
 8007940:	080078d9 	.word	0x080078d9

08007944 <siprintf>:
 8007944:	b40e      	push	{r1, r2, r3}
 8007946:	b510      	push	{r4, lr}
 8007948:	b09d      	sub	sp, #116	@ 0x74
 800794a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800794c:	9002      	str	r0, [sp, #8]
 800794e:	9006      	str	r0, [sp, #24]
 8007950:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007954:	480a      	ldr	r0, [pc, #40]	@ (8007980 <siprintf+0x3c>)
 8007956:	9107      	str	r1, [sp, #28]
 8007958:	9104      	str	r1, [sp, #16]
 800795a:	490a      	ldr	r1, [pc, #40]	@ (8007984 <siprintf+0x40>)
 800795c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007960:	9105      	str	r1, [sp, #20]
 8007962:	2400      	movs	r4, #0
 8007964:	a902      	add	r1, sp, #8
 8007966:	6800      	ldr	r0, [r0, #0]
 8007968:	9301      	str	r3, [sp, #4]
 800796a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800796c:	f000 fa00 	bl	8007d70 <_svfiprintf_r>
 8007970:	9b02      	ldr	r3, [sp, #8]
 8007972:	701c      	strb	r4, [r3, #0]
 8007974:	b01d      	add	sp, #116	@ 0x74
 8007976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800797a:	b003      	add	sp, #12
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop
 8007980:	20000014 	.word	0x20000014
 8007984:	ffff0208 	.word	0xffff0208

08007988 <memset>:
 8007988:	4402      	add	r2, r0
 800798a:	4603      	mov	r3, r0
 800798c:	4293      	cmp	r3, r2
 800798e:	d100      	bne.n	8007992 <memset+0xa>
 8007990:	4770      	bx	lr
 8007992:	f803 1b01 	strb.w	r1, [r3], #1
 8007996:	e7f9      	b.n	800798c <memset+0x4>

08007998 <_reclaim_reent>:
 8007998:	4b2d      	ldr	r3, [pc, #180]	@ (8007a50 <_reclaim_reent+0xb8>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4283      	cmp	r3, r0
 800799e:	b570      	push	{r4, r5, r6, lr}
 80079a0:	4604      	mov	r4, r0
 80079a2:	d053      	beq.n	8007a4c <_reclaim_reent+0xb4>
 80079a4:	69c3      	ldr	r3, [r0, #28]
 80079a6:	b31b      	cbz	r3, 80079f0 <_reclaim_reent+0x58>
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	b163      	cbz	r3, 80079c6 <_reclaim_reent+0x2e>
 80079ac:	2500      	movs	r5, #0
 80079ae:	69e3      	ldr	r3, [r4, #28]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	5959      	ldr	r1, [r3, r5]
 80079b4:	b9b1      	cbnz	r1, 80079e4 <_reclaim_reent+0x4c>
 80079b6:	3504      	adds	r5, #4
 80079b8:	2d80      	cmp	r5, #128	@ 0x80
 80079ba:	d1f8      	bne.n	80079ae <_reclaim_reent+0x16>
 80079bc:	69e3      	ldr	r3, [r4, #28]
 80079be:	4620      	mov	r0, r4
 80079c0:	68d9      	ldr	r1, [r3, #12]
 80079c2:	f000 f881 	bl	8007ac8 <_free_r>
 80079c6:	69e3      	ldr	r3, [r4, #28]
 80079c8:	6819      	ldr	r1, [r3, #0]
 80079ca:	b111      	cbz	r1, 80079d2 <_reclaim_reent+0x3a>
 80079cc:	4620      	mov	r0, r4
 80079ce:	f000 f87b 	bl	8007ac8 <_free_r>
 80079d2:	69e3      	ldr	r3, [r4, #28]
 80079d4:	689d      	ldr	r5, [r3, #8]
 80079d6:	b15d      	cbz	r5, 80079f0 <_reclaim_reent+0x58>
 80079d8:	4629      	mov	r1, r5
 80079da:	4620      	mov	r0, r4
 80079dc:	682d      	ldr	r5, [r5, #0]
 80079de:	f000 f873 	bl	8007ac8 <_free_r>
 80079e2:	e7f8      	b.n	80079d6 <_reclaim_reent+0x3e>
 80079e4:	680e      	ldr	r6, [r1, #0]
 80079e6:	4620      	mov	r0, r4
 80079e8:	f000 f86e 	bl	8007ac8 <_free_r>
 80079ec:	4631      	mov	r1, r6
 80079ee:	e7e1      	b.n	80079b4 <_reclaim_reent+0x1c>
 80079f0:	6961      	ldr	r1, [r4, #20]
 80079f2:	b111      	cbz	r1, 80079fa <_reclaim_reent+0x62>
 80079f4:	4620      	mov	r0, r4
 80079f6:	f000 f867 	bl	8007ac8 <_free_r>
 80079fa:	69e1      	ldr	r1, [r4, #28]
 80079fc:	b111      	cbz	r1, 8007a04 <_reclaim_reent+0x6c>
 80079fe:	4620      	mov	r0, r4
 8007a00:	f000 f862 	bl	8007ac8 <_free_r>
 8007a04:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007a06:	b111      	cbz	r1, 8007a0e <_reclaim_reent+0x76>
 8007a08:	4620      	mov	r0, r4
 8007a0a:	f000 f85d 	bl	8007ac8 <_free_r>
 8007a0e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a10:	b111      	cbz	r1, 8007a18 <_reclaim_reent+0x80>
 8007a12:	4620      	mov	r0, r4
 8007a14:	f000 f858 	bl	8007ac8 <_free_r>
 8007a18:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007a1a:	b111      	cbz	r1, 8007a22 <_reclaim_reent+0x8a>
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	f000 f853 	bl	8007ac8 <_free_r>
 8007a22:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007a24:	b111      	cbz	r1, 8007a2c <_reclaim_reent+0x94>
 8007a26:	4620      	mov	r0, r4
 8007a28:	f000 f84e 	bl	8007ac8 <_free_r>
 8007a2c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007a2e:	b111      	cbz	r1, 8007a36 <_reclaim_reent+0x9e>
 8007a30:	4620      	mov	r0, r4
 8007a32:	f000 f849 	bl	8007ac8 <_free_r>
 8007a36:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007a38:	b111      	cbz	r1, 8007a40 <_reclaim_reent+0xa8>
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	f000 f844 	bl	8007ac8 <_free_r>
 8007a40:	6a23      	ldr	r3, [r4, #32]
 8007a42:	b11b      	cbz	r3, 8007a4c <_reclaim_reent+0xb4>
 8007a44:	4620      	mov	r0, r4
 8007a46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007a4a:	4718      	bx	r3
 8007a4c:	bd70      	pop	{r4, r5, r6, pc}
 8007a4e:	bf00      	nop
 8007a50:	20000014 	.word	0x20000014

08007a54 <__errno>:
 8007a54:	4b01      	ldr	r3, [pc, #4]	@ (8007a5c <__errno+0x8>)
 8007a56:	6818      	ldr	r0, [r3, #0]
 8007a58:	4770      	bx	lr
 8007a5a:	bf00      	nop
 8007a5c:	20000014 	.word	0x20000014

08007a60 <__libc_init_array>:
 8007a60:	b570      	push	{r4, r5, r6, lr}
 8007a62:	4d0d      	ldr	r5, [pc, #52]	@ (8007a98 <__libc_init_array+0x38>)
 8007a64:	4c0d      	ldr	r4, [pc, #52]	@ (8007a9c <__libc_init_array+0x3c>)
 8007a66:	1b64      	subs	r4, r4, r5
 8007a68:	10a4      	asrs	r4, r4, #2
 8007a6a:	2600      	movs	r6, #0
 8007a6c:	42a6      	cmp	r6, r4
 8007a6e:	d109      	bne.n	8007a84 <__libc_init_array+0x24>
 8007a70:	4d0b      	ldr	r5, [pc, #44]	@ (8007aa0 <__libc_init_array+0x40>)
 8007a72:	4c0c      	ldr	r4, [pc, #48]	@ (8007aa4 <__libc_init_array+0x44>)
 8007a74:	f000 fc64 	bl	8008340 <_init>
 8007a78:	1b64      	subs	r4, r4, r5
 8007a7a:	10a4      	asrs	r4, r4, #2
 8007a7c:	2600      	movs	r6, #0
 8007a7e:	42a6      	cmp	r6, r4
 8007a80:	d105      	bne.n	8007a8e <__libc_init_array+0x2e>
 8007a82:	bd70      	pop	{r4, r5, r6, pc}
 8007a84:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a88:	4798      	blx	r3
 8007a8a:	3601      	adds	r6, #1
 8007a8c:	e7ee      	b.n	8007a6c <__libc_init_array+0xc>
 8007a8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a92:	4798      	blx	r3
 8007a94:	3601      	adds	r6, #1
 8007a96:	e7f2      	b.n	8007a7e <__libc_init_array+0x1e>
 8007a98:	0800843c 	.word	0x0800843c
 8007a9c:	0800843c 	.word	0x0800843c
 8007aa0:	0800843c 	.word	0x0800843c
 8007aa4:	08008440 	.word	0x08008440

08007aa8 <__retarget_lock_acquire_recursive>:
 8007aa8:	4770      	bx	lr

08007aaa <__retarget_lock_release_recursive>:
 8007aaa:	4770      	bx	lr

08007aac <memcpy>:
 8007aac:	440a      	add	r2, r1
 8007aae:	4291      	cmp	r1, r2
 8007ab0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007ab4:	d100      	bne.n	8007ab8 <memcpy+0xc>
 8007ab6:	4770      	bx	lr
 8007ab8:	b510      	push	{r4, lr}
 8007aba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007abe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ac2:	4291      	cmp	r1, r2
 8007ac4:	d1f9      	bne.n	8007aba <memcpy+0xe>
 8007ac6:	bd10      	pop	{r4, pc}

08007ac8 <_free_r>:
 8007ac8:	b538      	push	{r3, r4, r5, lr}
 8007aca:	4605      	mov	r5, r0
 8007acc:	2900      	cmp	r1, #0
 8007ace:	d041      	beq.n	8007b54 <_free_r+0x8c>
 8007ad0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ad4:	1f0c      	subs	r4, r1, #4
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	bfb8      	it	lt
 8007ada:	18e4      	addlt	r4, r4, r3
 8007adc:	f000 f8e0 	bl	8007ca0 <__malloc_lock>
 8007ae0:	4a1d      	ldr	r2, [pc, #116]	@ (8007b58 <_free_r+0x90>)
 8007ae2:	6813      	ldr	r3, [r2, #0]
 8007ae4:	b933      	cbnz	r3, 8007af4 <_free_r+0x2c>
 8007ae6:	6063      	str	r3, [r4, #4]
 8007ae8:	6014      	str	r4, [r2, #0]
 8007aea:	4628      	mov	r0, r5
 8007aec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007af0:	f000 b8dc 	b.w	8007cac <__malloc_unlock>
 8007af4:	42a3      	cmp	r3, r4
 8007af6:	d908      	bls.n	8007b0a <_free_r+0x42>
 8007af8:	6820      	ldr	r0, [r4, #0]
 8007afa:	1821      	adds	r1, r4, r0
 8007afc:	428b      	cmp	r3, r1
 8007afe:	bf01      	itttt	eq
 8007b00:	6819      	ldreq	r1, [r3, #0]
 8007b02:	685b      	ldreq	r3, [r3, #4]
 8007b04:	1809      	addeq	r1, r1, r0
 8007b06:	6021      	streq	r1, [r4, #0]
 8007b08:	e7ed      	b.n	8007ae6 <_free_r+0x1e>
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	b10b      	cbz	r3, 8007b14 <_free_r+0x4c>
 8007b10:	42a3      	cmp	r3, r4
 8007b12:	d9fa      	bls.n	8007b0a <_free_r+0x42>
 8007b14:	6811      	ldr	r1, [r2, #0]
 8007b16:	1850      	adds	r0, r2, r1
 8007b18:	42a0      	cmp	r0, r4
 8007b1a:	d10b      	bne.n	8007b34 <_free_r+0x6c>
 8007b1c:	6820      	ldr	r0, [r4, #0]
 8007b1e:	4401      	add	r1, r0
 8007b20:	1850      	adds	r0, r2, r1
 8007b22:	4283      	cmp	r3, r0
 8007b24:	6011      	str	r1, [r2, #0]
 8007b26:	d1e0      	bne.n	8007aea <_free_r+0x22>
 8007b28:	6818      	ldr	r0, [r3, #0]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	6053      	str	r3, [r2, #4]
 8007b2e:	4408      	add	r0, r1
 8007b30:	6010      	str	r0, [r2, #0]
 8007b32:	e7da      	b.n	8007aea <_free_r+0x22>
 8007b34:	d902      	bls.n	8007b3c <_free_r+0x74>
 8007b36:	230c      	movs	r3, #12
 8007b38:	602b      	str	r3, [r5, #0]
 8007b3a:	e7d6      	b.n	8007aea <_free_r+0x22>
 8007b3c:	6820      	ldr	r0, [r4, #0]
 8007b3e:	1821      	adds	r1, r4, r0
 8007b40:	428b      	cmp	r3, r1
 8007b42:	bf04      	itt	eq
 8007b44:	6819      	ldreq	r1, [r3, #0]
 8007b46:	685b      	ldreq	r3, [r3, #4]
 8007b48:	6063      	str	r3, [r4, #4]
 8007b4a:	bf04      	itt	eq
 8007b4c:	1809      	addeq	r1, r1, r0
 8007b4e:	6021      	streq	r1, [r4, #0]
 8007b50:	6054      	str	r4, [r2, #4]
 8007b52:	e7ca      	b.n	8007aea <_free_r+0x22>
 8007b54:	bd38      	pop	{r3, r4, r5, pc}
 8007b56:	bf00      	nop
 8007b58:	200172b8 	.word	0x200172b8

08007b5c <sbrk_aligned>:
 8007b5c:	b570      	push	{r4, r5, r6, lr}
 8007b5e:	4e0f      	ldr	r6, [pc, #60]	@ (8007b9c <sbrk_aligned+0x40>)
 8007b60:	460c      	mov	r4, r1
 8007b62:	6831      	ldr	r1, [r6, #0]
 8007b64:	4605      	mov	r5, r0
 8007b66:	b911      	cbnz	r1, 8007b6e <sbrk_aligned+0x12>
 8007b68:	f000 fba4 	bl	80082b4 <_sbrk_r>
 8007b6c:	6030      	str	r0, [r6, #0]
 8007b6e:	4621      	mov	r1, r4
 8007b70:	4628      	mov	r0, r5
 8007b72:	f000 fb9f 	bl	80082b4 <_sbrk_r>
 8007b76:	1c43      	adds	r3, r0, #1
 8007b78:	d103      	bne.n	8007b82 <sbrk_aligned+0x26>
 8007b7a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007b7e:	4620      	mov	r0, r4
 8007b80:	bd70      	pop	{r4, r5, r6, pc}
 8007b82:	1cc4      	adds	r4, r0, #3
 8007b84:	f024 0403 	bic.w	r4, r4, #3
 8007b88:	42a0      	cmp	r0, r4
 8007b8a:	d0f8      	beq.n	8007b7e <sbrk_aligned+0x22>
 8007b8c:	1a21      	subs	r1, r4, r0
 8007b8e:	4628      	mov	r0, r5
 8007b90:	f000 fb90 	bl	80082b4 <_sbrk_r>
 8007b94:	3001      	adds	r0, #1
 8007b96:	d1f2      	bne.n	8007b7e <sbrk_aligned+0x22>
 8007b98:	e7ef      	b.n	8007b7a <sbrk_aligned+0x1e>
 8007b9a:	bf00      	nop
 8007b9c:	200172b4 	.word	0x200172b4

08007ba0 <_malloc_r>:
 8007ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ba4:	1ccd      	adds	r5, r1, #3
 8007ba6:	f025 0503 	bic.w	r5, r5, #3
 8007baa:	3508      	adds	r5, #8
 8007bac:	2d0c      	cmp	r5, #12
 8007bae:	bf38      	it	cc
 8007bb0:	250c      	movcc	r5, #12
 8007bb2:	2d00      	cmp	r5, #0
 8007bb4:	4606      	mov	r6, r0
 8007bb6:	db01      	blt.n	8007bbc <_malloc_r+0x1c>
 8007bb8:	42a9      	cmp	r1, r5
 8007bba:	d904      	bls.n	8007bc6 <_malloc_r+0x26>
 8007bbc:	230c      	movs	r3, #12
 8007bbe:	6033      	str	r3, [r6, #0]
 8007bc0:	2000      	movs	r0, #0
 8007bc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bc6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007c9c <_malloc_r+0xfc>
 8007bca:	f000 f869 	bl	8007ca0 <__malloc_lock>
 8007bce:	f8d8 3000 	ldr.w	r3, [r8]
 8007bd2:	461c      	mov	r4, r3
 8007bd4:	bb44      	cbnz	r4, 8007c28 <_malloc_r+0x88>
 8007bd6:	4629      	mov	r1, r5
 8007bd8:	4630      	mov	r0, r6
 8007bda:	f7ff ffbf 	bl	8007b5c <sbrk_aligned>
 8007bde:	1c43      	adds	r3, r0, #1
 8007be0:	4604      	mov	r4, r0
 8007be2:	d158      	bne.n	8007c96 <_malloc_r+0xf6>
 8007be4:	f8d8 4000 	ldr.w	r4, [r8]
 8007be8:	4627      	mov	r7, r4
 8007bea:	2f00      	cmp	r7, #0
 8007bec:	d143      	bne.n	8007c76 <_malloc_r+0xd6>
 8007bee:	2c00      	cmp	r4, #0
 8007bf0:	d04b      	beq.n	8007c8a <_malloc_r+0xea>
 8007bf2:	6823      	ldr	r3, [r4, #0]
 8007bf4:	4639      	mov	r1, r7
 8007bf6:	4630      	mov	r0, r6
 8007bf8:	eb04 0903 	add.w	r9, r4, r3
 8007bfc:	f000 fb5a 	bl	80082b4 <_sbrk_r>
 8007c00:	4581      	cmp	r9, r0
 8007c02:	d142      	bne.n	8007c8a <_malloc_r+0xea>
 8007c04:	6821      	ldr	r1, [r4, #0]
 8007c06:	1a6d      	subs	r5, r5, r1
 8007c08:	4629      	mov	r1, r5
 8007c0a:	4630      	mov	r0, r6
 8007c0c:	f7ff ffa6 	bl	8007b5c <sbrk_aligned>
 8007c10:	3001      	adds	r0, #1
 8007c12:	d03a      	beq.n	8007c8a <_malloc_r+0xea>
 8007c14:	6823      	ldr	r3, [r4, #0]
 8007c16:	442b      	add	r3, r5
 8007c18:	6023      	str	r3, [r4, #0]
 8007c1a:	f8d8 3000 	ldr.w	r3, [r8]
 8007c1e:	685a      	ldr	r2, [r3, #4]
 8007c20:	bb62      	cbnz	r2, 8007c7c <_malloc_r+0xdc>
 8007c22:	f8c8 7000 	str.w	r7, [r8]
 8007c26:	e00f      	b.n	8007c48 <_malloc_r+0xa8>
 8007c28:	6822      	ldr	r2, [r4, #0]
 8007c2a:	1b52      	subs	r2, r2, r5
 8007c2c:	d420      	bmi.n	8007c70 <_malloc_r+0xd0>
 8007c2e:	2a0b      	cmp	r2, #11
 8007c30:	d917      	bls.n	8007c62 <_malloc_r+0xc2>
 8007c32:	1961      	adds	r1, r4, r5
 8007c34:	42a3      	cmp	r3, r4
 8007c36:	6025      	str	r5, [r4, #0]
 8007c38:	bf18      	it	ne
 8007c3a:	6059      	strne	r1, [r3, #4]
 8007c3c:	6863      	ldr	r3, [r4, #4]
 8007c3e:	bf08      	it	eq
 8007c40:	f8c8 1000 	streq.w	r1, [r8]
 8007c44:	5162      	str	r2, [r4, r5]
 8007c46:	604b      	str	r3, [r1, #4]
 8007c48:	4630      	mov	r0, r6
 8007c4a:	f000 f82f 	bl	8007cac <__malloc_unlock>
 8007c4e:	f104 000b 	add.w	r0, r4, #11
 8007c52:	1d23      	adds	r3, r4, #4
 8007c54:	f020 0007 	bic.w	r0, r0, #7
 8007c58:	1ac2      	subs	r2, r0, r3
 8007c5a:	bf1c      	itt	ne
 8007c5c:	1a1b      	subne	r3, r3, r0
 8007c5e:	50a3      	strne	r3, [r4, r2]
 8007c60:	e7af      	b.n	8007bc2 <_malloc_r+0x22>
 8007c62:	6862      	ldr	r2, [r4, #4]
 8007c64:	42a3      	cmp	r3, r4
 8007c66:	bf0c      	ite	eq
 8007c68:	f8c8 2000 	streq.w	r2, [r8]
 8007c6c:	605a      	strne	r2, [r3, #4]
 8007c6e:	e7eb      	b.n	8007c48 <_malloc_r+0xa8>
 8007c70:	4623      	mov	r3, r4
 8007c72:	6864      	ldr	r4, [r4, #4]
 8007c74:	e7ae      	b.n	8007bd4 <_malloc_r+0x34>
 8007c76:	463c      	mov	r4, r7
 8007c78:	687f      	ldr	r7, [r7, #4]
 8007c7a:	e7b6      	b.n	8007bea <_malloc_r+0x4a>
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	42a3      	cmp	r3, r4
 8007c82:	d1fb      	bne.n	8007c7c <_malloc_r+0xdc>
 8007c84:	2300      	movs	r3, #0
 8007c86:	6053      	str	r3, [r2, #4]
 8007c88:	e7de      	b.n	8007c48 <_malloc_r+0xa8>
 8007c8a:	230c      	movs	r3, #12
 8007c8c:	6033      	str	r3, [r6, #0]
 8007c8e:	4630      	mov	r0, r6
 8007c90:	f000 f80c 	bl	8007cac <__malloc_unlock>
 8007c94:	e794      	b.n	8007bc0 <_malloc_r+0x20>
 8007c96:	6005      	str	r5, [r0, #0]
 8007c98:	e7d6      	b.n	8007c48 <_malloc_r+0xa8>
 8007c9a:	bf00      	nop
 8007c9c:	200172b8 	.word	0x200172b8

08007ca0 <__malloc_lock>:
 8007ca0:	4801      	ldr	r0, [pc, #4]	@ (8007ca8 <__malloc_lock+0x8>)
 8007ca2:	f7ff bf01 	b.w	8007aa8 <__retarget_lock_acquire_recursive>
 8007ca6:	bf00      	nop
 8007ca8:	200172b0 	.word	0x200172b0

08007cac <__malloc_unlock>:
 8007cac:	4801      	ldr	r0, [pc, #4]	@ (8007cb4 <__malloc_unlock+0x8>)
 8007cae:	f7ff befc 	b.w	8007aaa <__retarget_lock_release_recursive>
 8007cb2:	bf00      	nop
 8007cb4:	200172b0 	.word	0x200172b0

08007cb8 <__ssputs_r>:
 8007cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cbc:	688e      	ldr	r6, [r1, #8]
 8007cbe:	461f      	mov	r7, r3
 8007cc0:	42be      	cmp	r6, r7
 8007cc2:	680b      	ldr	r3, [r1, #0]
 8007cc4:	4682      	mov	sl, r0
 8007cc6:	460c      	mov	r4, r1
 8007cc8:	4690      	mov	r8, r2
 8007cca:	d82d      	bhi.n	8007d28 <__ssputs_r+0x70>
 8007ccc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007cd0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007cd4:	d026      	beq.n	8007d24 <__ssputs_r+0x6c>
 8007cd6:	6965      	ldr	r5, [r4, #20]
 8007cd8:	6909      	ldr	r1, [r1, #16]
 8007cda:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007cde:	eba3 0901 	sub.w	r9, r3, r1
 8007ce2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ce6:	1c7b      	adds	r3, r7, #1
 8007ce8:	444b      	add	r3, r9
 8007cea:	106d      	asrs	r5, r5, #1
 8007cec:	429d      	cmp	r5, r3
 8007cee:	bf38      	it	cc
 8007cf0:	461d      	movcc	r5, r3
 8007cf2:	0553      	lsls	r3, r2, #21
 8007cf4:	d527      	bpl.n	8007d46 <__ssputs_r+0x8e>
 8007cf6:	4629      	mov	r1, r5
 8007cf8:	f7ff ff52 	bl	8007ba0 <_malloc_r>
 8007cfc:	4606      	mov	r6, r0
 8007cfe:	b360      	cbz	r0, 8007d5a <__ssputs_r+0xa2>
 8007d00:	6921      	ldr	r1, [r4, #16]
 8007d02:	464a      	mov	r2, r9
 8007d04:	f7ff fed2 	bl	8007aac <memcpy>
 8007d08:	89a3      	ldrh	r3, [r4, #12]
 8007d0a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007d0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d12:	81a3      	strh	r3, [r4, #12]
 8007d14:	6126      	str	r6, [r4, #16]
 8007d16:	6165      	str	r5, [r4, #20]
 8007d18:	444e      	add	r6, r9
 8007d1a:	eba5 0509 	sub.w	r5, r5, r9
 8007d1e:	6026      	str	r6, [r4, #0]
 8007d20:	60a5      	str	r5, [r4, #8]
 8007d22:	463e      	mov	r6, r7
 8007d24:	42be      	cmp	r6, r7
 8007d26:	d900      	bls.n	8007d2a <__ssputs_r+0x72>
 8007d28:	463e      	mov	r6, r7
 8007d2a:	6820      	ldr	r0, [r4, #0]
 8007d2c:	4632      	mov	r2, r6
 8007d2e:	4641      	mov	r1, r8
 8007d30:	f000 faa6 	bl	8008280 <memmove>
 8007d34:	68a3      	ldr	r3, [r4, #8]
 8007d36:	1b9b      	subs	r3, r3, r6
 8007d38:	60a3      	str	r3, [r4, #8]
 8007d3a:	6823      	ldr	r3, [r4, #0]
 8007d3c:	4433      	add	r3, r6
 8007d3e:	6023      	str	r3, [r4, #0]
 8007d40:	2000      	movs	r0, #0
 8007d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d46:	462a      	mov	r2, r5
 8007d48:	f000 fac4 	bl	80082d4 <_realloc_r>
 8007d4c:	4606      	mov	r6, r0
 8007d4e:	2800      	cmp	r0, #0
 8007d50:	d1e0      	bne.n	8007d14 <__ssputs_r+0x5c>
 8007d52:	6921      	ldr	r1, [r4, #16]
 8007d54:	4650      	mov	r0, sl
 8007d56:	f7ff feb7 	bl	8007ac8 <_free_r>
 8007d5a:	230c      	movs	r3, #12
 8007d5c:	f8ca 3000 	str.w	r3, [sl]
 8007d60:	89a3      	ldrh	r3, [r4, #12]
 8007d62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d66:	81a3      	strh	r3, [r4, #12]
 8007d68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007d6c:	e7e9      	b.n	8007d42 <__ssputs_r+0x8a>
	...

08007d70 <_svfiprintf_r>:
 8007d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d74:	4698      	mov	r8, r3
 8007d76:	898b      	ldrh	r3, [r1, #12]
 8007d78:	061b      	lsls	r3, r3, #24
 8007d7a:	b09d      	sub	sp, #116	@ 0x74
 8007d7c:	4607      	mov	r7, r0
 8007d7e:	460d      	mov	r5, r1
 8007d80:	4614      	mov	r4, r2
 8007d82:	d510      	bpl.n	8007da6 <_svfiprintf_r+0x36>
 8007d84:	690b      	ldr	r3, [r1, #16]
 8007d86:	b973      	cbnz	r3, 8007da6 <_svfiprintf_r+0x36>
 8007d88:	2140      	movs	r1, #64	@ 0x40
 8007d8a:	f7ff ff09 	bl	8007ba0 <_malloc_r>
 8007d8e:	6028      	str	r0, [r5, #0]
 8007d90:	6128      	str	r0, [r5, #16]
 8007d92:	b930      	cbnz	r0, 8007da2 <_svfiprintf_r+0x32>
 8007d94:	230c      	movs	r3, #12
 8007d96:	603b      	str	r3, [r7, #0]
 8007d98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007d9c:	b01d      	add	sp, #116	@ 0x74
 8007d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007da2:	2340      	movs	r3, #64	@ 0x40
 8007da4:	616b      	str	r3, [r5, #20]
 8007da6:	2300      	movs	r3, #0
 8007da8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007daa:	2320      	movs	r3, #32
 8007dac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007db0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007db4:	2330      	movs	r3, #48	@ 0x30
 8007db6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007f54 <_svfiprintf_r+0x1e4>
 8007dba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007dbe:	f04f 0901 	mov.w	r9, #1
 8007dc2:	4623      	mov	r3, r4
 8007dc4:	469a      	mov	sl, r3
 8007dc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dca:	b10a      	cbz	r2, 8007dd0 <_svfiprintf_r+0x60>
 8007dcc:	2a25      	cmp	r2, #37	@ 0x25
 8007dce:	d1f9      	bne.n	8007dc4 <_svfiprintf_r+0x54>
 8007dd0:	ebba 0b04 	subs.w	fp, sl, r4
 8007dd4:	d00b      	beq.n	8007dee <_svfiprintf_r+0x7e>
 8007dd6:	465b      	mov	r3, fp
 8007dd8:	4622      	mov	r2, r4
 8007dda:	4629      	mov	r1, r5
 8007ddc:	4638      	mov	r0, r7
 8007dde:	f7ff ff6b 	bl	8007cb8 <__ssputs_r>
 8007de2:	3001      	adds	r0, #1
 8007de4:	f000 80a7 	beq.w	8007f36 <_svfiprintf_r+0x1c6>
 8007de8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007dea:	445a      	add	r2, fp
 8007dec:	9209      	str	r2, [sp, #36]	@ 0x24
 8007dee:	f89a 3000 	ldrb.w	r3, [sl]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	f000 809f 	beq.w	8007f36 <_svfiprintf_r+0x1c6>
 8007df8:	2300      	movs	r3, #0
 8007dfa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007dfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e02:	f10a 0a01 	add.w	sl, sl, #1
 8007e06:	9304      	str	r3, [sp, #16]
 8007e08:	9307      	str	r3, [sp, #28]
 8007e0a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007e0e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007e10:	4654      	mov	r4, sl
 8007e12:	2205      	movs	r2, #5
 8007e14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e18:	484e      	ldr	r0, [pc, #312]	@ (8007f54 <_svfiprintf_r+0x1e4>)
 8007e1a:	f7f8 f9e9 	bl	80001f0 <memchr>
 8007e1e:	9a04      	ldr	r2, [sp, #16]
 8007e20:	b9d8      	cbnz	r0, 8007e5a <_svfiprintf_r+0xea>
 8007e22:	06d0      	lsls	r0, r2, #27
 8007e24:	bf44      	itt	mi
 8007e26:	2320      	movmi	r3, #32
 8007e28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e2c:	0711      	lsls	r1, r2, #28
 8007e2e:	bf44      	itt	mi
 8007e30:	232b      	movmi	r3, #43	@ 0x2b
 8007e32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e36:	f89a 3000 	ldrb.w	r3, [sl]
 8007e3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e3c:	d015      	beq.n	8007e6a <_svfiprintf_r+0xfa>
 8007e3e:	9a07      	ldr	r2, [sp, #28]
 8007e40:	4654      	mov	r4, sl
 8007e42:	2000      	movs	r0, #0
 8007e44:	f04f 0c0a 	mov.w	ip, #10
 8007e48:	4621      	mov	r1, r4
 8007e4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e4e:	3b30      	subs	r3, #48	@ 0x30
 8007e50:	2b09      	cmp	r3, #9
 8007e52:	d94b      	bls.n	8007eec <_svfiprintf_r+0x17c>
 8007e54:	b1b0      	cbz	r0, 8007e84 <_svfiprintf_r+0x114>
 8007e56:	9207      	str	r2, [sp, #28]
 8007e58:	e014      	b.n	8007e84 <_svfiprintf_r+0x114>
 8007e5a:	eba0 0308 	sub.w	r3, r0, r8
 8007e5e:	fa09 f303 	lsl.w	r3, r9, r3
 8007e62:	4313      	orrs	r3, r2
 8007e64:	9304      	str	r3, [sp, #16]
 8007e66:	46a2      	mov	sl, r4
 8007e68:	e7d2      	b.n	8007e10 <_svfiprintf_r+0xa0>
 8007e6a:	9b03      	ldr	r3, [sp, #12]
 8007e6c:	1d19      	adds	r1, r3, #4
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	9103      	str	r1, [sp, #12]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	bfbb      	ittet	lt
 8007e76:	425b      	neglt	r3, r3
 8007e78:	f042 0202 	orrlt.w	r2, r2, #2
 8007e7c:	9307      	strge	r3, [sp, #28]
 8007e7e:	9307      	strlt	r3, [sp, #28]
 8007e80:	bfb8      	it	lt
 8007e82:	9204      	strlt	r2, [sp, #16]
 8007e84:	7823      	ldrb	r3, [r4, #0]
 8007e86:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e88:	d10a      	bne.n	8007ea0 <_svfiprintf_r+0x130>
 8007e8a:	7863      	ldrb	r3, [r4, #1]
 8007e8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e8e:	d132      	bne.n	8007ef6 <_svfiprintf_r+0x186>
 8007e90:	9b03      	ldr	r3, [sp, #12]
 8007e92:	1d1a      	adds	r2, r3, #4
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	9203      	str	r2, [sp, #12]
 8007e98:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007e9c:	3402      	adds	r4, #2
 8007e9e:	9305      	str	r3, [sp, #20]
 8007ea0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007f64 <_svfiprintf_r+0x1f4>
 8007ea4:	7821      	ldrb	r1, [r4, #0]
 8007ea6:	2203      	movs	r2, #3
 8007ea8:	4650      	mov	r0, sl
 8007eaa:	f7f8 f9a1 	bl	80001f0 <memchr>
 8007eae:	b138      	cbz	r0, 8007ec0 <_svfiprintf_r+0x150>
 8007eb0:	9b04      	ldr	r3, [sp, #16]
 8007eb2:	eba0 000a 	sub.w	r0, r0, sl
 8007eb6:	2240      	movs	r2, #64	@ 0x40
 8007eb8:	4082      	lsls	r2, r0
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	3401      	adds	r4, #1
 8007ebe:	9304      	str	r3, [sp, #16]
 8007ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ec4:	4824      	ldr	r0, [pc, #144]	@ (8007f58 <_svfiprintf_r+0x1e8>)
 8007ec6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007eca:	2206      	movs	r2, #6
 8007ecc:	f7f8 f990 	bl	80001f0 <memchr>
 8007ed0:	2800      	cmp	r0, #0
 8007ed2:	d036      	beq.n	8007f42 <_svfiprintf_r+0x1d2>
 8007ed4:	4b21      	ldr	r3, [pc, #132]	@ (8007f5c <_svfiprintf_r+0x1ec>)
 8007ed6:	bb1b      	cbnz	r3, 8007f20 <_svfiprintf_r+0x1b0>
 8007ed8:	9b03      	ldr	r3, [sp, #12]
 8007eda:	3307      	adds	r3, #7
 8007edc:	f023 0307 	bic.w	r3, r3, #7
 8007ee0:	3308      	adds	r3, #8
 8007ee2:	9303      	str	r3, [sp, #12]
 8007ee4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ee6:	4433      	add	r3, r6
 8007ee8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007eea:	e76a      	b.n	8007dc2 <_svfiprintf_r+0x52>
 8007eec:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ef0:	460c      	mov	r4, r1
 8007ef2:	2001      	movs	r0, #1
 8007ef4:	e7a8      	b.n	8007e48 <_svfiprintf_r+0xd8>
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	3401      	adds	r4, #1
 8007efa:	9305      	str	r3, [sp, #20]
 8007efc:	4619      	mov	r1, r3
 8007efe:	f04f 0c0a 	mov.w	ip, #10
 8007f02:	4620      	mov	r0, r4
 8007f04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f08:	3a30      	subs	r2, #48	@ 0x30
 8007f0a:	2a09      	cmp	r2, #9
 8007f0c:	d903      	bls.n	8007f16 <_svfiprintf_r+0x1a6>
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d0c6      	beq.n	8007ea0 <_svfiprintf_r+0x130>
 8007f12:	9105      	str	r1, [sp, #20]
 8007f14:	e7c4      	b.n	8007ea0 <_svfiprintf_r+0x130>
 8007f16:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f1a:	4604      	mov	r4, r0
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e7f0      	b.n	8007f02 <_svfiprintf_r+0x192>
 8007f20:	ab03      	add	r3, sp, #12
 8007f22:	9300      	str	r3, [sp, #0]
 8007f24:	462a      	mov	r2, r5
 8007f26:	4b0e      	ldr	r3, [pc, #56]	@ (8007f60 <_svfiprintf_r+0x1f0>)
 8007f28:	a904      	add	r1, sp, #16
 8007f2a:	4638      	mov	r0, r7
 8007f2c:	f3af 8000 	nop.w
 8007f30:	1c42      	adds	r2, r0, #1
 8007f32:	4606      	mov	r6, r0
 8007f34:	d1d6      	bne.n	8007ee4 <_svfiprintf_r+0x174>
 8007f36:	89ab      	ldrh	r3, [r5, #12]
 8007f38:	065b      	lsls	r3, r3, #25
 8007f3a:	f53f af2d 	bmi.w	8007d98 <_svfiprintf_r+0x28>
 8007f3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007f40:	e72c      	b.n	8007d9c <_svfiprintf_r+0x2c>
 8007f42:	ab03      	add	r3, sp, #12
 8007f44:	9300      	str	r3, [sp, #0]
 8007f46:	462a      	mov	r2, r5
 8007f48:	4b05      	ldr	r3, [pc, #20]	@ (8007f60 <_svfiprintf_r+0x1f0>)
 8007f4a:	a904      	add	r1, sp, #16
 8007f4c:	4638      	mov	r0, r7
 8007f4e:	f000 f879 	bl	8008044 <_printf_i>
 8007f52:	e7ed      	b.n	8007f30 <_svfiprintf_r+0x1c0>
 8007f54:	08008400 	.word	0x08008400
 8007f58:	0800840a 	.word	0x0800840a
 8007f5c:	00000000 	.word	0x00000000
 8007f60:	08007cb9 	.word	0x08007cb9
 8007f64:	08008406 	.word	0x08008406

08007f68 <_printf_common>:
 8007f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f6c:	4616      	mov	r6, r2
 8007f6e:	4698      	mov	r8, r3
 8007f70:	688a      	ldr	r2, [r1, #8]
 8007f72:	690b      	ldr	r3, [r1, #16]
 8007f74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	bfb8      	it	lt
 8007f7c:	4613      	movlt	r3, r2
 8007f7e:	6033      	str	r3, [r6, #0]
 8007f80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007f84:	4607      	mov	r7, r0
 8007f86:	460c      	mov	r4, r1
 8007f88:	b10a      	cbz	r2, 8007f8e <_printf_common+0x26>
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	6033      	str	r3, [r6, #0]
 8007f8e:	6823      	ldr	r3, [r4, #0]
 8007f90:	0699      	lsls	r1, r3, #26
 8007f92:	bf42      	ittt	mi
 8007f94:	6833      	ldrmi	r3, [r6, #0]
 8007f96:	3302      	addmi	r3, #2
 8007f98:	6033      	strmi	r3, [r6, #0]
 8007f9a:	6825      	ldr	r5, [r4, #0]
 8007f9c:	f015 0506 	ands.w	r5, r5, #6
 8007fa0:	d106      	bne.n	8007fb0 <_printf_common+0x48>
 8007fa2:	f104 0a19 	add.w	sl, r4, #25
 8007fa6:	68e3      	ldr	r3, [r4, #12]
 8007fa8:	6832      	ldr	r2, [r6, #0]
 8007faa:	1a9b      	subs	r3, r3, r2
 8007fac:	42ab      	cmp	r3, r5
 8007fae:	dc26      	bgt.n	8007ffe <_printf_common+0x96>
 8007fb0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007fb4:	6822      	ldr	r2, [r4, #0]
 8007fb6:	3b00      	subs	r3, #0
 8007fb8:	bf18      	it	ne
 8007fba:	2301      	movne	r3, #1
 8007fbc:	0692      	lsls	r2, r2, #26
 8007fbe:	d42b      	bmi.n	8008018 <_printf_common+0xb0>
 8007fc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007fc4:	4641      	mov	r1, r8
 8007fc6:	4638      	mov	r0, r7
 8007fc8:	47c8      	blx	r9
 8007fca:	3001      	adds	r0, #1
 8007fcc:	d01e      	beq.n	800800c <_printf_common+0xa4>
 8007fce:	6823      	ldr	r3, [r4, #0]
 8007fd0:	6922      	ldr	r2, [r4, #16]
 8007fd2:	f003 0306 	and.w	r3, r3, #6
 8007fd6:	2b04      	cmp	r3, #4
 8007fd8:	bf02      	ittt	eq
 8007fda:	68e5      	ldreq	r5, [r4, #12]
 8007fdc:	6833      	ldreq	r3, [r6, #0]
 8007fde:	1aed      	subeq	r5, r5, r3
 8007fe0:	68a3      	ldr	r3, [r4, #8]
 8007fe2:	bf0c      	ite	eq
 8007fe4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007fe8:	2500      	movne	r5, #0
 8007fea:	4293      	cmp	r3, r2
 8007fec:	bfc4      	itt	gt
 8007fee:	1a9b      	subgt	r3, r3, r2
 8007ff0:	18ed      	addgt	r5, r5, r3
 8007ff2:	2600      	movs	r6, #0
 8007ff4:	341a      	adds	r4, #26
 8007ff6:	42b5      	cmp	r5, r6
 8007ff8:	d11a      	bne.n	8008030 <_printf_common+0xc8>
 8007ffa:	2000      	movs	r0, #0
 8007ffc:	e008      	b.n	8008010 <_printf_common+0xa8>
 8007ffe:	2301      	movs	r3, #1
 8008000:	4652      	mov	r2, sl
 8008002:	4641      	mov	r1, r8
 8008004:	4638      	mov	r0, r7
 8008006:	47c8      	blx	r9
 8008008:	3001      	adds	r0, #1
 800800a:	d103      	bne.n	8008014 <_printf_common+0xac>
 800800c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008014:	3501      	adds	r5, #1
 8008016:	e7c6      	b.n	8007fa6 <_printf_common+0x3e>
 8008018:	18e1      	adds	r1, r4, r3
 800801a:	1c5a      	adds	r2, r3, #1
 800801c:	2030      	movs	r0, #48	@ 0x30
 800801e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008022:	4422      	add	r2, r4
 8008024:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008028:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800802c:	3302      	adds	r3, #2
 800802e:	e7c7      	b.n	8007fc0 <_printf_common+0x58>
 8008030:	2301      	movs	r3, #1
 8008032:	4622      	mov	r2, r4
 8008034:	4641      	mov	r1, r8
 8008036:	4638      	mov	r0, r7
 8008038:	47c8      	blx	r9
 800803a:	3001      	adds	r0, #1
 800803c:	d0e6      	beq.n	800800c <_printf_common+0xa4>
 800803e:	3601      	adds	r6, #1
 8008040:	e7d9      	b.n	8007ff6 <_printf_common+0x8e>
	...

08008044 <_printf_i>:
 8008044:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008048:	7e0f      	ldrb	r7, [r1, #24]
 800804a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800804c:	2f78      	cmp	r7, #120	@ 0x78
 800804e:	4691      	mov	r9, r2
 8008050:	4680      	mov	r8, r0
 8008052:	460c      	mov	r4, r1
 8008054:	469a      	mov	sl, r3
 8008056:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800805a:	d807      	bhi.n	800806c <_printf_i+0x28>
 800805c:	2f62      	cmp	r7, #98	@ 0x62
 800805e:	d80a      	bhi.n	8008076 <_printf_i+0x32>
 8008060:	2f00      	cmp	r7, #0
 8008062:	f000 80d1 	beq.w	8008208 <_printf_i+0x1c4>
 8008066:	2f58      	cmp	r7, #88	@ 0x58
 8008068:	f000 80b8 	beq.w	80081dc <_printf_i+0x198>
 800806c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008070:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008074:	e03a      	b.n	80080ec <_printf_i+0xa8>
 8008076:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800807a:	2b15      	cmp	r3, #21
 800807c:	d8f6      	bhi.n	800806c <_printf_i+0x28>
 800807e:	a101      	add	r1, pc, #4	@ (adr r1, 8008084 <_printf_i+0x40>)
 8008080:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008084:	080080dd 	.word	0x080080dd
 8008088:	080080f1 	.word	0x080080f1
 800808c:	0800806d 	.word	0x0800806d
 8008090:	0800806d 	.word	0x0800806d
 8008094:	0800806d 	.word	0x0800806d
 8008098:	0800806d 	.word	0x0800806d
 800809c:	080080f1 	.word	0x080080f1
 80080a0:	0800806d 	.word	0x0800806d
 80080a4:	0800806d 	.word	0x0800806d
 80080a8:	0800806d 	.word	0x0800806d
 80080ac:	0800806d 	.word	0x0800806d
 80080b0:	080081ef 	.word	0x080081ef
 80080b4:	0800811b 	.word	0x0800811b
 80080b8:	080081a9 	.word	0x080081a9
 80080bc:	0800806d 	.word	0x0800806d
 80080c0:	0800806d 	.word	0x0800806d
 80080c4:	08008211 	.word	0x08008211
 80080c8:	0800806d 	.word	0x0800806d
 80080cc:	0800811b 	.word	0x0800811b
 80080d0:	0800806d 	.word	0x0800806d
 80080d4:	0800806d 	.word	0x0800806d
 80080d8:	080081b1 	.word	0x080081b1
 80080dc:	6833      	ldr	r3, [r6, #0]
 80080de:	1d1a      	adds	r2, r3, #4
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	6032      	str	r2, [r6, #0]
 80080e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80080e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80080ec:	2301      	movs	r3, #1
 80080ee:	e09c      	b.n	800822a <_printf_i+0x1e6>
 80080f0:	6833      	ldr	r3, [r6, #0]
 80080f2:	6820      	ldr	r0, [r4, #0]
 80080f4:	1d19      	adds	r1, r3, #4
 80080f6:	6031      	str	r1, [r6, #0]
 80080f8:	0606      	lsls	r6, r0, #24
 80080fa:	d501      	bpl.n	8008100 <_printf_i+0xbc>
 80080fc:	681d      	ldr	r5, [r3, #0]
 80080fe:	e003      	b.n	8008108 <_printf_i+0xc4>
 8008100:	0645      	lsls	r5, r0, #25
 8008102:	d5fb      	bpl.n	80080fc <_printf_i+0xb8>
 8008104:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008108:	2d00      	cmp	r5, #0
 800810a:	da03      	bge.n	8008114 <_printf_i+0xd0>
 800810c:	232d      	movs	r3, #45	@ 0x2d
 800810e:	426d      	negs	r5, r5
 8008110:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008114:	4858      	ldr	r0, [pc, #352]	@ (8008278 <_printf_i+0x234>)
 8008116:	230a      	movs	r3, #10
 8008118:	e011      	b.n	800813e <_printf_i+0xfa>
 800811a:	6821      	ldr	r1, [r4, #0]
 800811c:	6833      	ldr	r3, [r6, #0]
 800811e:	0608      	lsls	r0, r1, #24
 8008120:	f853 5b04 	ldr.w	r5, [r3], #4
 8008124:	d402      	bmi.n	800812c <_printf_i+0xe8>
 8008126:	0649      	lsls	r1, r1, #25
 8008128:	bf48      	it	mi
 800812a:	b2ad      	uxthmi	r5, r5
 800812c:	2f6f      	cmp	r7, #111	@ 0x6f
 800812e:	4852      	ldr	r0, [pc, #328]	@ (8008278 <_printf_i+0x234>)
 8008130:	6033      	str	r3, [r6, #0]
 8008132:	bf14      	ite	ne
 8008134:	230a      	movne	r3, #10
 8008136:	2308      	moveq	r3, #8
 8008138:	2100      	movs	r1, #0
 800813a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800813e:	6866      	ldr	r6, [r4, #4]
 8008140:	60a6      	str	r6, [r4, #8]
 8008142:	2e00      	cmp	r6, #0
 8008144:	db05      	blt.n	8008152 <_printf_i+0x10e>
 8008146:	6821      	ldr	r1, [r4, #0]
 8008148:	432e      	orrs	r6, r5
 800814a:	f021 0104 	bic.w	r1, r1, #4
 800814e:	6021      	str	r1, [r4, #0]
 8008150:	d04b      	beq.n	80081ea <_printf_i+0x1a6>
 8008152:	4616      	mov	r6, r2
 8008154:	fbb5 f1f3 	udiv	r1, r5, r3
 8008158:	fb03 5711 	mls	r7, r3, r1, r5
 800815c:	5dc7      	ldrb	r7, [r0, r7]
 800815e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008162:	462f      	mov	r7, r5
 8008164:	42bb      	cmp	r3, r7
 8008166:	460d      	mov	r5, r1
 8008168:	d9f4      	bls.n	8008154 <_printf_i+0x110>
 800816a:	2b08      	cmp	r3, #8
 800816c:	d10b      	bne.n	8008186 <_printf_i+0x142>
 800816e:	6823      	ldr	r3, [r4, #0]
 8008170:	07df      	lsls	r7, r3, #31
 8008172:	d508      	bpl.n	8008186 <_printf_i+0x142>
 8008174:	6923      	ldr	r3, [r4, #16]
 8008176:	6861      	ldr	r1, [r4, #4]
 8008178:	4299      	cmp	r1, r3
 800817a:	bfde      	ittt	le
 800817c:	2330      	movle	r3, #48	@ 0x30
 800817e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008182:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008186:	1b92      	subs	r2, r2, r6
 8008188:	6122      	str	r2, [r4, #16]
 800818a:	f8cd a000 	str.w	sl, [sp]
 800818e:	464b      	mov	r3, r9
 8008190:	aa03      	add	r2, sp, #12
 8008192:	4621      	mov	r1, r4
 8008194:	4640      	mov	r0, r8
 8008196:	f7ff fee7 	bl	8007f68 <_printf_common>
 800819a:	3001      	adds	r0, #1
 800819c:	d14a      	bne.n	8008234 <_printf_i+0x1f0>
 800819e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80081a2:	b004      	add	sp, #16
 80081a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081a8:	6823      	ldr	r3, [r4, #0]
 80081aa:	f043 0320 	orr.w	r3, r3, #32
 80081ae:	6023      	str	r3, [r4, #0]
 80081b0:	4832      	ldr	r0, [pc, #200]	@ (800827c <_printf_i+0x238>)
 80081b2:	2778      	movs	r7, #120	@ 0x78
 80081b4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80081b8:	6823      	ldr	r3, [r4, #0]
 80081ba:	6831      	ldr	r1, [r6, #0]
 80081bc:	061f      	lsls	r7, r3, #24
 80081be:	f851 5b04 	ldr.w	r5, [r1], #4
 80081c2:	d402      	bmi.n	80081ca <_printf_i+0x186>
 80081c4:	065f      	lsls	r7, r3, #25
 80081c6:	bf48      	it	mi
 80081c8:	b2ad      	uxthmi	r5, r5
 80081ca:	6031      	str	r1, [r6, #0]
 80081cc:	07d9      	lsls	r1, r3, #31
 80081ce:	bf44      	itt	mi
 80081d0:	f043 0320 	orrmi.w	r3, r3, #32
 80081d4:	6023      	strmi	r3, [r4, #0]
 80081d6:	b11d      	cbz	r5, 80081e0 <_printf_i+0x19c>
 80081d8:	2310      	movs	r3, #16
 80081da:	e7ad      	b.n	8008138 <_printf_i+0xf4>
 80081dc:	4826      	ldr	r0, [pc, #152]	@ (8008278 <_printf_i+0x234>)
 80081de:	e7e9      	b.n	80081b4 <_printf_i+0x170>
 80081e0:	6823      	ldr	r3, [r4, #0]
 80081e2:	f023 0320 	bic.w	r3, r3, #32
 80081e6:	6023      	str	r3, [r4, #0]
 80081e8:	e7f6      	b.n	80081d8 <_printf_i+0x194>
 80081ea:	4616      	mov	r6, r2
 80081ec:	e7bd      	b.n	800816a <_printf_i+0x126>
 80081ee:	6833      	ldr	r3, [r6, #0]
 80081f0:	6825      	ldr	r5, [r4, #0]
 80081f2:	6961      	ldr	r1, [r4, #20]
 80081f4:	1d18      	adds	r0, r3, #4
 80081f6:	6030      	str	r0, [r6, #0]
 80081f8:	062e      	lsls	r6, r5, #24
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	d501      	bpl.n	8008202 <_printf_i+0x1be>
 80081fe:	6019      	str	r1, [r3, #0]
 8008200:	e002      	b.n	8008208 <_printf_i+0x1c4>
 8008202:	0668      	lsls	r0, r5, #25
 8008204:	d5fb      	bpl.n	80081fe <_printf_i+0x1ba>
 8008206:	8019      	strh	r1, [r3, #0]
 8008208:	2300      	movs	r3, #0
 800820a:	6123      	str	r3, [r4, #16]
 800820c:	4616      	mov	r6, r2
 800820e:	e7bc      	b.n	800818a <_printf_i+0x146>
 8008210:	6833      	ldr	r3, [r6, #0]
 8008212:	1d1a      	adds	r2, r3, #4
 8008214:	6032      	str	r2, [r6, #0]
 8008216:	681e      	ldr	r6, [r3, #0]
 8008218:	6862      	ldr	r2, [r4, #4]
 800821a:	2100      	movs	r1, #0
 800821c:	4630      	mov	r0, r6
 800821e:	f7f7 ffe7 	bl	80001f0 <memchr>
 8008222:	b108      	cbz	r0, 8008228 <_printf_i+0x1e4>
 8008224:	1b80      	subs	r0, r0, r6
 8008226:	6060      	str	r0, [r4, #4]
 8008228:	6863      	ldr	r3, [r4, #4]
 800822a:	6123      	str	r3, [r4, #16]
 800822c:	2300      	movs	r3, #0
 800822e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008232:	e7aa      	b.n	800818a <_printf_i+0x146>
 8008234:	6923      	ldr	r3, [r4, #16]
 8008236:	4632      	mov	r2, r6
 8008238:	4649      	mov	r1, r9
 800823a:	4640      	mov	r0, r8
 800823c:	47d0      	blx	sl
 800823e:	3001      	adds	r0, #1
 8008240:	d0ad      	beq.n	800819e <_printf_i+0x15a>
 8008242:	6823      	ldr	r3, [r4, #0]
 8008244:	079b      	lsls	r3, r3, #30
 8008246:	d413      	bmi.n	8008270 <_printf_i+0x22c>
 8008248:	68e0      	ldr	r0, [r4, #12]
 800824a:	9b03      	ldr	r3, [sp, #12]
 800824c:	4298      	cmp	r0, r3
 800824e:	bfb8      	it	lt
 8008250:	4618      	movlt	r0, r3
 8008252:	e7a6      	b.n	80081a2 <_printf_i+0x15e>
 8008254:	2301      	movs	r3, #1
 8008256:	4632      	mov	r2, r6
 8008258:	4649      	mov	r1, r9
 800825a:	4640      	mov	r0, r8
 800825c:	47d0      	blx	sl
 800825e:	3001      	adds	r0, #1
 8008260:	d09d      	beq.n	800819e <_printf_i+0x15a>
 8008262:	3501      	adds	r5, #1
 8008264:	68e3      	ldr	r3, [r4, #12]
 8008266:	9903      	ldr	r1, [sp, #12]
 8008268:	1a5b      	subs	r3, r3, r1
 800826a:	42ab      	cmp	r3, r5
 800826c:	dcf2      	bgt.n	8008254 <_printf_i+0x210>
 800826e:	e7eb      	b.n	8008248 <_printf_i+0x204>
 8008270:	2500      	movs	r5, #0
 8008272:	f104 0619 	add.w	r6, r4, #25
 8008276:	e7f5      	b.n	8008264 <_printf_i+0x220>
 8008278:	08008411 	.word	0x08008411
 800827c:	08008422 	.word	0x08008422

08008280 <memmove>:
 8008280:	4288      	cmp	r0, r1
 8008282:	b510      	push	{r4, lr}
 8008284:	eb01 0402 	add.w	r4, r1, r2
 8008288:	d902      	bls.n	8008290 <memmove+0x10>
 800828a:	4284      	cmp	r4, r0
 800828c:	4623      	mov	r3, r4
 800828e:	d807      	bhi.n	80082a0 <memmove+0x20>
 8008290:	1e43      	subs	r3, r0, #1
 8008292:	42a1      	cmp	r1, r4
 8008294:	d008      	beq.n	80082a8 <memmove+0x28>
 8008296:	f811 2b01 	ldrb.w	r2, [r1], #1
 800829a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800829e:	e7f8      	b.n	8008292 <memmove+0x12>
 80082a0:	4402      	add	r2, r0
 80082a2:	4601      	mov	r1, r0
 80082a4:	428a      	cmp	r2, r1
 80082a6:	d100      	bne.n	80082aa <memmove+0x2a>
 80082a8:	bd10      	pop	{r4, pc}
 80082aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80082ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80082b2:	e7f7      	b.n	80082a4 <memmove+0x24>

080082b4 <_sbrk_r>:
 80082b4:	b538      	push	{r3, r4, r5, lr}
 80082b6:	4d06      	ldr	r5, [pc, #24]	@ (80082d0 <_sbrk_r+0x1c>)
 80082b8:	2300      	movs	r3, #0
 80082ba:	4604      	mov	r4, r0
 80082bc:	4608      	mov	r0, r1
 80082be:	602b      	str	r3, [r5, #0]
 80082c0:	f7f8 fea4 	bl	800100c <_sbrk>
 80082c4:	1c43      	adds	r3, r0, #1
 80082c6:	d102      	bne.n	80082ce <_sbrk_r+0x1a>
 80082c8:	682b      	ldr	r3, [r5, #0]
 80082ca:	b103      	cbz	r3, 80082ce <_sbrk_r+0x1a>
 80082cc:	6023      	str	r3, [r4, #0]
 80082ce:	bd38      	pop	{r3, r4, r5, pc}
 80082d0:	200172ac 	.word	0x200172ac

080082d4 <_realloc_r>:
 80082d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082d8:	4607      	mov	r7, r0
 80082da:	4614      	mov	r4, r2
 80082dc:	460d      	mov	r5, r1
 80082de:	b921      	cbnz	r1, 80082ea <_realloc_r+0x16>
 80082e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082e4:	4611      	mov	r1, r2
 80082e6:	f7ff bc5b 	b.w	8007ba0 <_malloc_r>
 80082ea:	b92a      	cbnz	r2, 80082f8 <_realloc_r+0x24>
 80082ec:	f7ff fbec 	bl	8007ac8 <_free_r>
 80082f0:	4625      	mov	r5, r4
 80082f2:	4628      	mov	r0, r5
 80082f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082f8:	f000 f81a 	bl	8008330 <_malloc_usable_size_r>
 80082fc:	4284      	cmp	r4, r0
 80082fe:	4606      	mov	r6, r0
 8008300:	d802      	bhi.n	8008308 <_realloc_r+0x34>
 8008302:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008306:	d8f4      	bhi.n	80082f2 <_realloc_r+0x1e>
 8008308:	4621      	mov	r1, r4
 800830a:	4638      	mov	r0, r7
 800830c:	f7ff fc48 	bl	8007ba0 <_malloc_r>
 8008310:	4680      	mov	r8, r0
 8008312:	b908      	cbnz	r0, 8008318 <_realloc_r+0x44>
 8008314:	4645      	mov	r5, r8
 8008316:	e7ec      	b.n	80082f2 <_realloc_r+0x1e>
 8008318:	42b4      	cmp	r4, r6
 800831a:	4622      	mov	r2, r4
 800831c:	4629      	mov	r1, r5
 800831e:	bf28      	it	cs
 8008320:	4632      	movcs	r2, r6
 8008322:	f7ff fbc3 	bl	8007aac <memcpy>
 8008326:	4629      	mov	r1, r5
 8008328:	4638      	mov	r0, r7
 800832a:	f7ff fbcd 	bl	8007ac8 <_free_r>
 800832e:	e7f1      	b.n	8008314 <_realloc_r+0x40>

08008330 <_malloc_usable_size_r>:
 8008330:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008334:	1f18      	subs	r0, r3, #4
 8008336:	2b00      	cmp	r3, #0
 8008338:	bfbc      	itt	lt
 800833a:	580b      	ldrlt	r3, [r1, r0]
 800833c:	18c0      	addlt	r0, r0, r3
 800833e:	4770      	bx	lr

08008340 <_init>:
 8008340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008342:	bf00      	nop
 8008344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008346:	bc08      	pop	{r3}
 8008348:	469e      	mov	lr, r3
 800834a:	4770      	bx	lr

0800834c <_fini>:
 800834c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800834e:	bf00      	nop
 8008350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008352:	bc08      	pop	{r3}
 8008354:	469e      	mov	lr, r3
 8008356:	4770      	bx	lr
